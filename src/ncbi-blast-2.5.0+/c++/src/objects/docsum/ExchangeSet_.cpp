/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/ExchangeSet.hpp>
#include <objects/docsum/Assay.hpp>
#include <objects/docsum/BaseURL.hpp>
#include <objects/docsum/Rs.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CExchangeSet_Base::C_Attlist::ResetSetType(void)
{
    m_SetType.erase();
    m_set_State[0] &= ~0x3;
}

void CExchangeSet_Base::C_Attlist::ResetSetDepth(void)
{
    m_SetDepth.erase();
    m_set_State[0] &= ~0xc;
}

void CExchangeSet_Base::C_Attlist::ResetSpecVersion(void)
{
    m_SpecVersion.erase();
    m_set_State[0] &= ~0x30;
}

void CExchangeSet_Base::C_Attlist::ResetGenerated(void)
{
    m_Generated.erase();
    m_set_State[0] &= ~0x300;
}

void CExchangeSet_Base::C_Attlist::Reset(void)
{
    ResetSetType();
    ResetSetDepth();
    ResetSpecVersion();
    ResetDbSnpBuild();
    ResetGenerated();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_Attlist)
{
    SET_INTERNAL_NAME("ExchangeSet", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("setType", m_SetType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("setDepth", m_SetDepth)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("specVersion", m_SpecVersion)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("dbSnpBuild", m_DbSnpBuild)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("generated", m_Generated)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_Attlist::C_Attlist(void)
    : m_DbSnpBuild(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CExchangeSet_Base::C_Attlist::~C_Attlist(void)
{
}


void CExchangeSet_Base::C_SourceDatabase::C_Attlist::ResetOrganism(void)
{
    m_Organism.erase();
    m_set_State[0] &= ~0xc;
}

void CExchangeSet_Base::C_SourceDatabase::C_Attlist::ResetDbSnpOrgAbbr(void)
{
    m_DbSnpOrgAbbr.erase();
    m_set_State[0] &= ~0x30;
}

void CExchangeSet_Base::C_SourceDatabase::C_Attlist::ResetGpipeOrgAbbr(void)
{
    m_GpipeOrgAbbr.erase();
    m_set_State[0] &= ~0xc0;
}

void CExchangeSet_Base::C_SourceDatabase::C_Attlist::Reset(void)
{
    ResetTaxId();
    ResetOrganism();
    ResetDbSnpOrgAbbr();
    ResetGpipeOrgAbbr();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_SourceDatabase::C_Attlist)
{
    SET_INTERNAL_NAME("ExchangeSet.sourceDatabase", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("taxId", m_TaxId)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("organism", m_Organism)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("dbSnpOrgAbbr", m_DbSnpOrgAbbr)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gpipeOrgAbbr", m_GpipeOrgAbbr)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_SourceDatabase::C_Attlist::C_Attlist(void)
    : m_TaxId(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CExchangeSet_Base::C_SourceDatabase::C_Attlist::~C_Attlist(void)
{
}


void CExchangeSet_Base::C_SourceDatabase::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CExchangeSet_Base::C_SourceDatabase::SetAttlist(CExchangeSet_Base::C_SourceDatabase::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CExchangeSet_Base::C_SourceDatabase::Reset(void)
{
    ResetAttlist();
    ResetSourceDatabase();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_SourceDatabase)
{
    SET_INTERNAL_NAME("ExchangeSet", "sourceDatabase");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("sourceDatabase", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_SourceDatabase::C_SourceDatabase(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CExchangeSet_Base::C_SourceDatabase::~C_SourceDatabase(void)
{
}


void CExchangeSet_Base::C_Query::C_Attlist::ResetDate(void)
{
    m_Date.erase();
    m_set_State[0] &= ~0x3;
}

void CExchangeSet_Base::C_Query::C_Attlist::ResetString(void)
{
    m_String.erase();
    m_set_State[0] &= ~0xc;
}

void CExchangeSet_Base::C_Query::C_Attlist::Reset(void)
{
    ResetDate();
    ResetString();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_Query::C_Attlist)
{
    SET_INTERNAL_NAME("ExchangeSet.query", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("date", m_Date)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("string", m_String)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_Query::C_Attlist::C_Attlist(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CExchangeSet_Base::C_Query::C_Attlist::~C_Attlist(void)
{
}


void CExchangeSet_Base::C_Query::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CExchangeSet_Base::C_Query::SetAttlist(CExchangeSet_Base::C_Query::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CExchangeSet_Base::C_Query::Reset(void)
{
    ResetAttlist();
    ResetQuery();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_Query)
{
    SET_INTERNAL_NAME("ExchangeSet", "query");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("query", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_Query::C_Query(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CExchangeSet_Base::C_Query::~C_Query(void)
{
}


void CExchangeSet_Base::C_Summary::C_Attlist::Reset(void)
{
    ResetNumRsIds();
    ResetTotalSeqLength();
    ResetNumContigHits();
    ResetNumGeneHits();
    ResetNumGiHits();
    ResetNum3dStructs();
    ResetNumAlleleFreqs();
    ResetNumStsHits();
    ResetNumUnigeneCids();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_Summary::C_Attlist)
{
    SET_INTERNAL_NAME("ExchangeSet.summary", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("numRsIds", m_NumRsIds)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("totalSeqLength", m_TotalSeqLength)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numContigHits", m_NumContigHits)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numGeneHits", m_NumGeneHits)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numGiHits", m_NumGiHits)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("num3dStructs", m_Num3dStructs)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numAlleleFreqs", m_NumAlleleFreqs)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numStsHits", m_NumStsHits)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numUnigeneCids", m_NumUnigeneCids)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_Summary::C_Attlist::C_Attlist(void)
    : m_NumRsIds(0), m_TotalSeqLength(0), m_NumContigHits(0), m_NumGeneHits(0), m_NumGiHits(0), m_Num3dStructs(0), m_NumAlleleFreqs(0), m_NumStsHits(0), m_NumUnigeneCids(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CExchangeSet_Base::C_Summary::C_Attlist::~C_Attlist(void)
{
}


void CExchangeSet_Base::C_Summary::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CExchangeSet_Base::C_Summary::SetAttlist(CExchangeSet_Base::C_Summary::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CExchangeSet_Base::C_Summary::Reset(void)
{
    ResetAttlist();
    ResetSummary();
}

BEGIN_NAMED_CLASS_INFO("", CExchangeSet_Base::C_Summary)
{
    SET_INTERNAL_NAME("ExchangeSet", "summary");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("summary", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::C_Summary::C_Summary(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CExchangeSet_Base::C_Summary::~C_Summary(void)
{
}


void CExchangeSet_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CExchangeSet_Base::SetAttlist(CExchangeSet_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CExchangeSet_Base::ResetSourceDatabase(void)
{
    m_SourceDatabase.Reset();
}

void CExchangeSet_Base::SetSourceDatabase(CExchangeSet_Base::TSourceDatabase& value)
{
    m_SourceDatabase.Reset(&value);
}

CExchangeSet_Base::TSourceDatabase& CExchangeSet_Base::SetSourceDatabase(void)
{
    if ( !m_SourceDatabase )
        m_SourceDatabase.Reset(new C_SourceDatabase());
    return (*m_SourceDatabase);
}

void CExchangeSet_Base::ResetRs(void)
{
    m_Rs.clear();
    m_set_State[0] &= ~0x30;
}

void CExchangeSet_Base::ResetAssay(void)
{
    m_Assay.Reset();
}

void CExchangeSet_Base::SetAssay(CExchangeSet_Base::TAssay& value)
{
    m_Assay.Reset(&value);
}

CExchangeSet_Base::TAssay& CExchangeSet_Base::SetAssay(void)
{
    if ( !m_Assay )
        m_Assay.Reset(new ncbi::objects::CAssay());
    return (*m_Assay);
}

void CExchangeSet_Base::ResetQuery(void)
{
    m_Query.Reset();
}

void CExchangeSet_Base::SetQuery(CExchangeSet_Base::TQuery& value)
{
    m_Query.Reset(&value);
}

CExchangeSet_Base::TQuery& CExchangeSet_Base::SetQuery(void)
{
    if ( !m_Query )
        m_Query.Reset(new C_Query());
    return (*m_Query);
}

void CExchangeSet_Base::ResetSummary(void)
{
    m_Summary.Reset();
}

void CExchangeSet_Base::SetSummary(CExchangeSet_Base::TSummary& value)
{
    m_Summary.Reset(&value);
}

CExchangeSet_Base::TSummary& CExchangeSet_Base::SetSummary(void)
{
    if ( !m_Summary )
        m_Summary.Reset(new C_Summary());
    return (*m_Summary);
}

void CExchangeSet_Base::ResetBaseURL(void)
{
    m_BaseURL.clear();
    m_set_State[0] &= ~0x3000;
}

void CExchangeSet_Base::Reset(void)
{
    ResetAttlist();
    ResetSourceDatabase();
    ResetRs();
    ResetAssay();
    ResetQuery();
    ResetSummary();
    ResetBaseURL();
}

BEGIN_NAMED_BASE_CLASS_INFO("ExchangeSet", CExchangeSet)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_REF_MEMBER("sourceDatabase", m_SourceDatabase, C_SourceDatabase)->SetOptional();
    ADD_NAMED_MEMBER("rs", m_Rs, STL_list, (STL_CRef, (CLASS, (CRs))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("assay", m_Assay, CAssay)->SetOptional();
    ADD_NAMED_REF_MEMBER("query", m_Query, C_Query)->SetOptional();
    ADD_NAMED_REF_MEMBER("summary", m_Summary, C_Summary)->SetOptional();
    ADD_NAMED_MEMBER("baseURL", m_BaseURL, STL_list, (STL_CRef, (CLASS, (CBaseURL))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CExchangeSet_Base::CExchangeSet_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CExchangeSet_Base::~CExchangeSet_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

