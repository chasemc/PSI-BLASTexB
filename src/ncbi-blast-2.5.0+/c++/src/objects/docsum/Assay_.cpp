/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/Assay.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CAssay_Base::C_Attlist::, EAttlist_batchType, false)
{
    SET_ENUM_INTERNAL_NAME("Assay.attlist", "batchType");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("snpassay", eAttlist_batchType_snpassay);
    ADD_ENUM_VALUE("validation", eAttlist_batchType_validation);
    ADD_ENUM_VALUE("doublehit", eAttlist_batchType_doublehit);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CAssay_Base::C_Attlist::, EAttlist_molType, false)
{
    SET_ENUM_INTERNAL_NAME("Assay.attlist", "molType");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("genomic", eAttlist_molType_genomic);
    ADD_ENUM_VALUE("cDNA", eAttlist_molType_cDNA);
    ADD_ENUM_VALUE("mito", eAttlist_molType_mito);
    ADD_ENUM_VALUE("chloro", eAttlist_molType_chloro);
}
END_ENUM_INFO

void CAssay_Base::C_Attlist::ResetHandle(void)
{
    m_Handle.erase();
    m_set_State[0] &= ~0x3;
}

void CAssay_Base::C_Attlist::ResetBatch(void)
{
    m_Batch.erase();
    m_set_State[0] &= ~0xc;
}

void CAssay_Base::C_Attlist::ResetPopulation(void)
{
    m_Population.erase();
    m_set_State[0] &= ~0x3000;
}

void CAssay_Base::C_Attlist::ResetLinkoutUrl(void)
{
    m_LinkoutUrl.erase();
    m_set_State[0] &= ~0xc000;
}

void CAssay_Base::C_Attlist::Reset(void)
{
    ResetHandle();
    ResetBatch();
    ResetBatchId();
    ResetBatchType();
    ResetMolType();
    ResetSampleSize();
    ResetPopulation();
    ResetLinkoutUrl();
}

BEGIN_NAMED_CLASS_INFO("", CAssay_Base::C_Attlist)
{
    SET_INTERNAL_NAME("Assay", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("handle", m_Handle)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("batch", m_Batch)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("batchId", m_BatchId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("batchType", m_BatchType, EAttlist_batchType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("molType", m_MolType, EAttlist_molType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("sampleSize", m_SampleSize)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("population", m_Population)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("linkoutUrl", m_LinkoutUrl)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::C_Attlist::C_Attlist(void)
    : m_BatchId(0), m_BatchType((EAttlist_batchType)(0)), m_MolType((EAttlist_molType)(0)), m_SampleSize(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAssay_Base::C_Attlist::~C_Attlist(void)
{
}


void CAssay_Base::C_Method::C_EMethod::C_Attlist::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CAssay_Base::C_Method::C_EMethod::C_Attlist::ResetId(void)
{
    m_Id.erase();
    m_set_State[0] &= ~0xc;
}

void CAssay_Base::C_Method::C_EMethod::C_Attlist::Reset(void)
{
    ResetName();
    ResetId();
}

BEGIN_NAMED_CLASS_INFO("", CAssay_Base::C_Method::C_EMethod::C_Attlist)
{
    SET_INTERNAL_NAME("Assay.method.eMethod", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::C_Method::C_EMethod::C_Attlist::C_Attlist(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAssay_Base::C_Method::C_EMethod::C_Attlist::~C_Attlist(void)
{
}


void CAssay_Base::C_Method::C_EMethod::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CAssay_Base::C_Method::C_EMethod::SetAttlist(CAssay_Base::C_Method::C_EMethod::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CAssay_Base::C_Method::C_EMethod::ResetException(void)
{
    m_Exception.erase();
    m_set_State[0] &= ~0xc;
}

void CAssay_Base::C_Method::C_EMethod::Reset(void)
{
    ResetAttlist();
    ResetException();
}

BEGIN_NAMED_CLASS_INFO("", CAssay_Base::C_Method::C_EMethod)
{
    SET_INTERNAL_NAME("Assay.method", "eMethod");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_STD_MEMBER("exception", m_Exception)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::C_Method::C_EMethod::C_EMethod(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CAssay_Base::C_Method::C_EMethod::~C_EMethod(void)
{
}


void CAssay_Base::C_Method::ResetEMethod(void)
{
    m_EMethod.Reset();
}

void CAssay_Base::C_Method::SetEMethod(CAssay_Base::C_Method::TEMethod& value)
{
    m_EMethod.Reset(&value);
}

CAssay_Base::C_Method::TEMethod& CAssay_Base::C_Method::SetEMethod(void)
{
    if ( !m_EMethod )
        m_EMethod.Reset(new C_EMethod());
    return (*m_EMethod);
}

void CAssay_Base::C_Method::Reset(void)
{
    ResetEMethod();
}

BEGIN_NAMED_CLASS_INFO("", CAssay_Base::C_Method)
{
    SET_INTERNAL_NAME("Assay", "method");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("eMethod", m_EMethod, C_EMethod)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::C_Method::C_Method(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAssay_Base::C_Method::~C_Method(void)
{
}


void CAssay_Base::C_Taxonomy::C_Attlist::ResetOrganism(void)
{
    m_Organism.erase();
    m_set_State[0] &= ~0xc;
}

void CAssay_Base::C_Taxonomy::C_Attlist::Reset(void)
{
    ResetId();
    ResetOrganism();
}

BEGIN_NAMED_CLASS_INFO("", CAssay_Base::C_Taxonomy::C_Attlist)
{
    SET_INTERNAL_NAME("Assay.taxonomy", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("organism", m_Organism)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::C_Taxonomy::C_Attlist::C_Attlist(void)
    : m_Id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAssay_Base::C_Taxonomy::C_Attlist::~C_Attlist(void)
{
}


void CAssay_Base::C_Taxonomy::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CAssay_Base::C_Taxonomy::SetAttlist(CAssay_Base::C_Taxonomy::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CAssay_Base::C_Taxonomy::Reset(void)
{
    ResetAttlist();
    ResetTaxonomy();
}

BEGIN_NAMED_CLASS_INFO("", CAssay_Base::C_Taxonomy)
{
    SET_INTERNAL_NAME("Assay", "taxonomy");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("taxonomy", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::C_Taxonomy::C_Taxonomy(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CAssay_Base::C_Taxonomy::~C_Taxonomy(void)
{
}


void CAssay_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CAssay_Base::SetAttlist(CAssay_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CAssay_Base::ResetMethod(void)
{
    if ( !m_Method ) {
        m_Method.Reset(new TMethod());
        return;
    }
    (*m_Method).Reset();
}

void CAssay_Base::SetMethod(CAssay_Base::TMethod& value)
{
    m_Method.Reset(&value);
}

void CAssay_Base::ResetTaxonomy(void)
{
    if ( !m_Taxonomy ) {
        m_Taxonomy.Reset(new TTaxonomy());
        return;
    }
    (*m_Taxonomy).Reset();
}

void CAssay_Base::SetTaxonomy(CAssay_Base::TTaxonomy& value)
{
    m_Taxonomy.Reset(&value);
}

void CAssay_Base::ResetStrains(void)
{
    m_Strains.clear();
    m_set_State[0] &= ~0xc0;
}

void CAssay_Base::ResetComment(void)
{
    m_Comment.erase();
    m_set_State[0] &= ~0x300;
}

void CAssay_Base::ResetCitation(void)
{
    m_Citation.clear();
    m_set_State[0] &= ~0xc00;
}

void CAssay_Base::Reset(void)
{
    ResetAttlist();
    ResetMethod();
    ResetTaxonomy();
    ResetStrains();
    ResetComment();
    ResetCitation();
}

BEGIN_NAMED_BASE_CLASS_INFO("Assay", CAssay)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_REF_MEMBER("method", m_Method, C_Method);
    ADD_NAMED_REF_MEMBER("taxonomy", m_Taxonomy, C_Taxonomy);
    ADD_NAMED_MEMBER("strains", m_Strains, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("comment", m_Comment)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("citation", m_Citation, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssay_Base::CAssay_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
        ResetMethod();
        ResetTaxonomy();
    }
}

// destructor
CAssay_Base::~CAssay_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

