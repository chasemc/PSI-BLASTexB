/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/Assembly.hpp>
#include <objects/docsum/Component.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CAssembly_Base::C_Attlist::ResetGenomeBuild(void)
{
    m_GenomeBuild.erase();
    m_set_State[0] &= ~0xc;
}

void CAssembly_Base::C_Attlist::ResetGroupLabel(void)
{
    m_GroupLabel.erase();
    m_set_State[0] &= ~0x30;
}

void CAssembly_Base::C_Attlist::ResetAssemblySource(void)
{
    m_AssemblySource.erase();
    m_set_State[0] &= ~0xc0;
}

void CAssembly_Base::C_Attlist::Reset(void)
{
    ResetDbSnpBuild();
    ResetGenomeBuild();
    ResetGroupLabel();
    ResetAssemblySource();
    ResetCurrent();
    ResetReference();
}

BEGIN_NAMED_CLASS_INFO("", CAssembly_Base::C_Attlist)
{
    SET_INTERNAL_NAME("Assembly", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("dbSnpBuild", m_DbSnpBuild)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("genomeBuild", m_GenomeBuild)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("groupLabel", m_GroupLabel)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("assemblySource", m_AssemblySource)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("current", m_Current)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("reference", m_Reference)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssembly_Base::C_Attlist::C_Attlist(void)
    : m_DbSnpBuild(0), m_Current(0), m_Reference(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAssembly_Base::C_Attlist::~C_Attlist(void)
{
}


BEGIN_NAMED_ENUM_IN_INFO("", CAssembly_Base::C_SnpStat::C_Attlist::, ESnpStat_attlist_mapWeight, false)
{
    SET_ENUM_INTERNAL_NAME("Assembly.snpStat.attlist", "mapWeight");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("unmapped", eSnpStat_attlist_mapWeight_unmapped);
    ADD_ENUM_VALUE("unique-in-contig", eSnpStat_attlist_mapWeight_unique_in_contig);
    ADD_ENUM_VALUE("two-hits-in-contig", eSnpStat_attlist_mapWeight_two_hits_in_contig);
    ADD_ENUM_VALUE("less-10-hits", eSnpStat_attlist_mapWeight_less_10_hits);
    ADD_ENUM_VALUE("multiple-hits", eSnpStat_attlist_mapWeight_multiple_hits);
}
END_ENUM_INFO

void CAssembly_Base::C_SnpStat::C_Attlist::Reset(void)
{
    ResetMapWeight();
    ResetChromCount();
    ResetPlacedContigCount();
    ResetUnplacedContigCount();
    ResetSeqlocCount();
    ResetHapCount();
}

BEGIN_NAMED_CLASS_INFO("", CAssembly_Base::C_SnpStat::C_Attlist)
{
    SET_INTERNAL_NAME("Assembly.snpStat", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_ENUM_MEMBER("mapWeight", m_MapWeight, ESnpStat_attlist_mapWeight)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("chromCount", m_ChromCount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("placedContigCount", m_PlacedContigCount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("unplacedContigCount", m_UnplacedContigCount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("seqlocCount", m_SeqlocCount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("hapCount", m_HapCount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssembly_Base::C_SnpStat::C_Attlist::C_Attlist(void)
    : m_MapWeight((ESnpStat_attlist_mapWeight)(0)), m_ChromCount(0), m_PlacedContigCount(0), m_UnplacedContigCount(0), m_SeqlocCount(0), m_HapCount(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAssembly_Base::C_SnpStat::C_Attlist::~C_Attlist(void)
{
}


void CAssembly_Base::C_SnpStat::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CAssembly_Base::C_SnpStat::SetAttlist(CAssembly_Base::C_SnpStat::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CAssembly_Base::C_SnpStat::Reset(void)
{
    ResetAttlist();
    ResetSnpStat();
}

BEGIN_NAMED_CLASS_INFO("", CAssembly_Base::C_SnpStat)
{
    SET_INTERNAL_NAME("Assembly", "snpStat");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("snpStat", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssembly_Base::C_SnpStat::C_SnpStat(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CAssembly_Base::C_SnpStat::~C_SnpStat(void)
{
}


void CAssembly_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CAssembly_Base::SetAttlist(CAssembly_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CAssembly_Base::ResetComponent(void)
{
    m_Component.clear();
    m_set_State[0] &= ~0xc;
}

void CAssembly_Base::ResetSnpStat(void)
{
    if ( !m_SnpStat ) {
        m_SnpStat.Reset(new TSnpStat());
        return;
    }
    (*m_SnpStat).Reset();
}

void CAssembly_Base::SetSnpStat(CAssembly_Base::TSnpStat& value)
{
    m_SnpStat.Reset(&value);
}

void CAssembly_Base::Reset(void)
{
    ResetAttlist();
    ResetComponent();
    ResetSnpStat();
}

BEGIN_NAMED_BASE_CLASS_INFO("Assembly", CAssembly)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_MEMBER("component", m_Component, STL_list, (STL_CRef, (CLASS, (CComponent))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("snpStat", m_SnpStat, C_SnpStat);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAssembly_Base::CAssembly_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
        ResetSnpStat();
    }
}

// destructor
CAssembly_Base::~CAssembly_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

