/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/Rs.hpp>
#include <objects/docsum/Assembly.hpp>
#include <objects/docsum/PrimarySequence.hpp>
#include <objects/docsum/RsLinkout.hpp>
#include <objects/docsum/RsStruct.hpp>
#include <objects/docsum/Ss.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CRs_Base::C_Attlist::, EAttlist_snpClass, false)
{
    SET_ENUM_INTERNAL_NAME("Rs.attlist", "snpClass");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("snp", eAttlist_snpClass_snp);
    ADD_ENUM_VALUE("in-del", eAttlist_snpClass_in_del);
    ADD_ENUM_VALUE("heterozygous", eAttlist_snpClass_heterozygous);
    ADD_ENUM_VALUE("microsatellite", eAttlist_snpClass_microsatellite);
    ADD_ENUM_VALUE("named-locus", eAttlist_snpClass_named_locus);
    ADD_ENUM_VALUE("no-variation", eAttlist_snpClass_no_variation);
    ADD_ENUM_VALUE("mixed", eAttlist_snpClass_mixed);
    ADD_ENUM_VALUE("multinucleotide-polymorphism", eAttlist_snpClass_multinucleotide_polymorphism);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CRs_Base::C_Attlist::, EAttlist_snpType, false)
{
    SET_ENUM_INTERNAL_NAME("Rs.attlist", "snpType");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("notwithdrawn", eAttlist_snpType_notwithdrawn);
    ADD_ENUM_VALUE("artifact", eAttlist_snpType_artifact);
    ADD_ENUM_VALUE("gene-duplication", eAttlist_snpType_gene_duplication);
    ADD_ENUM_VALUE("duplicate-submission", eAttlist_snpType_duplicate_submission);
    ADD_ENUM_VALUE("notspecified", eAttlist_snpType_notspecified);
    ADD_ENUM_VALUE("ambiguous-location", eAttlist_snpType_ambiguous_location);
    ADD_ENUM_VALUE("low-map-quality", eAttlist_snpType_low_map_quality);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CRs_Base::C_Attlist::, EAttlist_molType, false)
{
    SET_ENUM_INTERNAL_NAME("Rs.attlist", "molType");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("genomic", eAttlist_molType_genomic);
    ADD_ENUM_VALUE("cDNA", eAttlist_molType_cDNA);
    ADD_ENUM_VALUE("mito", eAttlist_molType_mito);
    ADD_ENUM_VALUE("chloro", eAttlist_molType_chloro);
    ADD_ENUM_VALUE("unknown", eAttlist_molType_unknown);
}
END_ENUM_INFO

void CRs_Base::C_Attlist::ResetBitField(void)
{
    m_BitField.erase();
    m_set_State[0] &= ~0xc000;
}

void CRs_Base::C_Attlist::Reset(void)
{
    ResetRsId();
    ResetSnpClass();
    ResetSnpType();
    ResetMolType();
    ResetValidProbMin();
    ResetValidProbMax();
    ResetGenotype();
    ResetBitField();
    ResetTaxId();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Attlist)
{
    SET_INTERNAL_NAME("Rs", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("rsId", m_RsId)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("snpClass", m_SnpClass, EAttlist_snpClass)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("snpType", m_SnpType, EAttlist_snpType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("molType", m_MolType, EAttlist_molType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("validProbMin", m_ValidProbMin)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("validProbMax", m_ValidProbMax)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("genotype", m_Genotype)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("bitField", m_BitField)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("taxId", m_TaxId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Attlist::C_Attlist(void)
    : m_RsId(0), m_SnpClass((EAttlist_snpClass)(0)), m_SnpType((EAttlist_snpType)(0)), m_MolType((EAttlist_molType)(0)), m_ValidProbMin(0), m_ValidProbMax(0), m_Genotype(0), m_TaxId(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_Attlist::~C_Attlist(void)
{
}


BEGIN_NAMED_ENUM_IN_INFO("", CRs_Base::C_Het::C_Attlist::, EHet_attlist_type, false)
{
    SET_ENUM_INTERNAL_NAME("Rs.het.attlist", "type");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("est", eHet_attlist_type_est);
    ADD_ENUM_VALUE("obs", eHet_attlist_type_obs);
}
END_ENUM_INFO

void CRs_Base::C_Het::C_Attlist::Reset(void)
{
    ResetType();
    ResetValue();
    ResetStdError();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Het::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.het", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EHet_attlist_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("value", m_Value)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("stdError", m_StdError)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Het::C_Attlist::C_Attlist(void)
    : m_Type((EHet_attlist_type)(0)), m_Value(0), m_StdError(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_Het::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_Het::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_Het::SetAttlist(CRs_Base::C_Het::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_Het::Reset(void)
{
    ResetAttlist();
    ResetHet();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Het)
{
    SET_INTERNAL_NAME("Rs", "het");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("het", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Het::C_Het(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_Het::~C_Het(void)
{
}


void CRs_Base::C_Validation::C_Attlist::Reset(void)
{
    ResetByCluster();
    ResetByFrequency();
    ResetByOtherPop();
    ResetBy2Hit2Allele();
    ResetByHapMap();
    ResetBy1000G();
    ResetSuspect();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Validation::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.validation", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("byCluster", m_ByCluster)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("byFrequency", m_ByFrequency)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("byOtherPop", m_ByOtherPop)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("by2Hit2Allele", m_By2Hit2Allele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("byHapMap", m_ByHapMap)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("by1000G", m_By1000G)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("suspect", m_Suspect)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Validation::C_Attlist::C_Attlist(void)
    : m_ByCluster(0), m_ByFrequency(0), m_ByOtherPop(0), m_By2Hit2Allele(0), m_ByHapMap(0), m_By1000G(0), m_Suspect(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_Validation::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_Validation::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_Validation::SetAttlist(CRs_Base::C_Validation::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_Validation::ResetOtherPopBatchId(void)
{
    m_OtherPopBatchId.clear();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_Validation::ResetTwoHit2AlleleBatchId(void)
{
    m_TwoHit2AlleleBatchId.clear();
    m_set_State[0] &= ~0x30;
}

void CRs_Base::C_Validation::ResetFrequencyClass(void)
{
    m_FrequencyClass.clear();
    m_set_State[0] &= ~0xc0;
}

void CRs_Base::C_Validation::ResetHapMapPhase(void)
{
    m_HapMapPhase.clear();
    m_set_State[0] &= ~0x300;
}

void CRs_Base::C_Validation::ResetTGPPhase(void)
{
    m_TGPPhase.clear();
    m_set_State[0] &= ~0xc00;
}

void CRs_Base::C_Validation::ResetSuspectEvidence(void)
{
    m_SuspectEvidence.clear();
    m_set_State[0] &= ~0x3000;
}

void CRs_Base::C_Validation::Reset(void)
{
    ResetAttlist();
    ResetOtherPopBatchId();
    ResetTwoHit2AlleleBatchId();
    ResetFrequencyClass();
    ResetHapMapPhase();
    ResetTGPPhase();
    ResetSuspectEvidence();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Validation)
{
    SET_INTERNAL_NAME("Rs", "validation");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_MEMBER("otherPopBatchId", m_OtherPopBatchId, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("twoHit2AlleleBatchId", m_TwoHit2AlleleBatchId, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("frequencyClass", m_FrequencyClass, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("hapMapPhase", m_HapMapPhase, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("tGPPhase", m_TGPPhase, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("suspectEvidence", m_SuspectEvidence, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Validation::C_Validation(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_Validation::~C_Validation(void)
{
}


void CRs_Base::C_Create::C_Attlist::ResetDate(void)
{
    m_Date.erase();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_Create::C_Attlist::Reset(void)
{
    ResetBuild();
    ResetDate();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Create::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.create", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("build", m_Build)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("date", m_Date)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Create::C_Attlist::C_Attlist(void)
    : m_Build(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_Create::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_Create::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_Create::SetAttlist(CRs_Base::C_Create::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_Create::Reset(void)
{
    ResetAttlist();
    ResetCreate();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Create)
{
    SET_INTERNAL_NAME("Rs", "create");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("create", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Create::C_Create(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_Create::~C_Create(void)
{
}


void CRs_Base::C_Update::C_Attlist::ResetDate(void)
{
    m_Date.erase();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_Update::C_Attlist::Reset(void)
{
    ResetBuild();
    ResetDate();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Update::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.update", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("build", m_Build)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("date", m_Date)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Update::C_Attlist::C_Attlist(void)
    : m_Build(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_Update::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_Update::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_Update::SetAttlist(CRs_Base::C_Update::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_Update::Reset(void)
{
    ResetAttlist();
    ResetUpdate();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Update)
{
    SET_INTERNAL_NAME("Rs", "update");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("update", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Update::C_Update(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_Update::~C_Update(void)
{
}


void CRs_Base::C_Sequence::C_Attlist::ResetAncestralAllele(void)
{
    m_AncestralAllele.erase();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_Sequence::C_Attlist::Reset(void)
{
    ResetExemplarSs();
    ResetAncestralAllele();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Sequence::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.sequence", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("exemplarSs", m_ExemplarSs)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("ancestralAllele", m_AncestralAllele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Sequence::C_Attlist::C_Attlist(void)
    : m_ExemplarSs(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_Sequence::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_Sequence::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_Sequence::SetAttlist(CRs_Base::C_Sequence::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_Sequence::ResetSeq5(void)
{
    m_Seq5.erase();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_Sequence::ResetObserved(void)
{
    m_Observed.erase();
    m_set_State[0] &= ~0x30;
}

void CRs_Base::C_Sequence::ResetSeq3(void)
{
    m_Seq3.erase();
    m_set_State[0] &= ~0xc0;
}

void CRs_Base::C_Sequence::Reset(void)
{
    ResetAttlist();
    ResetSeq5();
    ResetObserved();
    ResetSeq3();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_Sequence)
{
    SET_INTERNAL_NAME("Rs", "sequence");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_STD_MEMBER("seq5", m_Seq5)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("observed", m_Observed)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("seq3", m_Seq3)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_Sequence::C_Sequence(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_Sequence::~C_Sequence(void)
{
}


void CRs_Base::C_E_MergeHistory::C_Attlist::Reset(void)
{
    ResetRsId();
    ResetBuildId();
    ResetOrientFlip();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_MergeHistory::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.mergeHistory.E", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("rsId", m_RsId)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("buildId", m_BuildId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("orientFlip", m_OrientFlip)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_MergeHistory::C_Attlist::C_Attlist(void)
    : m_RsId(0), m_BuildId(0), m_OrientFlip(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_E_MergeHistory::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_E_MergeHistory::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_E_MergeHistory::SetAttlist(CRs_Base::C_E_MergeHistory::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_E_MergeHistory::Reset(void)
{
    ResetAttlist();
    ResetMergeHistory();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_MergeHistory)
{
    SET_INTERNAL_NAME("Rs.mergeHistory", "E");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("mergeHistory", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_MergeHistory::C_E_MergeHistory(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_E_MergeHistory::~C_E_MergeHistory(void)
{
}


void CRs_Base::C_E_AlleleOrigin::C_Attlist::ResetAllele(void)
{
    m_Allele.erase();
    m_set_State[0] &= ~0x3;
}

void CRs_Base::C_E_AlleleOrigin::C_Attlist::Reset(void)
{
    ResetAllele();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_AlleleOrigin::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.alleleOrigin.E", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("allele", m_Allele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_AlleleOrigin::C_Attlist::C_Attlist(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_E_AlleleOrigin::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_E_AlleleOrigin::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_E_AlleleOrigin::SetAttlist(CRs_Base::C_E_AlleleOrigin::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_E_AlleleOrigin::Reset(void)
{
    ResetAttlist();
    ResetAlleleOrigin();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_AlleleOrigin)
{
    SET_INTERNAL_NAME("Rs.alleleOrigin", "E");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_STD_MEMBER("alleleOrigin", m_AlleleOrigin)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_AlleleOrigin::C_E_AlleleOrigin(void)
    : m_AlleleOrigin(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_E_AlleleOrigin::~C_E_AlleleOrigin(void)
{
}


void CRs_Base::C_E_Phenotype::ResetClinicalSignificance(void)
{
    m_ClinicalSignificance.clear();
    m_set_State[0] &= ~0x3;
}

void CRs_Base::C_E_Phenotype::Reset(void)
{
    ResetClinicalSignificance();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_Phenotype)
{
    SET_INTERNAL_NAME("Rs.phenotype", "E");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_MEMBER("clinicalSignificance", m_ClinicalSignificance, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_Phenotype::C_E_Phenotype(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_E_Phenotype::~C_E_Phenotype(void)
{
}


void CRs_Base::C_E_BioSource::ResetGenome(void)
{
    m_Genome.clear();
    m_set_State[0] &= ~0x3;
}

void CRs_Base::C_E_BioSource::ResetOrigin(void)
{
    m_Origin.clear();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_E_BioSource::Reset(void)
{
    ResetGenome();
    ResetOrigin();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_BioSource)
{
    SET_INTERNAL_NAME("Rs.bioSource", "E");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_MEMBER("genome", m_Genome, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("origin", m_Origin, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_BioSource::C_E_BioSource(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_E_BioSource::~C_E_BioSource(void)
{
}


void CRs_Base::C_E_Frequency::C_Attlist::ResetAllele(void)
{
    m_Allele.erase();
    m_set_State[0] &= ~0xc;
}

void CRs_Base::C_E_Frequency::C_Attlist::Reset(void)
{
    ResetFreq();
    ResetAllele();
    ResetPopId();
    ResetSampleSize();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_Frequency::C_Attlist)
{
    SET_INTERNAL_NAME("Rs.frequency.E", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("freq", m_Freq)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("allele", m_Allele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("popId", m_PopId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("sampleSize", m_SampleSize)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_Frequency::C_Attlist::C_Attlist(void)
    : m_Freq(0), m_PopId(0), m_SampleSize(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRs_Base::C_E_Frequency::C_Attlist::~C_Attlist(void)
{
}


void CRs_Base::C_E_Frequency::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::C_E_Frequency::SetAttlist(CRs_Base::C_E_Frequency::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::C_E_Frequency::Reset(void)
{
    ResetAttlist();
    ResetFrequency();
}

BEGIN_NAMED_CLASS_INFO("", CRs_Base::C_E_Frequency)
{
    SET_INTERNAL_NAME("Rs.frequency", "E");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("frequency", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::C_E_Frequency::C_E_Frequency(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CRs_Base::C_E_Frequency::~C_E_Frequency(void)
{
}


void CRs_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CRs_Base::SetAttlist(CRs_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CRs_Base::ResetHet(void)
{
    m_Het.Reset();
}

void CRs_Base::SetHet(CRs_Base::THet& value)
{
    m_Het.Reset(&value);
}

CRs_Base::THet& CRs_Base::SetHet(void)
{
    if ( !m_Het )
        m_Het.Reset(new C_Het());
    return (*m_Het);
}

void CRs_Base::ResetValidation(void)
{
    if ( !m_Validation ) {
        m_Validation.Reset(new TValidation());
        return;
    }
    (*m_Validation).Reset();
}

void CRs_Base::SetValidation(CRs_Base::TValidation& value)
{
    m_Validation.Reset(&value);
}

void CRs_Base::ResetCreate(void)
{
    if ( !m_Create ) {
        m_Create.Reset(new TCreate());
        return;
    }
    (*m_Create).Reset();
}

void CRs_Base::SetCreate(CRs_Base::TCreate& value)
{
    m_Create.Reset(&value);
}

void CRs_Base::ResetUpdate(void)
{
    m_Update.Reset();
}

void CRs_Base::SetUpdate(CRs_Base::TUpdate& value)
{
    m_Update.Reset(&value);
}

CRs_Base::TUpdate& CRs_Base::SetUpdate(void)
{
    if ( !m_Update )
        m_Update.Reset(new C_Update());
    return (*m_Update);
}

void CRs_Base::ResetSequence(void)
{
    if ( !m_Sequence ) {
        m_Sequence.Reset(new TSequence());
        return;
    }
    (*m_Sequence).Reset();
}

void CRs_Base::SetSequence(CRs_Base::TSequence& value)
{
    m_Sequence.Reset(&value);
}

void CRs_Base::ResetSs(void)
{
    m_Ss.clear();
    m_set_State[0] &= ~0x3000;
}

void CRs_Base::ResetAssembly(void)
{
    m_Assembly.clear();
    m_set_State[0] &= ~0xc000;
}

void CRs_Base::ResetPrimarySequence(void)
{
    m_PrimarySequence.clear();
    m_set_State[0] &= ~0x30000;
}

void CRs_Base::ResetRsStruct(void)
{
    m_RsStruct.clear();
    m_set_State[0] &= ~0xc0000;
}

void CRs_Base::ResetRsLinkout(void)
{
    m_RsLinkout.clear();
    m_set_State[0] &= ~0x300000;
}

void CRs_Base::ResetMergeHistory(void)
{
    m_MergeHistory.clear();
    m_set_State[0] &= ~0xc00000;
}

void CRs_Base::ResetHgvs(void)
{
    m_Hgvs.clear();
    m_set_State[0] &= ~0x3000000;
}

void CRs_Base::ResetAlleleOrigin(void)
{
    m_AlleleOrigin.clear();
    m_set_State[0] &= ~0xc000000;
}

void CRs_Base::ResetPhenotype(void)
{
    m_Phenotype.clear();
    m_set_State[0] &= ~0x30000000;
}

void CRs_Base::ResetBioSource(void)
{
    m_BioSource.clear();
    m_set_State[0] &= ~0xc0000000;
}

void CRs_Base::ResetFrequency(void)
{
    m_Frequency.clear();
    m_set_State[1] &= ~0x3;
}

void CRs_Base::Reset(void)
{
    ResetAttlist();
    ResetHet();
    ResetValidation();
    ResetCreate();
    ResetUpdate();
    ResetSequence();
    ResetSs();
    ResetAssembly();
    ResetPrimarySequence();
    ResetRsStruct();
    ResetRsLinkout();
    ResetMergeHistory();
    ResetHgvs();
    ResetAlleleOrigin();
    ResetPhenotype();
    ResetBioSource();
    ResetFrequency();
}

BEGIN_NAMED_BASE_CLASS_INFO("Rs", CRs)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_REF_MEMBER("het", m_Het, C_Het)->SetOptional();
    ADD_NAMED_REF_MEMBER("validation", m_Validation, C_Validation);
    ADD_NAMED_REF_MEMBER("create", m_Create, C_Create);
    ADD_NAMED_REF_MEMBER("update", m_Update, C_Update)->SetOptional();
    ADD_NAMED_REF_MEMBER("sequence", m_Sequence, C_Sequence);
    ADD_NAMED_MEMBER("ss", m_Ss, STL_list, (STL_CRef, (CLASS, (CSs))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("assembly", m_Assembly, STL_list, (STL_CRef, (CLASS, (CAssembly))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("primarySequence", m_PrimarySequence, STL_list, (STL_CRef, (CLASS, (CPrimarySequence))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("rsStruct", m_RsStruct, STL_list, (STL_CRef, (CLASS, (CRsStruct))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("rsLinkout", m_RsLinkout, STL_list, (STL_CRef, (CLASS, (CRsLinkout))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("mergeHistory", m_MergeHistory, STL_list, (STL_CRef, (CLASS, (C_E_MergeHistory))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("hgvs", m_Hgvs, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("alleleOrigin", m_AlleleOrigin, STL_list, (STL_CRef, (CLASS, (C_E_AlleleOrigin))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("phenotype", m_Phenotype, STL_list, (STL_CRef, (CLASS, (C_E_Phenotype))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("bioSource", m_BioSource, STL_list, (STL_CRef, (CLASS, (C_E_BioSource))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("frequency", m_Frequency, STL_list, (STL_CRef, (CLASS, (C_E_Frequency))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRs_Base::CRs_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
        ResetValidation();
        ResetCreate();
        ResetSequence();
    }
}

// destructor
CRs_Base::~CRs_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

