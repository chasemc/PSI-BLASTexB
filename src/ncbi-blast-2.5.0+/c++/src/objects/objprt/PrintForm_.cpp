/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'objprt.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/objprt/PrintForm.hpp>
#include <objects/objprt/PrintFormBlock.hpp>
#include <objects/objprt/PrintFormBoolean.hpp>
#include <objects/objprt/PrintFormEnum.hpp>
#include <objects/objprt/PrintFormText.hpp>
#include <objects/objprt/UserFormat.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CPrintForm_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CPrintForm_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Use_template:
        m_Use_template.Destruct();
        break;
    case e_Block:
    case e_Boolean:
    case e_Enum:
    case e_Text:
    case e_User:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CPrintForm_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Block:
        (m_object = new(pool) ncbi::objects::CPrintFormBlock())->AddReference();
        break;
    case e_Boolean:
        (m_object = new(pool) ncbi::objects::CPrintFormBoolean())->AddReference();
        break;
    case e_Enum:
        (m_object = new(pool) ncbi::objects::CPrintFormEnum())->AddReference();
        break;
    case e_Text:
        (m_object = new(pool) ncbi::objects::CPrintFormText())->AddReference();
        break;
    case e_Use_template:
        m_Use_template.Construct();
        break;
    case e_User:
        (m_object = new(pool) ncbi::objects::CUserFormat())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CPrintForm_Base::sm_SelectionNames[] = {
    "not set",
    "block",
    "boolean",
    "enum",
    "text",
    "use-template",
    "user",
    "null"
};

NCBI_NS_STD::string CPrintForm_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CPrintForm_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CPrintForm_Base::TBlock& CPrintForm_Base::GetBlock(void) const
{
    CheckSelected(e_Block);
    return *static_cast<const TBlock*>(m_object);
}

CPrintForm_Base::TBlock& CPrintForm_Base::SetBlock(void)
{
    Select(e_Block, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBlock*>(m_object);
}

void CPrintForm_Base::SetBlock(CPrintForm_Base::TBlock& value)
{
    TBlock* ptr = &value;
    if ( m_choice != e_Block || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Block;
    }
}

const CPrintForm_Base::TBoolean& CPrintForm_Base::GetBoolean(void) const
{
    CheckSelected(e_Boolean);
    return *static_cast<const TBoolean*>(m_object);
}

CPrintForm_Base::TBoolean& CPrintForm_Base::SetBoolean(void)
{
    Select(e_Boolean, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBoolean*>(m_object);
}

void CPrintForm_Base::SetBoolean(CPrintForm_Base::TBoolean& value)
{
    TBoolean* ptr = &value;
    if ( m_choice != e_Boolean || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Boolean;
    }
}

const CPrintForm_Base::TEnum& CPrintForm_Base::GetEnum(void) const
{
    CheckSelected(e_Enum);
    return *static_cast<const TEnum*>(m_object);
}

CPrintForm_Base::TEnum& CPrintForm_Base::SetEnum(void)
{
    Select(e_Enum, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TEnum*>(m_object);
}

void CPrintForm_Base::SetEnum(CPrintForm_Base::TEnum& value)
{
    TEnum* ptr = &value;
    if ( m_choice != e_Enum || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Enum;
    }
}

const CPrintForm_Base::TText& CPrintForm_Base::GetText(void) const
{
    CheckSelected(e_Text);
    return *static_cast<const TText*>(m_object);
}

CPrintForm_Base::TText& CPrintForm_Base::SetText(void)
{
    Select(e_Text, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TText*>(m_object);
}

void CPrintForm_Base::SetText(CPrintForm_Base::TText& value)
{
    TText* ptr = &value;
    if ( m_choice != e_Text || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Text;
    }
}

void CPrintForm_Base::SetUse_template(const CPrintForm_Base::TUse_template& value)
{
    Select(e_Use_template, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_Use_template = value;
}

const CPrintForm_Base::TUser& CPrintForm_Base::GetUser(void) const
{
    CheckSelected(e_User);
    return *static_cast<const TUser*>(m_object);
}

CPrintForm_Base::TUser& CPrintForm_Base::SetUser(void)
{
    Select(e_User, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TUser*>(m_object);
}

void CPrintForm_Base::SetUser(CPrintForm_Base::TUser& value)
{
    TUser* ptr = &value;
    if ( m_choice != e_User || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_User;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("PrintForm", CPrintForm)
{
    SET_CHOICE_MODULE("NCBI-ObjPrt");
    ADD_NAMED_REF_CHOICE_VARIANT("block", m_object, CPrintFormBlock);
    ADD_NAMED_REF_CHOICE_VARIANT("boolean", m_object, CPrintFormBoolean);
    ADD_NAMED_REF_CHOICE_VARIANT("enum", m_object, CPrintFormEnum);
    ADD_NAMED_REF_CHOICE_VARIANT("text", m_object, CPrintFormText);
    ADD_NAMED_BUF_CHOICE_VARIANT("use-template", m_Use_template, CLASS, (CTemplateName));
    ADD_NAMED_REF_CHOICE_VARIANT("user", m_object, CUserFormat);
    ADD_NAMED_NULL_CHOICE_VARIANT("null", null, ());
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CPrintForm_Base::CPrintForm_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CPrintForm_Base::~CPrintForm_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

