/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'blastxml.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/blastxml/Hsp.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CHsp_Base::ResetQseq(void)
{
    m_Qseq.erase();
    m_set_State[1] &= ~0xc;
}

void CHsp_Base::ResetHseq(void)
{
    m_Hseq.erase();
    m_set_State[1] &= ~0x30;
}

void CHsp_Base::ResetMidline(void)
{
    m_Midline.erase();
    m_set_State[1] &= ~0xc0;
}

void CHsp_Base::Reset(void)
{
    ResetNum();
    ResetBit_score();
    ResetScore();
    ResetEvalue();
    ResetQuery_from();
    ResetQuery_to();
    ResetHit_from();
    ResetHit_to();
    ResetPattern_from();
    ResetPattern_to();
    ResetQuery_frame();
    ResetHit_frame();
    ResetIdentity();
    ResetPositive();
    ResetGaps();
    ResetAlign_len();
    ResetDensity();
    ResetQseq();
    ResetHseq();
    ResetMidline();
}

BEGIN_NAMED_BASE_CLASS_INFO("Hsp", CHsp)
{
    SET_CLASS_MODULE("NCBI-BlastOutput");
    ADD_NAMED_STD_MEMBER("num", m_Num)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("bit-score", m_Bit_score)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("score", m_Score)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("evalue", m_Evalue)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("query-from", m_Query_from)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("query-to", m_Query_to)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("hit-from", m_Hit_from)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("hit-to", m_Hit_to)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("pattern-from", m_Pattern_from)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pattern-to", m_Pattern_to)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("query-frame", m_Query_frame)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("hit-frame", m_Hit_frame)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("identity", m_Identity)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("positive", m_Positive)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gaps", m_Gaps)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("align-len", m_Align_len)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("density", m_Density)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("qseq", m_Qseq)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("hseq", m_Hseq)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("midline", m_Midline)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CHsp_Base::CHsp_Base(void)
    : m_Num(0), m_Bit_score(0), m_Score(0), m_Evalue(0), m_Query_from(0), m_Query_to(0), m_Hit_from(0), m_Hit_to(0), m_Pattern_from(0), m_Pattern_to(0), m_Query_frame(0), m_Hit_frame(0), m_Identity(0), m_Positive(0), m_Gaps(0), m_Align_len(0), m_Density(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CHsp_Base::~CHsp_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

