/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'cdd.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/cdd/Cdd_descr.hpp>
#include <objects/cdd/Cdd_book_ref.hpp>
#include <objects/cdd/Cdd_id_set.hpp>
#include <objects/cdd/Cdd_repeat.hpp>
#include <objects/general/Date.hpp>
#include <objects/pub/Pub.hpp>
#include <objects/seqfeat/Org_ref.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CCdd_descr_Base::, EStatus, true)
{
    SET_ENUM_INTERNAL_NAME("Cdd-descr", "status");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("unassigned", eStatus_unassigned);
    ADD_ENUM_VALUE("finished-ok", eStatus_finished_ok);
    ADD_ENUM_VALUE("pending-release", eStatus_pending_release);
    ADD_ENUM_VALUE("other-asis", eStatus_other_asis);
    ADD_ENUM_VALUE("matrix-only", eStatus_matrix_only);
    ADD_ENUM_VALUE("update-running", eStatus_update_running);
    ADD_ENUM_VALUE("auto-updated", eStatus_auto_updated);
    ADD_ENUM_VALUE("claimed", eStatus_claimed);
    ADD_ENUM_VALUE("curated-complete", eStatus_curated_complete);
    ADD_ENUM_VALUE("other", eStatus_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CCdd_descr_Base::, ECuration_status, true)
{
    SET_ENUM_INTERNAL_NAME("Cdd-descr", "curation-status");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("unassigned", eCuration_status_unassigned);
    ADD_ENUM_VALUE("prein", eCuration_status_prein);
    ADD_ENUM_VALUE("ofc", eCuration_status_ofc);
    ADD_ENUM_VALUE("iac", eCuration_status_iac);
    ADD_ENUM_VALUE("ofv1", eCuration_status_ofv1);
    ADD_ENUM_VALUE("iav1", eCuration_status_iav1);
    ADD_ENUM_VALUE("ofv2", eCuration_status_ofv2);
    ADD_ENUM_VALUE("iav2", eCuration_status_iav2);
    ADD_ENUM_VALUE("postin", eCuration_status_postin);
    ADD_ENUM_VALUE("other", eCuration_status_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CCdd_descr_Base::, EReadonly_status, true)
{
    SET_ENUM_INTERNAL_NAME("Cdd-descr", "readonly-status");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("unassigned", eReadonly_status_unassigned);
    ADD_ENUM_VALUE("readonly", eReadonly_status_readonly);
    ADD_ENUM_VALUE("readwrite", eReadonly_status_readwrite);
    ADD_ENUM_VALUE("other", eReadonly_status_other);
}
END_ENUM_INFO

void CCdd_descr_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CCdd_descr_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Scrapbook:
        m_Scrapbook.Destruct();
        break;
    case e_Othername:
    case e_Category:
    case e_Comment:
    case e_Source:
    case e_Title:
        m_string.Destruct();
        break;
    case e_Reference:
    case e_Create_date:
    case e_Tax_source:
    case e_Update_date:
    case e_Source_id:
    case e_Repeats:
    case e_Old_root:
    case e_Book_ref:
    case e_Attribution:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CCdd_descr_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Reference:
        (m_object = new(pool) ncbi::objects::CPub())->AddReference();
        break;
    case e_Create_date:
        (m_object = new(pool) ncbi::objects::CDate())->AddReference();
        break;
    case e_Tax_source:
        (m_object = new(pool) ncbi::objects::COrg_ref())->AddReference();
        break;
    case e_Status:
        m_Status = (EStatus)(0);
        break;
    case e_Update_date:
        (m_object = new(pool) ncbi::objects::CDate())->AddReference();
        break;
    case e_Scrapbook:
        m_Scrapbook.Construct();
        break;
    case e_Source_id:
        (m_object = new(pool) ncbi::objects::CCdd_id_set())->AddReference();
        break;
    case e_Repeats:
        (m_object = new(pool) ncbi::objects::CCdd_repeat())->AddReference();
        break;
    case e_Old_root:
        (m_object = new(pool) ncbi::objects::CCdd_id_set())->AddReference();
        break;
    case e_Curation_status:
        m_Curation_status = (ECuration_status)(0);
        break;
    case e_Readonly_status:
        m_Readonly_status = (EReadonly_status)(0);
        break;
    case e_Book_ref:
        (m_object = new(pool) ncbi::objects::CCdd_book_ref())->AddReference();
        break;
    case e_Attribution:
        (m_object = new(pool) ncbi::objects::CPub())->AddReference();
        break;
    case e_Othername:
    case e_Category:
    case e_Comment:
    case e_Source:
    case e_Title:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CCdd_descr_Base::sm_SelectionNames[] = {
    "not set",
    "othername",
    "category",
    "comment",
    "reference",
    "create-date",
    "tax-source",
    "source",
    "status",
    "update-date",
    "scrapbook",
    "source-id",
    "repeats",
    "old-root",
    "curation-status",
    "readonly-status",
    "book-ref",
    "attribution",
    "title"
};

NCBI_NS_STD::string CCdd_descr_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CCdd_descr_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CCdd_descr_Base::SetOthername(const CCdd_descr_Base::TOthername& value)
{
    Select(e_Othername, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CCdd_descr_Base::SetCategory(const CCdd_descr_Base::TCategory& value)
{
    Select(e_Category, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CCdd_descr_Base::SetComment(const CCdd_descr_Base::TComment& value)
{
    Select(e_Comment, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CCdd_descr_Base::TReference& CCdd_descr_Base::GetReference(void) const
{
    CheckSelected(e_Reference);
    return *static_cast<const TReference*>(m_object);
}

CCdd_descr_Base::TReference& CCdd_descr_Base::SetReference(void)
{
    Select(e_Reference, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReference*>(m_object);
}

void CCdd_descr_Base::SetReference(CCdd_descr_Base::TReference& value)
{
    TReference* ptr = &value;
    if ( m_choice != e_Reference || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reference;
    }
}

const CCdd_descr_Base::TCreate_date& CCdd_descr_Base::GetCreate_date(void) const
{
    CheckSelected(e_Create_date);
    return *static_cast<const TCreate_date*>(m_object);
}

CCdd_descr_Base::TCreate_date& CCdd_descr_Base::SetCreate_date(void)
{
    Select(e_Create_date, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCreate_date*>(m_object);
}

void CCdd_descr_Base::SetCreate_date(CCdd_descr_Base::TCreate_date& value)
{
    TCreate_date* ptr = &value;
    if ( m_choice != e_Create_date || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Create_date;
    }
}

const CCdd_descr_Base::TTax_source& CCdd_descr_Base::GetTax_source(void) const
{
    CheckSelected(e_Tax_source);
    return *static_cast<const TTax_source*>(m_object);
}

CCdd_descr_Base::TTax_source& CCdd_descr_Base::SetTax_source(void)
{
    Select(e_Tax_source, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTax_source*>(m_object);
}

void CCdd_descr_Base::SetTax_source(CCdd_descr_Base::TTax_source& value)
{
    TTax_source* ptr = &value;
    if ( m_choice != e_Tax_source || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Tax_source;
    }
}

void CCdd_descr_Base::SetSource(const CCdd_descr_Base::TSource& value)
{
    Select(e_Source, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CCdd_descr_Base::TUpdate_date& CCdd_descr_Base::GetUpdate_date(void) const
{
    CheckSelected(e_Update_date);
    return *static_cast<const TUpdate_date*>(m_object);
}

CCdd_descr_Base::TUpdate_date& CCdd_descr_Base::SetUpdate_date(void)
{
    Select(e_Update_date, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TUpdate_date*>(m_object);
}

void CCdd_descr_Base::SetUpdate_date(CCdd_descr_Base::TUpdate_date& value)
{
    TUpdate_date* ptr = &value;
    if ( m_choice != e_Update_date || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Update_date;
    }
}

const CCdd_descr_Base::TSource_id& CCdd_descr_Base::GetSource_id(void) const
{
    CheckSelected(e_Source_id);
    return *static_cast<const TSource_id*>(m_object);
}

CCdd_descr_Base::TSource_id& CCdd_descr_Base::SetSource_id(void)
{
    Select(e_Source_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSource_id*>(m_object);
}

void CCdd_descr_Base::SetSource_id(CCdd_descr_Base::TSource_id& value)
{
    TSource_id* ptr = &value;
    if ( m_choice != e_Source_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Source_id;
    }
}

const CCdd_descr_Base::TRepeats& CCdd_descr_Base::GetRepeats(void) const
{
    CheckSelected(e_Repeats);
    return *static_cast<const TRepeats*>(m_object);
}

CCdd_descr_Base::TRepeats& CCdd_descr_Base::SetRepeats(void)
{
    Select(e_Repeats, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRepeats*>(m_object);
}

void CCdd_descr_Base::SetRepeats(CCdd_descr_Base::TRepeats& value)
{
    TRepeats* ptr = &value;
    if ( m_choice != e_Repeats || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Repeats;
    }
}

const CCdd_descr_Base::TOld_root& CCdd_descr_Base::GetOld_root(void) const
{
    CheckSelected(e_Old_root);
    return *static_cast<const TOld_root*>(m_object);
}

CCdd_descr_Base::TOld_root& CCdd_descr_Base::SetOld_root(void)
{
    Select(e_Old_root, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TOld_root*>(m_object);
}

void CCdd_descr_Base::SetOld_root(CCdd_descr_Base::TOld_root& value)
{
    TOld_root* ptr = &value;
    if ( m_choice != e_Old_root || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Old_root;
    }
}

const CCdd_descr_Base::TBook_ref& CCdd_descr_Base::GetBook_ref(void) const
{
    CheckSelected(e_Book_ref);
    return *static_cast<const TBook_ref*>(m_object);
}

CCdd_descr_Base::TBook_ref& CCdd_descr_Base::SetBook_ref(void)
{
    Select(e_Book_ref, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBook_ref*>(m_object);
}

void CCdd_descr_Base::SetBook_ref(CCdd_descr_Base::TBook_ref& value)
{
    TBook_ref* ptr = &value;
    if ( m_choice != e_Book_ref || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Book_ref;
    }
}

const CCdd_descr_Base::TAttribution& CCdd_descr_Base::GetAttribution(void) const
{
    CheckSelected(e_Attribution);
    return *static_cast<const TAttribution*>(m_object);
}

CCdd_descr_Base::TAttribution& CCdd_descr_Base::SetAttribution(void)
{
    Select(e_Attribution, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAttribution*>(m_object);
}

void CCdd_descr_Base::SetAttribution(CCdd_descr_Base::TAttribution& value)
{
    TAttribution* ptr = &value;
    if ( m_choice != e_Attribution || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Attribution;
    }
}

void CCdd_descr_Base::SetTitle(const CCdd_descr_Base::TTitle& value)
{
    Select(e_Title, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Cdd-descr", CCdd_descr)
{
    SET_CHOICE_MODULE("NCBI-Cdd");
    ADD_NAMED_BUF_CHOICE_VARIANT("othername", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("category", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("comment", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("reference", m_object, CPub);
    ADD_NAMED_REF_CHOICE_VARIANT("create-date", m_object, CDate);
    ADD_NAMED_REF_CHOICE_VARIANT("tax-source", m_object, COrg_ref);
    ADD_NAMED_BUF_CHOICE_VARIANT("source", m_string, STD, (string));
    ADD_NAMED_ENUM_CHOICE_VARIANT("status", m_Status, EStatus);
    ADD_NAMED_REF_CHOICE_VARIANT("update-date", m_object, CDate);
    ADD_NAMED_BUF_CHOICE_VARIANT("scrapbook", m_Scrapbook, STL_list, (STD, (string)));
    ADD_NAMED_REF_CHOICE_VARIANT("source-id", m_object, CCdd_id_set);
    ADD_NAMED_REF_CHOICE_VARIANT("repeats", m_object, CCdd_repeat);
    ADD_NAMED_REF_CHOICE_VARIANT("old-root", m_object, CCdd_id_set);
    ADD_NAMED_ENUM_CHOICE_VARIANT("curation-status", m_Curation_status, ECuration_status);
    ADD_NAMED_ENUM_CHOICE_VARIANT("readonly-status", m_Readonly_status, EReadonly_status);
    ADD_NAMED_REF_CHOICE_VARIANT("book-ref", m_object, CCdd_book_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("attribution", m_object, CPub);
    ADD_NAMED_BUF_CHOICE_VARIANT("title", m_string, STD, (string));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CCdd_descr_Base::CCdd_descr_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CCdd_descr_Base::~CCdd_descr_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

