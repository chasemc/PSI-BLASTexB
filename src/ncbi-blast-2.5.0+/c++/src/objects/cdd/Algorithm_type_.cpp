/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'cdd.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/cdd/Algorithm_type.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CAlgorithm_type_Base::, EScoring_Scheme, true)
{
    SET_ENUM_INTERNAL_NAME("Algorithm-type", "scoring-Scheme");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("unassigned", eScoring_Scheme_unassigned);
    ADD_ENUM_VALUE("percent-id", eScoring_Scheme_percent_id);
    ADD_ENUM_VALUE("kimura-corrected", eScoring_Scheme_kimura_corrected);
    ADD_ENUM_VALUE("aligned-score", eScoring_Scheme_aligned_score);
    ADD_ENUM_VALUE("aligned-score-ext", eScoring_Scheme_aligned_score_ext);
    ADD_ENUM_VALUE("aligned-score-filled", eScoring_Scheme_aligned_score_filled);
    ADD_ENUM_VALUE("blast-footprint", eScoring_Scheme_blast_footprint);
    ADD_ENUM_VALUE("blast-full", eScoring_Scheme_blast_full);
    ADD_ENUM_VALUE("hybrid-aligned-score", eScoring_Scheme_hybrid_aligned_score);
    ADD_ENUM_VALUE("other", eScoring_Scheme_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CAlgorithm_type_Base::, EClustering_Method, true)
{
    SET_ENUM_INTERNAL_NAME("Algorithm-type", "clustering-Method");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("unassigned", eClustering_Method_unassigned);
    ADD_ENUM_VALUE("single-linkage", eClustering_Method_single_linkage);
    ADD_ENUM_VALUE("neighbor-joining", eClustering_Method_neighbor_joining);
    ADD_ENUM_VALUE("fast-minimum-evolution", eClustering_Method_fast_minimum_evolution);
    ADD_ENUM_VALUE("other", eClustering_Method_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CAlgorithm_type_Base::, EScore_Matrix, true)
{
    SET_ENUM_INTERNAL_NAME("Algorithm-type", "score-Matrix");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("unassigned", eScore_Matrix_unassigned);
    ADD_ENUM_VALUE("blosum45", eScore_Matrix_blosum45);
    ADD_ENUM_VALUE("blosum62", eScore_Matrix_blosum62);
    ADD_ENUM_VALUE("blosum80", eScore_Matrix_blosum80);
    ADD_ENUM_VALUE("pam30", eScore_Matrix_pam30);
    ADD_ENUM_VALUE("pam70", eScore_Matrix_pam70);
    ADD_ENUM_VALUE("pam250", eScore_Matrix_pam250);
    ADD_ENUM_VALUE("other", eScore_Matrix_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CAlgorithm_type_Base::, ETree_scope, true)
{
    SET_ENUM_INTERNAL_NAME("Algorithm-type", "tree-scope");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("allDescendants", eTree_scope_allDescendants);
    ADD_ENUM_VALUE("immediateChildrenOnly", eTree_scope_immediateChildrenOnly);
    ADD_ENUM_VALUE("selfOnly", eTree_scope_selfOnly);
    ADD_ENUM_VALUE("other", eTree_scope_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CAlgorithm_type_Base::, EColoring_scope, true)
{
    SET_ENUM_INTERNAL_NAME("Algorithm-type", "coloring-scope");
    SET_ENUM_MODULE("NCBI-Cdd");
    ADD_ENUM_VALUE("allDescendants", eColoring_scope_allDescendants);
    ADD_ENUM_VALUE("immediateChildrenOnly", eColoring_scope_immediateChildrenOnly);
    ADD_ENUM_VALUE("other", eColoring_scope_other);
}
END_ENUM_INFO

void CAlgorithm_type_Base::Reset(void)
{
    ResetScoring_Scheme();
    ResetClustering_Method();
    ResetScore_Matrix();
    ResetGapOpen();
    ResetGapExtend();
    ResetGapScaleFactor();
    ResetNTerminalExt();
    ResetCTerminalExt();
    ResetTree_scope();
    ResetColoring_scope();
}

BEGIN_NAMED_BASE_CLASS_INFO("Algorithm-type", CAlgorithm_type)
{
    SET_CLASS_MODULE("NCBI-Cdd");
    ADD_NAMED_ENUM_MEMBER("scoring-Scheme", m_Scoring_Scheme, EScoring_Scheme)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("clustering-Method", m_Clustering_Method, EClustering_Method)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("score-Matrix", m_Score_Matrix, EScore_Matrix)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gapOpen", m_GapOpen)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gapExtend", m_GapExtend)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gapScaleFactor", m_GapScaleFactor)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("nTerminalExt", m_NTerminalExt)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("cTerminalExt", m_CTerminalExt)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("tree-scope", m_Tree_scope, ETree_scope)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("coloring-scope", m_Coloring_scope, EColoring_scope)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAlgorithm_type_Base::CAlgorithm_type_Base(void)
    : m_Scoring_Scheme((EScoring_Scheme)(0)), m_Clustering_Method((EClustering_Method)(0)), m_Score_Matrix((EScore_Matrix)(0)), m_GapOpen(0), m_GapExtend(0), m_GapScaleFactor(0), m_NTerminalExt(0), m_CTerminalExt(0), m_Tree_scope((ETree_scope)(0)), m_Coloring_scope((EColoring_scope)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAlgorithm_type_Base::~CAlgorithm_type_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

