/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seq.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seq/Align_def.hpp>
#include <objects/seqloc/Seq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CAlign_def_Base::, EAlign_type, true)
{
    SET_ENUM_INTERNAL_NAME("Align-def", "align-type");
    SET_ENUM_MODULE("NCBI-Sequence");
    ADD_ENUM_VALUE("ref", eAlign_type_ref);
    ADD_ENUM_VALUE("alt", eAlign_type_alt);
    ADD_ENUM_VALUE("blocks", eAlign_type_blocks);
    ADD_ENUM_VALUE("other", eAlign_type_other);
}
END_ENUM_INFO

void CAlign_def_Base::ResetIds(void)
{
    m_Ids.clear();
    m_set_State[0] &= ~0xc;
}

void CAlign_def_Base::Reset(void)
{
    ResetAlign_type();
    ResetIds();
}

BEGIN_NAMED_BASE_CLASS_INFO("Align-def", CAlign_def)
{
    SET_CLASS_MODULE("NCBI-Sequence");
    ADD_NAMED_ENUM_MEMBER("align-type", m_Align_type, EAlign_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("ids", m_Ids, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAlign_def_Base::CAlign_def_Base(void)
    : m_Align_type((EAlign_type)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAlign_def_Base::~CAlign_def_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

