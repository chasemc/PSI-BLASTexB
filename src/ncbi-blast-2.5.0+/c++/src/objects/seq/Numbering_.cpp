/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seq.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seq/Numbering.hpp>
#include <objects/seq/Num_cont.hpp>
#include <objects/seq/Num_enum.hpp>
#include <objects/seq/Num_real.hpp>
#include <objects/seq/Num_ref.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CNumbering_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CNumbering_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Cont:
    case e_Enum:
    case e_Ref:
    case e_Real:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CNumbering_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Cont:
        (m_object = new(pool) ncbi::objects::CNum_cont())->AddReference();
        break;
    case e_Enum:
        (m_object = new(pool) ncbi::objects::CNum_enum())->AddReference();
        break;
    case e_Ref:
        (m_object = new(pool) ncbi::objects::CNum_ref())->AddReference();
        break;
    case e_Real:
        (m_object = new(pool) ncbi::objects::CNum_real())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CNumbering_Base::sm_SelectionNames[] = {
    "not set",
    "cont",
    "enum",
    "ref",
    "real"
};

NCBI_NS_STD::string CNumbering_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CNumbering_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CNumbering_Base::TCont& CNumbering_Base::GetCont(void) const
{
    CheckSelected(e_Cont);
    return *static_cast<const TCont*>(m_object);
}

CNumbering_Base::TCont& CNumbering_Base::SetCont(void)
{
    Select(e_Cont, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCont*>(m_object);
}

void CNumbering_Base::SetCont(CNumbering_Base::TCont& value)
{
    TCont* ptr = &value;
    if ( m_choice != e_Cont || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Cont;
    }
}

const CNumbering_Base::TEnum& CNumbering_Base::GetEnum(void) const
{
    CheckSelected(e_Enum);
    return *static_cast<const TEnum*>(m_object);
}

CNumbering_Base::TEnum& CNumbering_Base::SetEnum(void)
{
    Select(e_Enum, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TEnum*>(m_object);
}

void CNumbering_Base::SetEnum(CNumbering_Base::TEnum& value)
{
    TEnum* ptr = &value;
    if ( m_choice != e_Enum || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Enum;
    }
}

const CNumbering_Base::TRef& CNumbering_Base::GetRef(void) const
{
    CheckSelected(e_Ref);
    return *static_cast<const TRef*>(m_object);
}

CNumbering_Base::TRef& CNumbering_Base::SetRef(void)
{
    Select(e_Ref, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRef*>(m_object);
}

void CNumbering_Base::SetRef(CNumbering_Base::TRef& value)
{
    TRef* ptr = &value;
    if ( m_choice != e_Ref || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Ref;
    }
}

const CNumbering_Base::TReal& CNumbering_Base::GetReal(void) const
{
    CheckSelected(e_Real);
    return *static_cast<const TReal*>(m_object);
}

CNumbering_Base::TReal& CNumbering_Base::SetReal(void)
{
    Select(e_Real, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReal*>(m_object);
}

void CNumbering_Base::SetReal(CNumbering_Base::TReal& value)
{
    TReal* ptr = &value;
    if ( m_choice != e_Real || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Real;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Numbering", CNumbering)
{
    SET_CHOICE_MODULE("NCBI-Sequence");
    ADD_NAMED_REF_CHOICE_VARIANT("cont", m_object, CNum_cont);
    ADD_NAMED_REF_CHOICE_VARIANT("enum", m_object, CNum_enum);
    ADD_NAMED_REF_CHOICE_VARIANT("ref", m_object, CNum_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("real", m_object, CNum_real);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CNumbering_Base::CNumbering_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CNumbering_Base::~CNumbering_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

