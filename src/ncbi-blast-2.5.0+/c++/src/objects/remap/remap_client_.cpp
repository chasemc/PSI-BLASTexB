/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'remap.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/remap/remap_client.hpp>
#include <objects/remap/Remap_result.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CRemapClient_Base::Ask(const CRemapClient_Base::TRequestChoice& req, CRemapClient_Base::TReply& reply)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetRequest().Assign(req);
    Ask(request, reply);
}


void CRemapClient_Base::Ask(const CRemapClient_Base::TRequestChoice& req, CRemapClient_Base::TReply& reply, CRemapClient_Base::TReplyChoice::E_Choice wanted)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetRequest().Assign(req);
    Ask(request, reply, wanted);
}


void CRemapClient_Base::Ask(const CRemapClient_Base::TRequest& request, CRemapClient_Base::TReply& reply, CRemapClient_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else if (rc.IsError()) {
        CNcbiOstrstream oss;
        oss << "CRemapClient: server error: " << rc.GetError();
        NCBI_THROW(CException, eUnknown, CNcbiOstrstreamToString(oss));
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

CRef<CRemap_result> CRemapClient_Base::AskRemap(const CRemap_query& req, CRemapClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetRemap(const_cast<CRemap_query&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Remap);
    return CRef<CRemap_result>(&x_Choice(*reply).SetRemap());
}

list< string > CRemapClient_Base::AskMaps_to_builds(const string& req, CRemapClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetMaps_to_builds(const_cast<string&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Maps_to_builds);
    return x_Choice(*reply).GetMaps_to_builds();
}

list< string > CRemapClient_Base::AskMaps_from_builds(const string& req, CRemapClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetMaps_from_builds(const_cast<string&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Maps_from_builds);
    return x_Choice(*reply).GetMaps_from_builds();
}

list< string > CRemapClient_Base::AskAll_builds(CRemapClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetAll_builds();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_All_builds);
    return x_Choice(*reply).GetAll_builds();
}

// constructor
CRemapClient_Base::CRemapClient_Base(void)
    : Tparent("REMAP"), m_DefaultRequest(new TRequest)
{
}

// destructor
CRemapClient_Base::~CRemapClient_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

