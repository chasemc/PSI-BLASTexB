/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'gbproj.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/gbproj/ProjectItem.hpp>
#include <objects/gbproj/AbstractProjectItem.hpp>
#include <objects/gbproj/DummyObsoleteType.hpp>
#include <objects/seq/Annotdesc.hpp>
#include <objects/seq/Seq_annot.hpp>
#include <objects/seqalign/Seq_align.hpp>
#include <objects/seqalign/Seq_align_set.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqset/Seq_entry.hpp>
#include <objects/submit/Seq_submit.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CProjectItem_Base::C_Item::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CProjectItem_Base::C_Item::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Pmid:
        m_Pmid.Destruct();
        break;
    case e_Taxid:
        m_Taxid.Destruct();
        break;
    case e_Id:
    case e_Entry:
    case e_Annot:
    case e_Submit:
    case e_Seq_align:
    case e_Seq_align_set:
    case e_Obsolete_plugin:
    case e_Other:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CProjectItem_Base::C_Item::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Id:
        (m_object = new(pool) ncbi::objects::CSeq_id())->AddReference();
        break;
    case e_Entry:
        (m_object = new(pool) ncbi::objects::CSeq_entry())->AddReference();
        break;
    case e_Annot:
        (m_object = new(pool) ncbi::objects::CSeq_annot())->AddReference();
        break;
    case e_Submit:
        (m_object = new(pool) ncbi::objects::CSeq_submit())->AddReference();
        break;
    case e_Seq_align:
        (m_object = new(pool) ncbi::objects::CSeq_align())->AddReference();
        break;
    case e_Seq_align_set:
        (m_object = new(pool) ncbi::objects::CSeq_align_set())->AddReference();
        break;
    case e_Obsolete_plugin:
        (m_object = new(pool) ncbi::objects::CDummyObsoleteType())->AddReference();
        break;
    case e_Other:
        (m_object = new(pool) ncbi::objects::CAbstractProjectItem())->AddReference();
        break;
    case e_Pmid:
        m_Pmid.Construct();
        break;
    case e_Taxid:
        m_Taxid.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CProjectItem_Base::C_Item::sm_SelectionNames[] = {
    "not set",
    "id",
    "entry",
    "annot",
    "submit",
    "seq-align",
    "seq-align-set",
    "obsolete-plugin",
    "other",
    "pmid",
    "taxid"
};

NCBI_NS_STD::string CProjectItem_Base::C_Item::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CProjectItem_Base::C_Item::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CProjectItem_Base::C_Item::TId& CProjectItem_Base::C_Item::GetId(void) const
{
    CheckSelected(e_Id);
    return *static_cast<const TId*>(m_object);
}

CProjectItem_Base::C_Item::TId& CProjectItem_Base::C_Item::SetId(void)
{
    Select(e_Id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TId*>(m_object);
}

void CProjectItem_Base::C_Item::SetId(CProjectItem_Base::C_Item::TId& value)
{
    TId* ptr = &value;
    if ( m_choice != e_Id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Id;
    }
}

const CProjectItem_Base::C_Item::TEntry& CProjectItem_Base::C_Item::GetEntry(void) const
{
    CheckSelected(e_Entry);
    return *static_cast<const TEntry*>(m_object);
}

CProjectItem_Base::C_Item::TEntry& CProjectItem_Base::C_Item::SetEntry(void)
{
    Select(e_Entry, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TEntry*>(m_object);
}

void CProjectItem_Base::C_Item::SetEntry(CProjectItem_Base::C_Item::TEntry& value)
{
    TEntry* ptr = &value;
    if ( m_choice != e_Entry || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Entry;
    }
}

const CProjectItem_Base::C_Item::TAnnot& CProjectItem_Base::C_Item::GetAnnot(void) const
{
    CheckSelected(e_Annot);
    return *static_cast<const TAnnot*>(m_object);
}

CProjectItem_Base::C_Item::TAnnot& CProjectItem_Base::C_Item::SetAnnot(void)
{
    Select(e_Annot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAnnot*>(m_object);
}

void CProjectItem_Base::C_Item::SetAnnot(CProjectItem_Base::C_Item::TAnnot& value)
{
    TAnnot* ptr = &value;
    if ( m_choice != e_Annot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Annot;
    }
}

const CProjectItem_Base::C_Item::TSubmit& CProjectItem_Base::C_Item::GetSubmit(void) const
{
    CheckSelected(e_Submit);
    return *static_cast<const TSubmit*>(m_object);
}

CProjectItem_Base::C_Item::TSubmit& CProjectItem_Base::C_Item::SetSubmit(void)
{
    Select(e_Submit, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSubmit*>(m_object);
}

void CProjectItem_Base::C_Item::SetSubmit(CProjectItem_Base::C_Item::TSubmit& value)
{
    TSubmit* ptr = &value;
    if ( m_choice != e_Submit || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Submit;
    }
}

const CProjectItem_Base::C_Item::TSeq_align& CProjectItem_Base::C_Item::GetSeq_align(void) const
{
    CheckSelected(e_Seq_align);
    return *static_cast<const TSeq_align*>(m_object);
}

CProjectItem_Base::C_Item::TSeq_align& CProjectItem_Base::C_Item::SetSeq_align(void)
{
    Select(e_Seq_align, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_align*>(m_object);
}

void CProjectItem_Base::C_Item::SetSeq_align(CProjectItem_Base::C_Item::TSeq_align& value)
{
    TSeq_align* ptr = &value;
    if ( m_choice != e_Seq_align || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_align;
    }
}

const CProjectItem_Base::C_Item::TSeq_align_set& CProjectItem_Base::C_Item::GetSeq_align_set(void) const
{
    CheckSelected(e_Seq_align_set);
    return *static_cast<const TSeq_align_set*>(m_object);
}

CProjectItem_Base::C_Item::TSeq_align_set& CProjectItem_Base::C_Item::SetSeq_align_set(void)
{
    Select(e_Seq_align_set, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_align_set*>(m_object);
}

void CProjectItem_Base::C_Item::SetSeq_align_set(CProjectItem_Base::C_Item::TSeq_align_set& value)
{
    TSeq_align_set* ptr = &value;
    if ( m_choice != e_Seq_align_set || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_align_set;
    }
}

const CProjectItem_Base::C_Item::TObsolete_plugin& CProjectItem_Base::C_Item::GetObsolete_plugin(void) const
{
    CheckSelected(e_Obsolete_plugin);
    return *static_cast<const TObsolete_plugin*>(m_object);
}

CProjectItem_Base::C_Item::TObsolete_plugin& CProjectItem_Base::C_Item::SetObsolete_plugin(void)
{
    Select(e_Obsolete_plugin, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TObsolete_plugin*>(m_object);
}

void CProjectItem_Base::C_Item::SetObsolete_plugin(CProjectItem_Base::C_Item::TObsolete_plugin& value)
{
    TObsolete_plugin* ptr = &value;
    if ( m_choice != e_Obsolete_plugin || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Obsolete_plugin;
    }
}

const CProjectItem_Base::C_Item::TOther& CProjectItem_Base::C_Item::GetOther(void) const
{
    CheckSelected(e_Other);
    return *static_cast<const TOther*>(m_object);
}

CProjectItem_Base::C_Item::TOther& CProjectItem_Base::C_Item::SetOther(void)
{
    Select(e_Other, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TOther*>(m_object);
}

void CProjectItem_Base::C_Item::SetOther(CProjectItem_Base::C_Item::TOther& value)
{
    TOther* ptr = &value;
    if ( m_choice != e_Other || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Other;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CProjectItem_Base::C_Item)
{
    SET_INTERNAL_NAME("ProjectItem", "item");
    SET_CHOICE_MODULE("NCBI-GBProject");
    ADD_NAMED_REF_CHOICE_VARIANT("id", m_object, CSeq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("entry", m_object, CSeq_entry);
    ADD_NAMED_REF_CHOICE_VARIANT("annot", m_object, CSeq_annot);
    ADD_NAMED_REF_CHOICE_VARIANT("submit", m_object, CSeq_submit);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-align", m_object, CSeq_align);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-align-set", m_object, CSeq_align_set);
    ADD_NAMED_REF_CHOICE_VARIANT("obsolete-plugin", m_object, CDummyObsoleteType);
    ADD_NAMED_REF_CHOICE_VARIANT("other", m_object, CAbstractProjectItem);
    ADD_NAMED_BUF_CHOICE_VARIANT("pmid", m_Pmid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("taxid", m_Taxid, STL_list_set, (STD, (int)));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CProjectItem_Base::C_Item::C_Item(void)
    : m_choice(e_not_set)
{
}

// destructor
CProjectItem_Base::C_Item::~C_Item(void)
{
    Reset();
}


void CProjectItem_Base::ResetLabel(void)
{
    m_Label.erase();
    m_set_State[0] &= ~0xc;
}

void CProjectItem_Base::ResetDescr(void)
{
    m_Descr.clear();
    m_set_State[0] &= ~0x30;
}

void CProjectItem_Base::ResetItem(void)
{
    if ( !m_Item ) {
        m_Item.Reset(new TItem());
        return;
    }
    (*m_Item).Reset();
}

void CProjectItem_Base::SetItem(CProjectItem_Base::TItem& value)
{
    m_Item.Reset(&value);
}

void CProjectItem_Base::ResetData_plugin(void)
{
    m_Data_plugin.erase();
    m_set_State[0] &= ~0x300;
}

void CProjectItem_Base::Reset(void)
{
    ResetId();
    ResetLabel();
    ResetDescr();
    ResetItem();
    ResetData_plugin();
    ResetDisabled();
}

BEGIN_NAMED_BASE_CLASS_INFO("ProjectItem", CProjectItem)
{
    SET_CLASS_MODULE("NCBI-GBProject");
    ADD_NAMED_STD_MEMBER("id", m_Id)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("label", m_Label)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("descr", m_Descr, STL_list_set, (STL_CRef, (CLASS, (CAnnotdesc))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("item", m_Item, C_Item);
    ADD_NAMED_STD_MEMBER("data-plugin", m_Data_plugin)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("disabled", m_Disabled)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CProjectItem_Base::CProjectItem_Base(void)
    : m_Id(0), m_Disabled(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetItem();
    }
}

// destructor
CProjectItem_Base::~CProjectItem_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

