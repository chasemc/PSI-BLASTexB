/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'gbproj.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/gbproj/GBProject_ver2.hpp>
#include <objects/gbproj/DummyObsoleteType.hpp>
#include <objects/gbproj/LoaderDescriptor.hpp>
#include <objects/gbproj/ProjectAnnot.hpp>
#include <objects/gbproj/ProjectDescr.hpp>
#include <objects/gbproj/ProjectFolder.hpp>
#include <objects/gbproj/ProjectHistoryItem.hpp>
#include <objects/gbproj/ViewDescriptor.hpp>
#include <objects/general/User_object.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGBProject_ver2_Base::ResetProject_version(void)
{
    m_Project_version.erase();
    m_set_State[0] &= ~0x3;
}

void CGBProject_ver2_Base::ResetDescr(void)
{
    if ( !m_Descr ) {
        m_Descr.Reset(new TDescr());
        return;
    }
    (*m_Descr).Reset();
}

void CGBProject_ver2_Base::SetDescr(CGBProject_ver2_Base::TDescr& value)
{
    m_Descr.Reset(&value);
}

void CGBProject_ver2_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CGBProject_ver2_Base::SetData(CGBProject_ver2_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CGBProject_ver2_Base::ResetObsolete_orig_message(void)
{
    m_Obsolete_orig_message.Reset();
}

void CGBProject_ver2_Base::SetObsolete_orig_message(CGBProject_ver2_Base::TObsolete_orig_message& value)
{
    m_Obsolete_orig_message.Reset(&value);
}

CGBProject_ver2_Base::TObsolete_orig_message& CGBProject_ver2_Base::SetObsolete_orig_message(void)
{
    if ( !m_Obsolete_orig_message )
        m_Obsolete_orig_message.Reset(new ncbi::objects::CDummyObsoleteType());
    return (*m_Obsolete_orig_message);
}

void CGBProject_ver2_Base::ResetHistory(void)
{
    m_History.clear();
    m_set_State[0] &= ~0xc00;
}

void CGBProject_ver2_Base::ResetData_plugin(void)
{
    m_Data_plugin.erase();
    m_set_State[0] &= ~0x3000;
}

void CGBProject_ver2_Base::ResetPlugin_param(void)
{
    m_Plugin_param.erase();
    m_set_State[0] &= ~0xc000;
}

void CGBProject_ver2_Base::ResetAnnot(void)
{
    m_Annot.clear();
    m_set_State[0] &= ~0x30000;
}

void CGBProject_ver2_Base::ResetLoaders(void)
{
    m_Loaders.clear();
    m_set_State[0] &= ~0xc0000;
}

void CGBProject_ver2_Base::ResetViews(void)
{
    m_Views.clear();
    m_set_State[0] &= ~0x300000;
}

void CGBProject_ver2_Base::ResetView_settings(void)
{
    m_View_settings.clear();
    m_set_State[0] &= ~0xc00000;
}

void CGBProject_ver2_Base::Reset(void)
{
    ResetProject_version();
    ResetCounter();
    ResetDescr();
    ResetData();
    ResetObsolete_orig_message();
    ResetHistory();
    ResetData_plugin();
    ResetPlugin_param();
    ResetAnnot();
    ResetLoaders();
    ResetViews();
    ResetView_settings();
}

BEGIN_NAMED_BASE_CLASS_INFO("GBProject-ver2", CGBProject_ver2)
{
    SET_CLASS_MODULE("NCBI-GBProject");
    ADD_NAMED_STD_MEMBER("project-version", m_Project_version)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("counter", m_Counter)->SetDefault(new TCounter(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("descr", m_Descr, CProjectDescr);
    ADD_NAMED_REF_MEMBER("data", m_Data, CProjectFolder);
    ADD_NAMED_REF_MEMBER("obsolete-orig-message", m_Obsolete_orig_message, CDummyObsoleteType)->SetOptional();
    ADD_NAMED_MEMBER("history", m_History, STL_list_set, (STL_CRef, (CLASS, (CProjectHistoryItem))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("data-plugin", m_Data_plugin)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("plugin-param", m_Plugin_param)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("annot", m_Annot, STL_list_set, (STL_CRef, (CLASS, (CProjectAnnot))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("loaders", m_Loaders, STL_list_set, (STL_CRef, (CLASS, (CLoaderDescriptor))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("views", m_Views, STL_list_set, (STL_CRef, (CLASS, (CViewDescriptor))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("view-settings", m_View_settings, STL_list_set, (STL_CRef, (CLASS, (CUser_object))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CGBProject_ver2_Base::CGBProject_ver2_Base(void)
    : m_Counter(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetDescr();
        ResetData();
    }
}

// destructor
CGBProject_ver2_Base::~CGBProject_ver2_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

