/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'id2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/id2/ID2_Get_Blob_Details.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CID2_Get_Blob_Details_Base::, ESequence_level, false)
{
    SET_ENUM_INTERNAL_NAME("ID2-Get-Blob-Details", "sequence-level");
    SET_ENUM_MODULE("NCBI-ID2Access");
    ADD_ENUM_VALUE("none", eSequence_level_none);
    ADD_ENUM_VALUE("seq-map", eSequence_level_seq_map);
    ADD_ENUM_VALUE("seq-data", eSequence_level_seq_data);
}
END_ENUM_INFO

void CID2_Get_Blob_Details_Base::ResetLocation(void)
{
    m_Location.Reset();
}

void CID2_Get_Blob_Details_Base::SetLocation(CID2_Get_Blob_Details_Base::TLocation& value)
{
    m_Location.Reset(&value);
}

CID2_Get_Blob_Details_Base::TLocation& CID2_Get_Blob_Details_Base::SetLocation(void)
{
    if ( !m_Location )
        m_Location.Reset(new ncbi::objects::CSeq_loc());
    return (*m_Location);
}

void CID2_Get_Blob_Details_Base::Reset(void)
{
    ResetLocation();
    ResetSeq_class_level();
    ResetDescr_level();
    ResetDescr_type_mask();
    ResetAnnot_type_mask();
    ResetFeat_type_mask();
    ResetSequence_level();
}

BEGIN_NAMED_BASE_CLASS_INFO("ID2-Get-Blob-Details", CID2_Get_Blob_Details)
{
    SET_CLASS_MODULE("NCBI-ID2Access");
    ADD_NAMED_REF_MEMBER("location", m_Location, CSeq_loc)->SetOptional();
    ADD_NAMED_STD_MEMBER("seq-class-level", m_Seq_class_level)->SetDefault(new TSeq_class_level(1))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("descr-level", m_Descr_level)->SetDefault(new TDescr_level(1))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("descr-type-mask", m_Descr_type_mask)->SetDefault(new TDescr_type_mask(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("annot-type-mask", m_Annot_type_mask)->SetDefault(new TAnnot_type_mask(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("feat-type-mask", m_Feat_type_mask)->SetDefault(new TFeat_type_mask(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("sequence-level", m_Sequence_level, ESequence_level)->SetDefault(new TSequence_level(eSequence_level_none))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CID2_Get_Blob_Details_Base::CID2_Get_Blob_Details_Base(void)
    : m_Seq_class_level(1), m_Descr_level(1), m_Descr_type_mask(0), m_Annot_type_mask(0), m_Feat_type_mask(0), m_Sequence_level(eSequence_level_none)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CID2_Get_Blob_Details_Base::~CID2_Get_Blob_Details_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

