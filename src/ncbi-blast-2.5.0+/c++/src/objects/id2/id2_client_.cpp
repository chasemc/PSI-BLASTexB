/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'id2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/id2/id2_client.hpp>
#include <objects/id2/ID2S_Reply_Get_Chunk.hpp>
#include <objects/id2/ID2_Reply_Get_Blob.hpp>
#include <objects/id2/ID2_Reply_Get_Blob_Id.hpp>
#include <objects/id2/ID2_Reply_Get_Package.hpp>
#include <objects/id2/ID2_Reply_Get_Seq_id.hpp>
#include <objects/id2/ID2_Reply_ReGet_Blob.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CID2Client_Base::Ask(const CID2Client_Base::TRequestChoice& req, CID2Client_Base::TReply& reply)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetRequest().Assign(req);
    Ask(request, reply);
}


void CID2Client_Base::Ask(const CID2Client_Base::TRequestChoice& req, CID2Client_Base::TReply& reply, CID2Client_Base::TReplyChoice::E_Choice wanted)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetRequest().Assign(req);
    Ask(request, reply, wanted);
}


void CID2Client_Base::x_Connect(void)
{
    Tparent::x_Connect();
    AskInit();
}

void CID2Client_Base::Ask(const CID2Client_Base::TRequest& request, CID2Client_Base::TReply& reply, CID2Client_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

void CID2Client_Base::AskInit(CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetInit();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Init);
}

CRef<CID2_Reply_Get_Package> CID2Client_Base::AskGet_packages(const CID2_Request_Get_Packages& req, CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_packages(const_cast<CID2_Request_Get_Packages&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_package);
    return CRef<CID2_Reply_Get_Package>(&x_Choice(*reply).SetGet_package());
}

CRef<CID2_Reply_Get_Seq_id> CID2Client_Base::AskGet_seq_id(const CID2_Request_Get_Seq_id& req, CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_seq_id(const_cast<CID2_Request_Get_Seq_id&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_seq_id);
    return CRef<CID2_Reply_Get_Seq_id>(&x_Choice(*reply).SetGet_seq_id());
}

CRef<CID2_Reply_Get_Blob_Id> CID2Client_Base::AskGet_blob_id(const CID2_Request_Get_Blob_Id& req, CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_blob_id(const_cast<CID2_Request_Get_Blob_Id&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_blob_id);
    return CRef<CID2_Reply_Get_Blob_Id>(&x_Choice(*reply).SetGet_blob_id());
}

CRef<CID2_Reply_Get_Blob> CID2Client_Base::AskGet_blob_info(const CID2_Request_Get_Blob_Info& req, CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_blob_info(const_cast<CID2_Request_Get_Blob_Info&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_blob);
    return CRef<CID2_Reply_Get_Blob>(&x_Choice(*reply).SetGet_blob());
}

CRef<CID2_Reply_ReGet_Blob> CID2Client_Base::AskReget_blob(const CID2_Request_ReGet_Blob& req, CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetReget_blob(const_cast<CID2_Request_ReGet_Blob&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Reget_blob);
    return CRef<CID2_Reply_ReGet_Blob>(&x_Choice(*reply).SetReget_blob());
}

CRef<CID2S_Reply_Get_Chunk> CID2Client_Base::AskGet_chunks(const CID2S_Request_Get_Chunks& req, CID2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_chunks(const_cast<CID2S_Request_Get_Chunks&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_chunk);
    return CRef<CID2S_Reply_Get_Chunk>(&x_Choice(*reply).SetGet_chunk());
}

// constructor
CID2Client_Base::CID2Client_Base(void)
    : Tparent("ID2"), m_DefaultRequest(new TRequest)
{
}

// destructor
CID2Client_Base::~CID2Client_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

