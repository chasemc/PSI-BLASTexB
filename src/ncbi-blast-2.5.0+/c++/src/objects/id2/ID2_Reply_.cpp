/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'id2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/id2/ID2_Reply.hpp>
#include <objects/id2/ID2S_Reply_Get_Chunk.hpp>
#include <objects/id2/ID2S_Reply_Get_Split_Info.hpp>
#include <objects/id2/ID2_Error.hpp>
#include <objects/id2/ID2_Params.hpp>
#include <objects/id2/ID2_Reply_Get_Blob.hpp>
#include <objects/id2/ID2_Reply_Get_Blob_Id.hpp>
#include <objects/id2/ID2_Reply_Get_Blob_Seq_ids.hpp>
#include <objects/id2/ID2_Reply_Get_Package.hpp>
#include <objects/id2/ID2_Reply_Get_Seq_id.hpp>
#include <objects/id2/ID2_Reply_ReGet_Blob.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CID2_Reply_Base::C_Reply::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CID2_Reply_Base::C_Reply::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Get_package:
    case e_Get_seq_id:
    case e_Get_blob_id:
    case e_Get_blob_seq_ids:
    case e_Get_blob:
    case e_Reget_blob:
    case e_Get_split_info:
    case e_Get_chunk:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CID2_Reply_Base::C_Reply::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Get_package:
        (m_object = new(pool) ncbi::objects::CID2_Reply_Get_Package())->AddReference();
        break;
    case e_Get_seq_id:
        (m_object = new(pool) ncbi::objects::CID2_Reply_Get_Seq_id())->AddReference();
        break;
    case e_Get_blob_id:
        (m_object = new(pool) ncbi::objects::CID2_Reply_Get_Blob_Id())->AddReference();
        break;
    case e_Get_blob_seq_ids:
        (m_object = new(pool) ncbi::objects::CID2_Reply_Get_Blob_Seq_ids())->AddReference();
        break;
    case e_Get_blob:
        (m_object = new(pool) ncbi::objects::CID2_Reply_Get_Blob())->AddReference();
        break;
    case e_Reget_blob:
        (m_object = new(pool) ncbi::objects::CID2_Reply_ReGet_Blob())->AddReference();
        break;
    case e_Get_split_info:
        (m_object = new(pool) ncbi::objects::CID2S_Reply_Get_Split_Info())->AddReference();
        break;
    case e_Get_chunk:
        (m_object = new(pool) ncbi::objects::CID2S_Reply_Get_Chunk())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CID2_Reply_Base::C_Reply::sm_SelectionNames[] = {
    "not set",
    "init",
    "empty",
    "get-package",
    "get-seq-id",
    "get-blob-id",
    "get-blob-seq-ids",
    "get-blob",
    "reget-blob",
    "get-split-info",
    "get-chunk"
};

NCBI_NS_STD::string CID2_Reply_Base::C_Reply::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CID2_Reply_Base::C_Reply::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CID2_Reply_Base::C_Reply::TGet_package& CID2_Reply_Base::C_Reply::GetGet_package(void) const
{
    CheckSelected(e_Get_package);
    return *static_cast<const TGet_package*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_package& CID2_Reply_Base::C_Reply::SetGet_package(void)
{
    Select(e_Get_package, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_package*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_package(CID2_Reply_Base::C_Reply::TGet_package& value)
{
    TGet_package* ptr = &value;
    if ( m_choice != e_Get_package || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_package;
    }
}

const CID2_Reply_Base::C_Reply::TGet_seq_id& CID2_Reply_Base::C_Reply::GetGet_seq_id(void) const
{
    CheckSelected(e_Get_seq_id);
    return *static_cast<const TGet_seq_id*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_seq_id& CID2_Reply_Base::C_Reply::SetGet_seq_id(void)
{
    Select(e_Get_seq_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_seq_id*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_seq_id(CID2_Reply_Base::C_Reply::TGet_seq_id& value)
{
    TGet_seq_id* ptr = &value;
    if ( m_choice != e_Get_seq_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_seq_id;
    }
}

const CID2_Reply_Base::C_Reply::TGet_blob_id& CID2_Reply_Base::C_Reply::GetGet_blob_id(void) const
{
    CheckSelected(e_Get_blob_id);
    return *static_cast<const TGet_blob_id*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_blob_id& CID2_Reply_Base::C_Reply::SetGet_blob_id(void)
{
    Select(e_Get_blob_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_blob_id*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_blob_id(CID2_Reply_Base::C_Reply::TGet_blob_id& value)
{
    TGet_blob_id* ptr = &value;
    if ( m_choice != e_Get_blob_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_blob_id;
    }
}

const CID2_Reply_Base::C_Reply::TGet_blob_seq_ids& CID2_Reply_Base::C_Reply::GetGet_blob_seq_ids(void) const
{
    CheckSelected(e_Get_blob_seq_ids);
    return *static_cast<const TGet_blob_seq_ids*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_blob_seq_ids& CID2_Reply_Base::C_Reply::SetGet_blob_seq_ids(void)
{
    Select(e_Get_blob_seq_ids, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_blob_seq_ids*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_blob_seq_ids(CID2_Reply_Base::C_Reply::TGet_blob_seq_ids& value)
{
    TGet_blob_seq_ids* ptr = &value;
    if ( m_choice != e_Get_blob_seq_ids || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_blob_seq_ids;
    }
}

const CID2_Reply_Base::C_Reply::TGet_blob& CID2_Reply_Base::C_Reply::GetGet_blob(void) const
{
    CheckSelected(e_Get_blob);
    return *static_cast<const TGet_blob*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_blob& CID2_Reply_Base::C_Reply::SetGet_blob(void)
{
    Select(e_Get_blob, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_blob*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_blob(CID2_Reply_Base::C_Reply::TGet_blob& value)
{
    TGet_blob* ptr = &value;
    if ( m_choice != e_Get_blob || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_blob;
    }
}

const CID2_Reply_Base::C_Reply::TReget_blob& CID2_Reply_Base::C_Reply::GetReget_blob(void) const
{
    CheckSelected(e_Reget_blob);
    return *static_cast<const TReget_blob*>(m_object);
}

CID2_Reply_Base::C_Reply::TReget_blob& CID2_Reply_Base::C_Reply::SetReget_blob(void)
{
    Select(e_Reget_blob, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReget_blob*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetReget_blob(CID2_Reply_Base::C_Reply::TReget_blob& value)
{
    TReget_blob* ptr = &value;
    if ( m_choice != e_Reget_blob || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reget_blob;
    }
}

const CID2_Reply_Base::C_Reply::TGet_split_info& CID2_Reply_Base::C_Reply::GetGet_split_info(void) const
{
    CheckSelected(e_Get_split_info);
    return *static_cast<const TGet_split_info*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_split_info& CID2_Reply_Base::C_Reply::SetGet_split_info(void)
{
    Select(e_Get_split_info, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_split_info*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_split_info(CID2_Reply_Base::C_Reply::TGet_split_info& value)
{
    TGet_split_info* ptr = &value;
    if ( m_choice != e_Get_split_info || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_split_info;
    }
}

const CID2_Reply_Base::C_Reply::TGet_chunk& CID2_Reply_Base::C_Reply::GetGet_chunk(void) const
{
    CheckSelected(e_Get_chunk);
    return *static_cast<const TGet_chunk*>(m_object);
}

CID2_Reply_Base::C_Reply::TGet_chunk& CID2_Reply_Base::C_Reply::SetGet_chunk(void)
{
    Select(e_Get_chunk, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_chunk*>(m_object);
}

void CID2_Reply_Base::C_Reply::SetGet_chunk(CID2_Reply_Base::C_Reply::TGet_chunk& value)
{
    TGet_chunk* ptr = &value;
    if ( m_choice != e_Get_chunk || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_chunk;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CID2_Reply_Base::C_Reply)
{
    SET_INTERNAL_NAME("ID2-Reply", "reply");
    SET_CHOICE_MODULE("NCBI-ID2Access");
    ADD_NAMED_NULL_CHOICE_VARIANT("init", null, ());
    ADD_NAMED_NULL_CHOICE_VARIANT("empty", null, ());
    ADD_NAMED_REF_CHOICE_VARIANT("get-package", m_object, CID2_Reply_Get_Package);
    ADD_NAMED_REF_CHOICE_VARIANT("get-seq-id", m_object, CID2_Reply_Get_Seq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("get-blob-id", m_object, CID2_Reply_Get_Blob_Id);
    ADD_NAMED_REF_CHOICE_VARIANT("get-blob-seq-ids", m_object, CID2_Reply_Get_Blob_Seq_ids);
    ADD_NAMED_REF_CHOICE_VARIANT("get-blob", m_object, CID2_Reply_Get_Blob);
    ADD_NAMED_REF_CHOICE_VARIANT("reget-blob", m_object, CID2_Reply_ReGet_Blob);
    ADD_NAMED_REF_CHOICE_VARIANT("get-split-info", m_object, CID2S_Reply_Get_Split_Info);
    ADD_NAMED_REF_CHOICE_VARIANT("get-chunk", m_object, CID2S_Reply_Get_Chunk);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CID2_Reply_Base::C_Reply::C_Reply(void)
    : m_choice(e_not_set)
{
}

// destructor
CID2_Reply_Base::C_Reply::~C_Reply(void)
{
    Reset();
}


BEGIN_NAMED_ENUM_IN_INFO("", CID2_Reply_Base::, EDiscard, false)
{
    SET_ENUM_INTERNAL_NAME("ID2-Reply", "discard");
    SET_ENUM_MODULE("NCBI-ID2Access");
    ADD_ENUM_VALUE("reply", eDiscard_reply);
    ADD_ENUM_VALUE("last-octet-string", eDiscard_last_octet_string);
    ADD_ENUM_VALUE("nothing", eDiscard_nothing);
}
END_ENUM_INFO

void CID2_Reply_Base::ResetParams(void)
{
    m_Params.Reset();
}

void CID2_Reply_Base::SetParams(CID2_Reply_Base::TParams& value)
{
    m_Params.Reset(&value);
}

CID2_Reply_Base::TParams& CID2_Reply_Base::SetParams(void)
{
    if ( !m_Params )
        m_Params.Reset(new ncbi::objects::CID2_Params());
    return (*m_Params);
}

void CID2_Reply_Base::ResetError(void)
{
    m_Error.clear();
    m_set_State[0] &= ~0x30;
}

void CID2_Reply_Base::ResetReply(void)
{
    if ( !m_Reply ) {
        m_Reply.Reset(new TReply());
        return;
    }
    (*m_Reply).Reset();
}

void CID2_Reply_Base::SetReply(CID2_Reply_Base::TReply& value)
{
    m_Reply.Reset(&value);
}

void CID2_Reply_Base::Reset(void)
{
    ResetSerial_number();
    ResetParams();
    ResetError();
    ResetEnd_of_reply();
    ResetReply();
    ResetDiscard();
}

BEGIN_NAMED_BASE_CLASS_INFO("ID2-Reply", CID2_Reply)
{
    SET_CLASS_MODULE("NCBI-ID2Access");
    ADD_NAMED_STD_MEMBER("serial-number", m_Serial_number)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("params", m_Params, CID2_Params)->SetOptional();
    ADD_NAMED_MEMBER("error", m_Error, STL_list, (STL_CRef, (CLASS, (CID2_Error))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_NULL_MEMBER("end-of-reply", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("reply", m_Reply, C_Reply);
    ADD_NAMED_ENUM_MEMBER("discard", m_Discard, EDiscard)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CID2_Reply_Base::CID2_Reply_Base(void)
    : m_Serial_number(0), m_Discard((EDiscard)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetReply();
    }
}

// destructor
CID2_Reply_Base::~CID2_Reply_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

