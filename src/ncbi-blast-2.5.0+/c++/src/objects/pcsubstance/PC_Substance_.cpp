/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pcsubstance.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/pcsubstance/PC_Substance.hpp>
#include <objects/pcsubstance/PC_Compounds.hpp>
#include <objects/pcsubstance/PC_ID.hpp>
#include <objects/pcsubstance/PC_Source.hpp>
#include <objects/pcsubstance/PC_XRefData.hpp>
#include <objects/pub/Pub.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CPC_Substance_Base::ResetSid(void)
{
    if ( !m_Sid ) {
        m_Sid.Reset(new TSid());
        return;
    }
    (*m_Sid).Reset();
}

void CPC_Substance_Base::SetSid(CPC_Substance_Base::TSid& value)
{
    m_Sid.Reset(&value);
}

void CPC_Substance_Base::ResetSource(void)
{
    if ( !m_Source ) {
        m_Source.Reset(new TSource());
        return;
    }
    (*m_Source).Reset();
}

void CPC_Substance_Base::SetSource(CPC_Substance_Base::TSource& value)
{
    m_Source.Reset(&value);
}

void CPC_Substance_Base::ResetPub(void)
{
    m_Pub.clear();
    m_set_State[0] &= ~0x30;
}

void CPC_Substance_Base::ResetSynonyms(void)
{
    m_Synonyms.clear();
    m_set_State[0] &= ~0xc0;
}

void CPC_Substance_Base::ResetComment(void)
{
    m_Comment.clear();
    m_set_State[0] &= ~0x300;
}

void CPC_Substance_Base::ResetXref(void)
{
    m_Xref.clear();
    m_set_State[0] &= ~0xc00;
}

void CPC_Substance_Base::ResetCompound(void)
{
    m_Compound.Reset();
}

void CPC_Substance_Base::SetCompound(CPC_Substance_Base::TCompound& value)
{
    m_Compound.Reset(&value);
}

CPC_Substance_Base::TCompound& CPC_Substance_Base::SetCompound(void)
{
    if ( !m_Compound )
        m_Compound.Reset(new ncbi::objects::CPC_Compounds());
    return (*m_Compound);
}

void CPC_Substance_Base::Reset(void)
{
    ResetSid();
    ResetSource();
    ResetPub();
    ResetSynonyms();
    ResetComment();
    ResetXref();
    ResetCompound();
}

BEGIN_NAMED_BASE_CLASS_INFO("PC-Substance", CPC_Substance)
{
    SET_CLASS_MODULE("NCBI-PCSubstance");
    ADD_NAMED_REF_MEMBER("sid", m_Sid, CPC_ID);
    ADD_NAMED_REF_MEMBER("source", m_Source, CPC_Source);
    ADD_NAMED_MEMBER("pub", m_Pub, STL_list, (STL_CRef, (CLASS, (CPub))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("synonyms", m_Synonyms, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("comment", m_Comment, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("xref", m_Xref, STL_list, (STL_CRef, (CLASS, (CPC_XRefData))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("compound", m_Compound, CPC_Compounds)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPC_Substance_Base::CPC_Substance_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSid();
        ResetSource();
    }
}

// destructor
CPC_Substance_Base::~CPC_Substance_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

