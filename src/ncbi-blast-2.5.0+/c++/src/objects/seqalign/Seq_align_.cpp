/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqalign.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqalign/Seq_align.hpp>
#include <objects/general/Object_id.hpp>
#include <objects/general/User_object.hpp>
#include <objects/seqalign/Dense_diag.hpp>
#include <objects/seqalign/Dense_seg.hpp>
#include <objects/seqalign/Packed_seg.hpp>
#include <objects/seqalign/Score.hpp>
#include <objects/seqalign/Seq_align_set.hpp>
#include <objects/seqalign/Sparse_seg.hpp>
#include <objects/seqalign/Spliced_seg.hpp>
#include <objects/seqalign/Std_seg.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSeq_align_Base::, EType, false)
{
    SET_ENUM_INTERNAL_NAME("Seq-align", "type");
    SET_ENUM_MODULE("NCBI-Seqalign");
    ADD_ENUM_VALUE("not-set", eType_not_set);
    ADD_ENUM_VALUE("global", eType_global);
    ADD_ENUM_VALUE("diags", eType_diags);
    ADD_ENUM_VALUE("partial", eType_partial);
    ADD_ENUM_VALUE("disc", eType_disc);
    ADD_ENUM_VALUE("other", eType_other);
}
END_ENUM_INFO

void CSeq_align_Base::C_Segs::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeq_align_Base::C_Segs::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Dendiag:
        m_Dendiag.Destruct();
        break;
    case e_Std:
        m_Std.Destruct();
        break;
    case e_Denseg:
    case e_Packed:
    case e_Disc:
    case e_Spliced:
    case e_Sparse:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeq_align_Base::C_Segs::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Dendiag:
        m_Dendiag.Construct();
        break;
    case e_Denseg:
        (m_object = new(pool) ncbi::objects::CDense_seg())->AddReference();
        break;
    case e_Std:
        m_Std.Construct();
        break;
    case e_Packed:
        (m_object = new(pool) ncbi::objects::CPacked_seg())->AddReference();
        break;
    case e_Disc:
        (m_object = new(pool) ncbi::objects::CSeq_align_set())->AddReference();
        break;
    case e_Spliced:
        (m_object = new(pool) ncbi::objects::CSpliced_seg())->AddReference();
        break;
    case e_Sparse:
        (m_object = new(pool) ncbi::objects::CSparse_seg())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeq_align_Base::C_Segs::sm_SelectionNames[] = {
    "not set",
    "dendiag",
    "denseg",
    "std",
    "packed",
    "disc",
    "spliced",
    "sparse"
};

NCBI_NS_STD::string CSeq_align_Base::C_Segs::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeq_align_Base::C_Segs::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeq_align_Base::C_Segs::TDenseg& CSeq_align_Base::C_Segs::GetDenseg(void) const
{
    CheckSelected(e_Denseg);
    return *static_cast<const TDenseg*>(m_object);
}

CSeq_align_Base::C_Segs::TDenseg& CSeq_align_Base::C_Segs::SetDenseg(void)
{
    Select(e_Denseg, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TDenseg*>(m_object);
}

void CSeq_align_Base::C_Segs::SetDenseg(CSeq_align_Base::C_Segs::TDenseg& value)
{
    TDenseg* ptr = &value;
    if ( m_choice != e_Denseg || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Denseg;
    }
}

const CSeq_align_Base::C_Segs::TPacked& CSeq_align_Base::C_Segs::GetPacked(void) const
{
    CheckSelected(e_Packed);
    return *static_cast<const TPacked*>(m_object);
}

CSeq_align_Base::C_Segs::TPacked& CSeq_align_Base::C_Segs::SetPacked(void)
{
    Select(e_Packed, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPacked*>(m_object);
}

void CSeq_align_Base::C_Segs::SetPacked(CSeq_align_Base::C_Segs::TPacked& value)
{
    TPacked* ptr = &value;
    if ( m_choice != e_Packed || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Packed;
    }
}

const CSeq_align_Base::C_Segs::TDisc& CSeq_align_Base::C_Segs::GetDisc(void) const
{
    CheckSelected(e_Disc);
    return *static_cast<const TDisc*>(m_object);
}

CSeq_align_Base::C_Segs::TDisc& CSeq_align_Base::C_Segs::SetDisc(void)
{
    Select(e_Disc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TDisc*>(m_object);
}

void CSeq_align_Base::C_Segs::SetDisc(CSeq_align_Base::C_Segs::TDisc& value)
{
    TDisc* ptr = &value;
    if ( m_choice != e_Disc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Disc;
    }
}

const CSeq_align_Base::C_Segs::TSpliced& CSeq_align_Base::C_Segs::GetSpliced(void) const
{
    CheckSelected(e_Spliced);
    return *static_cast<const TSpliced*>(m_object);
}

CSeq_align_Base::C_Segs::TSpliced& CSeq_align_Base::C_Segs::SetSpliced(void)
{
    Select(e_Spliced, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSpliced*>(m_object);
}

void CSeq_align_Base::C_Segs::SetSpliced(CSeq_align_Base::C_Segs::TSpliced& value)
{
    TSpliced* ptr = &value;
    if ( m_choice != e_Spliced || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Spliced;
    }
}

const CSeq_align_Base::C_Segs::TSparse& CSeq_align_Base::C_Segs::GetSparse(void) const
{
    CheckSelected(e_Sparse);
    return *static_cast<const TSparse*>(m_object);
}

CSeq_align_Base::C_Segs::TSparse& CSeq_align_Base::C_Segs::SetSparse(void)
{
    Select(e_Sparse, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSparse*>(m_object);
}

void CSeq_align_Base::C_Segs::SetSparse(CSeq_align_Base::C_Segs::TSparse& value)
{
    TSparse* ptr = &value;
    if ( m_choice != e_Sparse || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Sparse;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CSeq_align_Base::C_Segs)
{
    SET_INTERNAL_NAME("Seq-align", "segs");
    SET_CHOICE_MODULE("NCBI-Seqalign");
    ADD_NAMED_BUF_CHOICE_VARIANT("dendiag", m_Dendiag, STL_list, (STL_CRef, (CLASS, (CDense_diag))));
    ADD_NAMED_REF_CHOICE_VARIANT("denseg", m_object, CDense_seg);
    ADD_NAMED_BUF_CHOICE_VARIANT("std", m_Std, STL_list, (STL_CRef, (CLASS, (CStd_seg))));
    ADD_NAMED_REF_CHOICE_VARIANT("packed", m_object, CPacked_seg);
    ADD_NAMED_REF_CHOICE_VARIANT("disc", m_object, CSeq_align_set);
    ADD_NAMED_REF_CHOICE_VARIANT("spliced", m_object, CSpliced_seg);
    ADD_NAMED_REF_CHOICE_VARIANT("sparse", m_object, CSparse_seg);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeq_align_Base::C_Segs::C_Segs(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeq_align_Base::C_Segs::~C_Segs(void)
{
    Reset();
}


void CSeq_align_Base::ResetScore(void)
{
    m_Score.clear();
    m_set_State[0] &= ~0x30;
}

void CSeq_align_Base::ResetSegs(void)
{
    if ( !m_Segs ) {
        m_Segs.Reset(new TSegs());
        return;
    }
    (*m_Segs).Reset();
}

void CSeq_align_Base::SetSegs(CSeq_align_Base::TSegs& value)
{
    m_Segs.Reset(&value);
}

void CSeq_align_Base::ResetBounds(void)
{
    m_Bounds.clear();
    m_set_State[0] &= ~0x300;
}

void CSeq_align_Base::ResetId(void)
{
    m_Id.clear();
    m_set_State[0] &= ~0xc00;
}

void CSeq_align_Base::ResetExt(void)
{
    m_Ext.clear();
    m_set_State[0] &= ~0x3000;
}

void CSeq_align_Base::Reset(void)
{
    ResetType();
    ResetDim();
    ResetScore();
    ResetSegs();
    ResetBounds();
    ResetId();
    ResetExt();
}

BEGIN_NAMED_BASE_CLASS_INFO("Seq-align", CSeq_align)
{
    SET_CLASS_MODULE("NCBI-Seqalign");
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("dim", m_Dim)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("score", m_Score, STL_vector_set, (STL_CRef, (CLASS, (CScore))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("segs", m_Segs, C_Segs);
    ADD_NAMED_MEMBER("bounds", m_Bounds, STL_list_set, (STL_CRef, (CLASS, (CSeq_loc))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("id", m_Id, STL_list, (STL_CRef, (CLASS, (CObject_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("ext", m_Ext, STL_list, (STL_CRef, (CLASS, (CUser_object))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeq_align_Base::CSeq_align_Base(void)
    : m_Type((EType)(0)), m_Dim(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSegs();
    }
}

// destructor
CSeq_align_Base::~CSeq_align_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

