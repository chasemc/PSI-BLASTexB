/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqedit.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqedit/SeqEdit_Cmd.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AddAnnot.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AddDesc.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AddDescr.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AddId.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AttachAnnot.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AttachSeq.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AttachSeqEntry.hpp>
#include <objects/seqedit/SeqEdit_Cmd_AttachSet.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ChangeSeqAttr.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ChangeSetAttr.hpp>
#include <objects/seqedit/SeqEdit_Cmd_RemoveAnnot.hpp>
#include <objects/seqedit/SeqEdit_Cmd_RemoveDesc.hpp>
#include <objects/seqedit/SeqEdit_Cmd_RemoveId.hpp>
#include <objects/seqedit/SeqEdit_Cmd_RemoveSeqEntry.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ReplaceAnnot.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ResetDescr.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ResetIds.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ResetSeqAttr.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ResetSeqEntry.hpp>
#include <objects/seqedit/SeqEdit_Cmd_ResetSetAttr.hpp>
#include <objects/seqedit/SeqEdit_Cmd_SetDescr.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeqEdit_Cmd_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqEdit_Cmd_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Add_id:
    case e_Remove_id:
    case e_Reset_ids:
    case e_Change_seqattr:
    case e_Reset_seqattr:
    case e_Change_setattr:
    case e_Reset_setattr:
    case e_Add_descr:
    case e_Set_descr:
    case e_Reset_descr:
    case e_Add_desc:
    case e_Remove_desc:
    case e_Attach_seq:
    case e_Attach_set:
    case e_Reset_seqentry:
    case e_Attach_seqentry:
    case e_Remove_seqentry:
    case e_Attach_annot:
    case e_Remove_annot:
    case e_Add_annot:
    case e_Replace_annot:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqEdit_Cmd_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Add_id:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AddId())->AddReference();
        break;
    case e_Remove_id:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_RemoveId())->AddReference();
        break;
    case e_Reset_ids:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ResetIds())->AddReference();
        break;
    case e_Change_seqattr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ChangeSeqAttr())->AddReference();
        break;
    case e_Reset_seqattr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ResetSeqAttr())->AddReference();
        break;
    case e_Change_setattr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ChangeSetAttr())->AddReference();
        break;
    case e_Reset_setattr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ResetSetAttr())->AddReference();
        break;
    case e_Add_descr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AddDescr())->AddReference();
        break;
    case e_Set_descr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_SetDescr())->AddReference();
        break;
    case e_Reset_descr:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ResetDescr())->AddReference();
        break;
    case e_Add_desc:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AddDesc())->AddReference();
        break;
    case e_Remove_desc:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_RemoveDesc())->AddReference();
        break;
    case e_Attach_seq:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AttachSeq())->AddReference();
        break;
    case e_Attach_set:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AttachSet())->AddReference();
        break;
    case e_Reset_seqentry:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ResetSeqEntry())->AddReference();
        break;
    case e_Attach_seqentry:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AttachSeqEntry())->AddReference();
        break;
    case e_Remove_seqentry:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_RemoveSeqEntry())->AddReference();
        break;
    case e_Attach_annot:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AttachAnnot())->AddReference();
        break;
    case e_Remove_annot:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_RemoveAnnot())->AddReference();
        break;
    case e_Add_annot:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_AddAnnot())->AddReference();
        break;
    case e_Replace_annot:
        (m_object = new(pool) ncbi::objects::CSeqEdit_Cmd_ReplaceAnnot())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqEdit_Cmd_Base::sm_SelectionNames[] = {
    "not set",
    "add-id",
    "remove-id",
    "reset-ids",
    "change-seqattr",
    "reset-seqattr",
    "change-setattr",
    "reset-setattr",
    "add-descr",
    "set-descr",
    "reset-descr",
    "add-desc",
    "remove-desc",
    "attach-seq",
    "attach-set",
    "reset-seqentry",
    "attach-seqentry",
    "remove-seqentry",
    "attach-annot",
    "remove-annot",
    "add-annot",
    "replace-annot"
};

NCBI_NS_STD::string CSeqEdit_Cmd_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqEdit_Cmd_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeqEdit_Cmd_Base::TAdd_id& CSeqEdit_Cmd_Base::GetAdd_id(void) const
{
    CheckSelected(e_Add_id);
    return *static_cast<const TAdd_id*>(m_object);
}

CSeqEdit_Cmd_Base::TAdd_id& CSeqEdit_Cmd_Base::SetAdd_id(void)
{
    Select(e_Add_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAdd_id*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAdd_id(CSeqEdit_Cmd_Base::TAdd_id& value)
{
    TAdd_id* ptr = &value;
    if ( m_choice != e_Add_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Add_id;
    }
}

const CSeqEdit_Cmd_Base::TRemove_id& CSeqEdit_Cmd_Base::GetRemove_id(void) const
{
    CheckSelected(e_Remove_id);
    return *static_cast<const TRemove_id*>(m_object);
}

CSeqEdit_Cmd_Base::TRemove_id& CSeqEdit_Cmd_Base::SetRemove_id(void)
{
    Select(e_Remove_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRemove_id*>(m_object);
}

void CSeqEdit_Cmd_Base::SetRemove_id(CSeqEdit_Cmd_Base::TRemove_id& value)
{
    TRemove_id* ptr = &value;
    if ( m_choice != e_Remove_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Remove_id;
    }
}

const CSeqEdit_Cmd_Base::TReset_ids& CSeqEdit_Cmd_Base::GetReset_ids(void) const
{
    CheckSelected(e_Reset_ids);
    return *static_cast<const TReset_ids*>(m_object);
}

CSeqEdit_Cmd_Base::TReset_ids& CSeqEdit_Cmd_Base::SetReset_ids(void)
{
    Select(e_Reset_ids, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReset_ids*>(m_object);
}

void CSeqEdit_Cmd_Base::SetReset_ids(CSeqEdit_Cmd_Base::TReset_ids& value)
{
    TReset_ids* ptr = &value;
    if ( m_choice != e_Reset_ids || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reset_ids;
    }
}

const CSeqEdit_Cmd_Base::TChange_seqattr& CSeqEdit_Cmd_Base::GetChange_seqattr(void) const
{
    CheckSelected(e_Change_seqattr);
    return *static_cast<const TChange_seqattr*>(m_object);
}

CSeqEdit_Cmd_Base::TChange_seqattr& CSeqEdit_Cmd_Base::SetChange_seqattr(void)
{
    Select(e_Change_seqattr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TChange_seqattr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetChange_seqattr(CSeqEdit_Cmd_Base::TChange_seqattr& value)
{
    TChange_seqattr* ptr = &value;
    if ( m_choice != e_Change_seqattr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Change_seqattr;
    }
}

const CSeqEdit_Cmd_Base::TReset_seqattr& CSeqEdit_Cmd_Base::GetReset_seqattr(void) const
{
    CheckSelected(e_Reset_seqattr);
    return *static_cast<const TReset_seqattr*>(m_object);
}

CSeqEdit_Cmd_Base::TReset_seqattr& CSeqEdit_Cmd_Base::SetReset_seqattr(void)
{
    Select(e_Reset_seqattr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReset_seqattr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetReset_seqattr(CSeqEdit_Cmd_Base::TReset_seqattr& value)
{
    TReset_seqattr* ptr = &value;
    if ( m_choice != e_Reset_seqattr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reset_seqattr;
    }
}

const CSeqEdit_Cmd_Base::TChange_setattr& CSeqEdit_Cmd_Base::GetChange_setattr(void) const
{
    CheckSelected(e_Change_setattr);
    return *static_cast<const TChange_setattr*>(m_object);
}

CSeqEdit_Cmd_Base::TChange_setattr& CSeqEdit_Cmd_Base::SetChange_setattr(void)
{
    Select(e_Change_setattr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TChange_setattr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetChange_setattr(CSeqEdit_Cmd_Base::TChange_setattr& value)
{
    TChange_setattr* ptr = &value;
    if ( m_choice != e_Change_setattr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Change_setattr;
    }
}

const CSeqEdit_Cmd_Base::TReset_setattr& CSeqEdit_Cmd_Base::GetReset_setattr(void) const
{
    CheckSelected(e_Reset_setattr);
    return *static_cast<const TReset_setattr*>(m_object);
}

CSeqEdit_Cmd_Base::TReset_setattr& CSeqEdit_Cmd_Base::SetReset_setattr(void)
{
    Select(e_Reset_setattr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReset_setattr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetReset_setattr(CSeqEdit_Cmd_Base::TReset_setattr& value)
{
    TReset_setattr* ptr = &value;
    if ( m_choice != e_Reset_setattr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reset_setattr;
    }
}

const CSeqEdit_Cmd_Base::TAdd_descr& CSeqEdit_Cmd_Base::GetAdd_descr(void) const
{
    CheckSelected(e_Add_descr);
    return *static_cast<const TAdd_descr*>(m_object);
}

CSeqEdit_Cmd_Base::TAdd_descr& CSeqEdit_Cmd_Base::SetAdd_descr(void)
{
    Select(e_Add_descr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAdd_descr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAdd_descr(CSeqEdit_Cmd_Base::TAdd_descr& value)
{
    TAdd_descr* ptr = &value;
    if ( m_choice != e_Add_descr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Add_descr;
    }
}

const CSeqEdit_Cmd_Base::TSet_descr& CSeqEdit_Cmd_Base::GetSet_descr(void) const
{
    CheckSelected(e_Set_descr);
    return *static_cast<const TSet_descr*>(m_object);
}

CSeqEdit_Cmd_Base::TSet_descr& CSeqEdit_Cmd_Base::SetSet_descr(void)
{
    Select(e_Set_descr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSet_descr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetSet_descr(CSeqEdit_Cmd_Base::TSet_descr& value)
{
    TSet_descr* ptr = &value;
    if ( m_choice != e_Set_descr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Set_descr;
    }
}

const CSeqEdit_Cmd_Base::TReset_descr& CSeqEdit_Cmd_Base::GetReset_descr(void) const
{
    CheckSelected(e_Reset_descr);
    return *static_cast<const TReset_descr*>(m_object);
}

CSeqEdit_Cmd_Base::TReset_descr& CSeqEdit_Cmd_Base::SetReset_descr(void)
{
    Select(e_Reset_descr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReset_descr*>(m_object);
}

void CSeqEdit_Cmd_Base::SetReset_descr(CSeqEdit_Cmd_Base::TReset_descr& value)
{
    TReset_descr* ptr = &value;
    if ( m_choice != e_Reset_descr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reset_descr;
    }
}

const CSeqEdit_Cmd_Base::TAdd_desc& CSeqEdit_Cmd_Base::GetAdd_desc(void) const
{
    CheckSelected(e_Add_desc);
    return *static_cast<const TAdd_desc*>(m_object);
}

CSeqEdit_Cmd_Base::TAdd_desc& CSeqEdit_Cmd_Base::SetAdd_desc(void)
{
    Select(e_Add_desc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAdd_desc*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAdd_desc(CSeqEdit_Cmd_Base::TAdd_desc& value)
{
    TAdd_desc* ptr = &value;
    if ( m_choice != e_Add_desc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Add_desc;
    }
}

const CSeqEdit_Cmd_Base::TRemove_desc& CSeqEdit_Cmd_Base::GetRemove_desc(void) const
{
    CheckSelected(e_Remove_desc);
    return *static_cast<const TRemove_desc*>(m_object);
}

CSeqEdit_Cmd_Base::TRemove_desc& CSeqEdit_Cmd_Base::SetRemove_desc(void)
{
    Select(e_Remove_desc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRemove_desc*>(m_object);
}

void CSeqEdit_Cmd_Base::SetRemove_desc(CSeqEdit_Cmd_Base::TRemove_desc& value)
{
    TRemove_desc* ptr = &value;
    if ( m_choice != e_Remove_desc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Remove_desc;
    }
}

const CSeqEdit_Cmd_Base::TAttach_seq& CSeqEdit_Cmd_Base::GetAttach_seq(void) const
{
    CheckSelected(e_Attach_seq);
    return *static_cast<const TAttach_seq*>(m_object);
}

CSeqEdit_Cmd_Base::TAttach_seq& CSeqEdit_Cmd_Base::SetAttach_seq(void)
{
    Select(e_Attach_seq, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAttach_seq*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAttach_seq(CSeqEdit_Cmd_Base::TAttach_seq& value)
{
    TAttach_seq* ptr = &value;
    if ( m_choice != e_Attach_seq || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Attach_seq;
    }
}

const CSeqEdit_Cmd_Base::TAttach_set& CSeqEdit_Cmd_Base::GetAttach_set(void) const
{
    CheckSelected(e_Attach_set);
    return *static_cast<const TAttach_set*>(m_object);
}

CSeqEdit_Cmd_Base::TAttach_set& CSeqEdit_Cmd_Base::SetAttach_set(void)
{
    Select(e_Attach_set, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAttach_set*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAttach_set(CSeqEdit_Cmd_Base::TAttach_set& value)
{
    TAttach_set* ptr = &value;
    if ( m_choice != e_Attach_set || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Attach_set;
    }
}

const CSeqEdit_Cmd_Base::TReset_seqentry& CSeqEdit_Cmd_Base::GetReset_seqentry(void) const
{
    CheckSelected(e_Reset_seqentry);
    return *static_cast<const TReset_seqentry*>(m_object);
}

CSeqEdit_Cmd_Base::TReset_seqentry& CSeqEdit_Cmd_Base::SetReset_seqentry(void)
{
    Select(e_Reset_seqentry, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReset_seqentry*>(m_object);
}

void CSeqEdit_Cmd_Base::SetReset_seqentry(CSeqEdit_Cmd_Base::TReset_seqentry& value)
{
    TReset_seqentry* ptr = &value;
    if ( m_choice != e_Reset_seqentry || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reset_seqentry;
    }
}

const CSeqEdit_Cmd_Base::TAttach_seqentry& CSeqEdit_Cmd_Base::GetAttach_seqentry(void) const
{
    CheckSelected(e_Attach_seqentry);
    return *static_cast<const TAttach_seqentry*>(m_object);
}

CSeqEdit_Cmd_Base::TAttach_seqentry& CSeqEdit_Cmd_Base::SetAttach_seqentry(void)
{
    Select(e_Attach_seqentry, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAttach_seqentry*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAttach_seqentry(CSeqEdit_Cmd_Base::TAttach_seqentry& value)
{
    TAttach_seqentry* ptr = &value;
    if ( m_choice != e_Attach_seqentry || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Attach_seqentry;
    }
}

const CSeqEdit_Cmd_Base::TRemove_seqentry& CSeqEdit_Cmd_Base::GetRemove_seqentry(void) const
{
    CheckSelected(e_Remove_seqentry);
    return *static_cast<const TRemove_seqentry*>(m_object);
}

CSeqEdit_Cmd_Base::TRemove_seqentry& CSeqEdit_Cmd_Base::SetRemove_seqentry(void)
{
    Select(e_Remove_seqentry, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRemove_seqentry*>(m_object);
}

void CSeqEdit_Cmd_Base::SetRemove_seqentry(CSeqEdit_Cmd_Base::TRemove_seqentry& value)
{
    TRemove_seqentry* ptr = &value;
    if ( m_choice != e_Remove_seqentry || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Remove_seqentry;
    }
}

const CSeqEdit_Cmd_Base::TAttach_annot& CSeqEdit_Cmd_Base::GetAttach_annot(void) const
{
    CheckSelected(e_Attach_annot);
    return *static_cast<const TAttach_annot*>(m_object);
}

CSeqEdit_Cmd_Base::TAttach_annot& CSeqEdit_Cmd_Base::SetAttach_annot(void)
{
    Select(e_Attach_annot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAttach_annot*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAttach_annot(CSeqEdit_Cmd_Base::TAttach_annot& value)
{
    TAttach_annot* ptr = &value;
    if ( m_choice != e_Attach_annot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Attach_annot;
    }
}

const CSeqEdit_Cmd_Base::TRemove_annot& CSeqEdit_Cmd_Base::GetRemove_annot(void) const
{
    CheckSelected(e_Remove_annot);
    return *static_cast<const TRemove_annot*>(m_object);
}

CSeqEdit_Cmd_Base::TRemove_annot& CSeqEdit_Cmd_Base::SetRemove_annot(void)
{
    Select(e_Remove_annot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRemove_annot*>(m_object);
}

void CSeqEdit_Cmd_Base::SetRemove_annot(CSeqEdit_Cmd_Base::TRemove_annot& value)
{
    TRemove_annot* ptr = &value;
    if ( m_choice != e_Remove_annot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Remove_annot;
    }
}

const CSeqEdit_Cmd_Base::TAdd_annot& CSeqEdit_Cmd_Base::GetAdd_annot(void) const
{
    CheckSelected(e_Add_annot);
    return *static_cast<const TAdd_annot*>(m_object);
}

CSeqEdit_Cmd_Base::TAdd_annot& CSeqEdit_Cmd_Base::SetAdd_annot(void)
{
    Select(e_Add_annot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAdd_annot*>(m_object);
}

void CSeqEdit_Cmd_Base::SetAdd_annot(CSeqEdit_Cmd_Base::TAdd_annot& value)
{
    TAdd_annot* ptr = &value;
    if ( m_choice != e_Add_annot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Add_annot;
    }
}

const CSeqEdit_Cmd_Base::TReplace_annot& CSeqEdit_Cmd_Base::GetReplace_annot(void) const
{
    CheckSelected(e_Replace_annot);
    return *static_cast<const TReplace_annot*>(m_object);
}

CSeqEdit_Cmd_Base::TReplace_annot& CSeqEdit_Cmd_Base::SetReplace_annot(void)
{
    Select(e_Replace_annot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReplace_annot*>(m_object);
}

void CSeqEdit_Cmd_Base::SetReplace_annot(CSeqEdit_Cmd_Base::TReplace_annot& value)
{
    TReplace_annot* ptr = &value;
    if ( m_choice != e_Replace_annot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Replace_annot;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("SeqEdit-Cmd", CSeqEdit_Cmd)
{
    SET_CHOICE_MODULE("NCBI-SeqEdit");
    ADD_NAMED_REF_CHOICE_VARIANT("add-id", m_object, CSeqEdit_Cmd_AddId);
    ADD_NAMED_REF_CHOICE_VARIANT("remove-id", m_object, CSeqEdit_Cmd_RemoveId);
    ADD_NAMED_REF_CHOICE_VARIANT("reset-ids", m_object, CSeqEdit_Cmd_ResetIds);
    ADD_NAMED_REF_CHOICE_VARIANT("change-seqattr", m_object, CSeqEdit_Cmd_ChangeSeqAttr);
    ADD_NAMED_REF_CHOICE_VARIANT("reset-seqattr", m_object, CSeqEdit_Cmd_ResetSeqAttr);
    ADD_NAMED_REF_CHOICE_VARIANT("change-setattr", m_object, CSeqEdit_Cmd_ChangeSetAttr);
    ADD_NAMED_REF_CHOICE_VARIANT("reset-setattr", m_object, CSeqEdit_Cmd_ResetSetAttr);
    ADD_NAMED_REF_CHOICE_VARIANT("add-descr", m_object, CSeqEdit_Cmd_AddDescr);
    ADD_NAMED_REF_CHOICE_VARIANT("set-descr", m_object, CSeqEdit_Cmd_SetDescr);
    ADD_NAMED_REF_CHOICE_VARIANT("reset-descr", m_object, CSeqEdit_Cmd_ResetDescr);
    ADD_NAMED_REF_CHOICE_VARIANT("add-desc", m_object, CSeqEdit_Cmd_AddDesc);
    ADD_NAMED_REF_CHOICE_VARIANT("remove-desc", m_object, CSeqEdit_Cmd_RemoveDesc);
    ADD_NAMED_REF_CHOICE_VARIANT("attach-seq", m_object, CSeqEdit_Cmd_AttachSeq);
    ADD_NAMED_REF_CHOICE_VARIANT("attach-set", m_object, CSeqEdit_Cmd_AttachSet);
    ADD_NAMED_REF_CHOICE_VARIANT("reset-seqentry", m_object, CSeqEdit_Cmd_ResetSeqEntry);
    ADD_NAMED_REF_CHOICE_VARIANT("attach-seqentry", m_object, CSeqEdit_Cmd_AttachSeqEntry);
    ADD_NAMED_REF_CHOICE_VARIANT("remove-seqentry", m_object, CSeqEdit_Cmd_RemoveSeqEntry);
    ADD_NAMED_REF_CHOICE_VARIANT("attach-annot", m_object, CSeqEdit_Cmd_AttachAnnot);
    ADD_NAMED_REF_CHOICE_VARIANT("remove-annot", m_object, CSeqEdit_Cmd_RemoveAnnot);
    ADD_NAMED_REF_CHOICE_VARIANT("add-annot", m_object, CSeqEdit_Cmd_AddAnnot);
    ADD_NAMED_REF_CHOICE_VARIANT("replace-annot", m_object, CSeqEdit_Cmd_ReplaceAnnot);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqEdit_Cmd_Base::CSeqEdit_Cmd_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqEdit_Cmd_Base::~CSeqEdit_Cmd_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

