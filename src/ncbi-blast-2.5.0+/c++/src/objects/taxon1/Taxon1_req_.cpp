/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'taxon1.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/taxon1/Taxon1_req.hpp>
#include <objects/seqfeat/Org_ref.hpp>
#include <objects/taxon1/Taxon1_info.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CTaxon1_req_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CTaxon1_req_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Findname:
    case e_Getdesignator:
    case e_Getunique:
        m_string.Destruct();
        break;
    case e_Getidbyorg:
    case e_Lookup:
    case e_Getorgmod:
    case e_Getorgprop:
    case e_Searchname:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CTaxon1_req_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Getidbyorg:
        (m_object = new(pool) ncbi::objects::COrg_ref())->AddReference();
        break;
    case e_Getorgnames:
        m_Getorgnames = 0;
        break;
    case e_Getlineage:
        m_Getlineage = 0;
        break;
    case e_Getchildren:
        m_Getchildren = 0;
        break;
    case e_Getbyid:
        m_Getbyid = 0;
        break;
    case e_Lookup:
        (m_object = new(pool) ncbi::objects::COrg_ref())->AddReference();
        break;
    case e_Getorgmod:
        (m_object = new(pool) ncbi::objects::CTaxon1_info())->AddReference();
        break;
    case e_Id4gi:
        m_Id4gi = 0;
        break;
    case e_Taxachildren:
        m_Taxachildren = 0;
        break;
    case e_Taxalineage:
        m_Taxalineage = 0;
        break;
    case e_Getorgprop:
        (m_object = new(pool) ncbi::objects::CTaxon1_info())->AddReference();
        break;
    case e_Searchname:
        (m_object = new(pool) ncbi::objects::CTaxon1_info())->AddReference();
        break;
    case e_Dumpnames4class:
        m_Dumpnames4class = 0;
        break;
    case e_Findname:
    case e_Getdesignator:
    case e_Getunique:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CTaxon1_req_Base::sm_SelectionNames[] = {
    "not set",
    "init",
    "findname",
    "getdesignator",
    "getunique",
    "getidbyorg",
    "getorgnames",
    "getcde",
    "getranks",
    "getdivs",
    "getgcs",
    "getlineage",
    "getchildren",
    "getbyid",
    "lookup",
    "getorgmod",
    "fini",
    "id4gi",
    "taxachildren",
    "taxalineage",
    "maxtaxid",
    "getproptypes",
    "getorgprop",
    "searchname",
    "dumpnames4class"
};

NCBI_NS_STD::string CTaxon1_req_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CTaxon1_req_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CTaxon1_req_Base::SetFindname(const CTaxon1_req_Base::TFindname& value)
{
    Select(e_Findname, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CTaxon1_req_Base::SetGetdesignator(const CTaxon1_req_Base::TGetdesignator& value)
{
    Select(e_Getdesignator, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CTaxon1_req_Base::SetGetunique(const CTaxon1_req_Base::TGetunique& value)
{
    Select(e_Getunique, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CTaxon1_req_Base::TGetidbyorg& CTaxon1_req_Base::GetGetidbyorg(void) const
{
    CheckSelected(e_Getidbyorg);
    return *static_cast<const TGetidbyorg*>(m_object);
}

CTaxon1_req_Base::TGetidbyorg& CTaxon1_req_Base::SetGetidbyorg(void)
{
    Select(e_Getidbyorg, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetidbyorg*>(m_object);
}

void CTaxon1_req_Base::SetGetidbyorg(CTaxon1_req_Base::TGetidbyorg& value)
{
    TGetidbyorg* ptr = &value;
    if ( m_choice != e_Getidbyorg || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getidbyorg;
    }
}

const CTaxon1_req_Base::TLookup& CTaxon1_req_Base::GetLookup(void) const
{
    CheckSelected(e_Lookup);
    return *static_cast<const TLookup*>(m_object);
}

CTaxon1_req_Base::TLookup& CTaxon1_req_Base::SetLookup(void)
{
    Select(e_Lookup, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TLookup*>(m_object);
}

void CTaxon1_req_Base::SetLookup(CTaxon1_req_Base::TLookup& value)
{
    TLookup* ptr = &value;
    if ( m_choice != e_Lookup || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Lookup;
    }
}

const CTaxon1_req_Base::TGetorgmod& CTaxon1_req_Base::GetGetorgmod(void) const
{
    CheckSelected(e_Getorgmod);
    return *static_cast<const TGetorgmod*>(m_object);
}

CTaxon1_req_Base::TGetorgmod& CTaxon1_req_Base::SetGetorgmod(void)
{
    Select(e_Getorgmod, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetorgmod*>(m_object);
}

void CTaxon1_req_Base::SetGetorgmod(CTaxon1_req_Base::TGetorgmod& value)
{
    TGetorgmod* ptr = &value;
    if ( m_choice != e_Getorgmod || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getorgmod;
    }
}

const CTaxon1_req_Base::TGetorgprop& CTaxon1_req_Base::GetGetorgprop(void) const
{
    CheckSelected(e_Getorgprop);
    return *static_cast<const TGetorgprop*>(m_object);
}

CTaxon1_req_Base::TGetorgprop& CTaxon1_req_Base::SetGetorgprop(void)
{
    Select(e_Getorgprop, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetorgprop*>(m_object);
}

void CTaxon1_req_Base::SetGetorgprop(CTaxon1_req_Base::TGetorgprop& value)
{
    TGetorgprop* ptr = &value;
    if ( m_choice != e_Getorgprop || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getorgprop;
    }
}

const CTaxon1_req_Base::TSearchname& CTaxon1_req_Base::GetSearchname(void) const
{
    CheckSelected(e_Searchname);
    return *static_cast<const TSearchname*>(m_object);
}

CTaxon1_req_Base::TSearchname& CTaxon1_req_Base::SetSearchname(void)
{
    Select(e_Searchname, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSearchname*>(m_object);
}

void CTaxon1_req_Base::SetSearchname(CTaxon1_req_Base::TSearchname& value)
{
    TSearchname* ptr = &value;
    if ( m_choice != e_Searchname || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Searchname;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Taxon1-req", CTaxon1_req)
{
    SET_CHOICE_MODULE("NCBI-Taxon1");
    ADD_NAMED_NULL_CHOICE_VARIANT("init", null, ());
    ADD_NAMED_BUF_CHOICE_VARIANT("findname", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("getdesignator", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("getunique", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("getidbyorg", m_object, COrg_ref);
    ADD_NAMED_STD_CHOICE_VARIANT("getorgnames", m_Getorgnames);
    ADD_NAMED_NULL_CHOICE_VARIANT("getcde", null, ());
    ADD_NAMED_NULL_CHOICE_VARIANT("getranks", null, ());
    ADD_NAMED_NULL_CHOICE_VARIANT("getdivs", null, ());
    ADD_NAMED_NULL_CHOICE_VARIANT("getgcs", null, ());
    ADD_NAMED_STD_CHOICE_VARIANT("getlineage", m_Getlineage);
    ADD_NAMED_STD_CHOICE_VARIANT("getchildren", m_Getchildren);
    ADD_NAMED_STD_CHOICE_VARIANT("getbyid", m_Getbyid);
    ADD_NAMED_REF_CHOICE_VARIANT("lookup", m_object, COrg_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("getorgmod", m_object, CTaxon1_info);
    ADD_NAMED_NULL_CHOICE_VARIANT("fini", null, ());
    ADD_NAMED_STD_CHOICE_VARIANT("id4gi", m_Id4gi);
    ADD_NAMED_STD_CHOICE_VARIANT("taxachildren", m_Taxachildren);
    ADD_NAMED_STD_CHOICE_VARIANT("taxalineage", m_Taxalineage);
    ADD_NAMED_NULL_CHOICE_VARIANT("maxtaxid", null, ());
    ADD_NAMED_NULL_CHOICE_VARIANT("getproptypes", null, ());
    ADD_NAMED_REF_CHOICE_VARIANT("getorgprop", m_object, CTaxon1_info);
    ADD_NAMED_REF_CHOICE_VARIANT("searchname", m_object, CTaxon1_info);
    ADD_NAMED_STD_CHOICE_VARIANT("dumpnames4class", m_Dumpnames4class);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CTaxon1_req_Base::CTaxon1_req_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CTaxon1_req_Base::~CTaxon1_req_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

