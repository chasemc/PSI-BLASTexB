/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'entrez2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/entrez2/entrez2_client.hpp>
#include <objects/entrez2/Entrez2_boolean_reply.hpp>
#include <objects/entrez2/Entrez2_docsum_list.hpp>
#include <objects/entrez2/Entrez2_hier_node.hpp>
#include <objects/entrez2/Entrez2_id_list.hpp>
#include <objects/entrez2/Entrez2_info.hpp>
#include <objects/entrez2/Entrez2_link_count_list.hpp>
#include <objects/entrez2/Entrez2_link_set.hpp>
#include <objects/entrez2/Entrez2_term_list.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CEntrez2Client_Base::Ask(const CEntrez2Client_Base::TRequestChoice& req, CEntrez2Client_Base::TReply& reply)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetRequest().Assign(req);
    Ask(request, reply);
}


void CEntrez2Client_Base::Ask(const CEntrez2Client_Base::TRequestChoice& req, CEntrez2Client_Base::TReply& reply, CEntrez2Client_Base::TReplyChoice::E_Choice wanted)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetRequest().Assign(req);
    Ask(request, reply, wanted);
}


void CEntrez2Client_Base::Ask(const CEntrez2Client_Base::TRequest& request, CEntrez2Client_Base::TReply& reply, CEntrez2Client_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else if (rc.IsError()) {
        CNcbiOstrstream oss;
        oss << "CEntrez2Client: server error: " << rc.GetError();
        NCBI_THROW(CException, eUnknown, CNcbiOstrstreamToString(oss));
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

CRef<CEntrez2_info> CEntrez2Client_Base::AskGet_info(CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_info();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_info);
    return CRef<CEntrez2_info>(&x_Choice(*reply).SetGet_info());
}

CRef<CEntrez2_boolean_reply> CEntrez2Client_Base::AskEval_boolean(const CEntrez2_eval_boolean& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetEval_boolean(const_cast<CEntrez2_eval_boolean&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Eval_boolean);
    return CRef<CEntrez2_boolean_reply>(&x_Choice(*reply).SetEval_boolean());
}

CRef<CEntrez2_docsum_list> CEntrez2Client_Base::AskGet_docsum(const CEntrez2_id_list& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_docsum(const_cast<CEntrez2_id_list&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_docsum);
    return CRef<CEntrez2_docsum_list>(&x_Choice(*reply).SetGet_docsum());
}

int CEntrez2Client_Base::AskGet_term_pos(const CEntrez2_term_query& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_term_pos(const_cast<CEntrez2_term_query&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_term_pos);
    return x_Choice(*reply).GetGet_term_pos();
}

CRef<CEntrez2_term_list> CEntrez2Client_Base::AskGet_term_list(const CEntrez2_term_pos& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_term_list(const_cast<CEntrez2_term_pos&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_term_list);
    return CRef<CEntrez2_term_list>(&x_Choice(*reply).SetGet_term_list());
}

CRef<CEntrez2_hier_node> CEntrez2Client_Base::AskGet_term_hierarchy(const CEntrez2_hier_query& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_term_hierarchy(const_cast<CEntrez2_hier_query&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_term_hierarchy);
    return CRef<CEntrez2_hier_node>(&x_Choice(*reply).SetGet_term_hierarchy());
}

CRef<CEntrez2_link_set> CEntrez2Client_Base::AskGet_links(const CEntrez2_get_links& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_links(const_cast<CEntrez2_get_links&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_links);
    return CRef<CEntrez2_link_set>(&x_Choice(*reply).SetGet_links());
}

CRef<CEntrez2_id_list> CEntrez2Client_Base::AskGet_linked(const CEntrez2_get_links& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_linked(const_cast<CEntrez2_get_links&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_linked);
    return CRef<CEntrez2_id_list>(&x_Choice(*reply).SetGet_linked());
}

CRef<CEntrez2_link_count_list> CEntrez2Client_Base::AskGet_link_counts(const CEntrez2_id& req, CEntrez2Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_link_counts(const_cast<CEntrez2_id&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_link_counts);
    return CRef<CEntrez2_link_count_list>(&x_Choice(*reply).SetGet_link_counts());
}

// constructor
CEntrez2Client_Base::CEntrez2Client_Base(void)
    : Tparent("ENTREZ2"), m_DefaultRequest(new TRequest)
{
}

// destructor
CEntrez2Client_Base::~CEntrez2Client_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

