/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'entrez2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/entrez2/E2Reply.hpp>
#include <objects/entrez2/Entrez2_boolean_reply.hpp>
#include <objects/entrez2/Entrez2_docsum_list.hpp>
#include <objects/entrez2/Entrez2_hier_node.hpp>
#include <objects/entrez2/Entrez2_id_list.hpp>
#include <objects/entrez2/Entrez2_info.hpp>
#include <objects/entrez2/Entrez2_link_count_list.hpp>
#include <objects/entrez2/Entrez2_link_set.hpp>
#include <objects/entrez2/Entrez2_term_list.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CE2Reply_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CE2Reply_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Error:
        m_string.Destruct();
        break;
    case e_Get_info:
    case e_Eval_boolean:
    case e_Get_docsum:
    case e_Get_term_list:
    case e_Get_term_hierarchy:
    case e_Get_links:
    case e_Get_linked:
    case e_Get_link_counts:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CE2Reply_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Get_info:
        (m_object = new(pool) ncbi::objects::CEntrez2_info())->AddReference();
        break;
    case e_Eval_boolean:
        (m_object = new(pool) ncbi::objects::CEntrez2_boolean_reply())->AddReference();
        break;
    case e_Get_docsum:
        (m_object = new(pool) ncbi::objects::CEntrez2_docsum_list())->AddReference();
        break;
    case e_Get_term_pos:
        m_Get_term_pos = 0;
        break;
    case e_Get_term_list:
        (m_object = new(pool) ncbi::objects::CEntrez2_term_list())->AddReference();
        break;
    case e_Get_term_hierarchy:
        (m_object = new(pool) ncbi::objects::CEntrez2_hier_node())->AddReference();
        break;
    case e_Get_links:
        (m_object = new(pool) ncbi::objects::CEntrez2_link_set())->AddReference();
        break;
    case e_Get_linked:
        (m_object = new(pool) ncbi::objects::CEntrez2_id_list())->AddReference();
        break;
    case e_Get_link_counts:
        (m_object = new(pool) ncbi::objects::CEntrez2_link_count_list())->AddReference();
        break;
    case e_Error:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CE2Reply_Base::sm_SelectionNames[] = {
    "not set",
    "error",
    "get-info",
    "eval-boolean",
    "get-docsum",
    "get-term-pos",
    "get-term-list",
    "get-term-hierarchy",
    "get-links",
    "get-linked",
    "get-link-counts"
};

NCBI_NS_STD::string CE2Reply_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CE2Reply_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CE2Reply_Base::SetError(const CE2Reply_Base::TError& value)
{
    Select(e_Error, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CE2Reply_Base::TGet_info& CE2Reply_Base::GetGet_info(void) const
{
    CheckSelected(e_Get_info);
    return *static_cast<const TGet_info*>(m_object);
}

CE2Reply_Base::TGet_info& CE2Reply_Base::SetGet_info(void)
{
    Select(e_Get_info, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_info*>(m_object);
}

void CE2Reply_Base::SetGet_info(CE2Reply_Base::TGet_info& value)
{
    TGet_info* ptr = &value;
    if ( m_choice != e_Get_info || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_info;
    }
}

const CE2Reply_Base::TEval_boolean& CE2Reply_Base::GetEval_boolean(void) const
{
    CheckSelected(e_Eval_boolean);
    return *static_cast<const TEval_boolean*>(m_object);
}

CE2Reply_Base::TEval_boolean& CE2Reply_Base::SetEval_boolean(void)
{
    Select(e_Eval_boolean, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TEval_boolean*>(m_object);
}

void CE2Reply_Base::SetEval_boolean(CE2Reply_Base::TEval_boolean& value)
{
    TEval_boolean* ptr = &value;
    if ( m_choice != e_Eval_boolean || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Eval_boolean;
    }
}

const CE2Reply_Base::TGet_docsum& CE2Reply_Base::GetGet_docsum(void) const
{
    CheckSelected(e_Get_docsum);
    return *static_cast<const TGet_docsum*>(m_object);
}

CE2Reply_Base::TGet_docsum& CE2Reply_Base::SetGet_docsum(void)
{
    Select(e_Get_docsum, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_docsum*>(m_object);
}

void CE2Reply_Base::SetGet_docsum(CE2Reply_Base::TGet_docsum& value)
{
    TGet_docsum* ptr = &value;
    if ( m_choice != e_Get_docsum || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_docsum;
    }
}

const CE2Reply_Base::TGet_term_list& CE2Reply_Base::GetGet_term_list(void) const
{
    CheckSelected(e_Get_term_list);
    return *static_cast<const TGet_term_list*>(m_object);
}

CE2Reply_Base::TGet_term_list& CE2Reply_Base::SetGet_term_list(void)
{
    Select(e_Get_term_list, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_term_list*>(m_object);
}

void CE2Reply_Base::SetGet_term_list(CE2Reply_Base::TGet_term_list& value)
{
    TGet_term_list* ptr = &value;
    if ( m_choice != e_Get_term_list || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_term_list;
    }
}

const CE2Reply_Base::TGet_term_hierarchy& CE2Reply_Base::GetGet_term_hierarchy(void) const
{
    CheckSelected(e_Get_term_hierarchy);
    return *static_cast<const TGet_term_hierarchy*>(m_object);
}

CE2Reply_Base::TGet_term_hierarchy& CE2Reply_Base::SetGet_term_hierarchy(void)
{
    Select(e_Get_term_hierarchy, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_term_hierarchy*>(m_object);
}

void CE2Reply_Base::SetGet_term_hierarchy(CE2Reply_Base::TGet_term_hierarchy& value)
{
    TGet_term_hierarchy* ptr = &value;
    if ( m_choice != e_Get_term_hierarchy || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_term_hierarchy;
    }
}

const CE2Reply_Base::TGet_links& CE2Reply_Base::GetGet_links(void) const
{
    CheckSelected(e_Get_links);
    return *static_cast<const TGet_links*>(m_object);
}

CE2Reply_Base::TGet_links& CE2Reply_Base::SetGet_links(void)
{
    Select(e_Get_links, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_links*>(m_object);
}

void CE2Reply_Base::SetGet_links(CE2Reply_Base::TGet_links& value)
{
    TGet_links* ptr = &value;
    if ( m_choice != e_Get_links || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_links;
    }
}

const CE2Reply_Base::TGet_linked& CE2Reply_Base::GetGet_linked(void) const
{
    CheckSelected(e_Get_linked);
    return *static_cast<const TGet_linked*>(m_object);
}

CE2Reply_Base::TGet_linked& CE2Reply_Base::SetGet_linked(void)
{
    Select(e_Get_linked, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_linked*>(m_object);
}

void CE2Reply_Base::SetGet_linked(CE2Reply_Base::TGet_linked& value)
{
    TGet_linked* ptr = &value;
    if ( m_choice != e_Get_linked || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_linked;
    }
}

const CE2Reply_Base::TGet_link_counts& CE2Reply_Base::GetGet_link_counts(void) const
{
    CheckSelected(e_Get_link_counts);
    return *static_cast<const TGet_link_counts*>(m_object);
}

CE2Reply_Base::TGet_link_counts& CE2Reply_Base::SetGet_link_counts(void)
{
    Select(e_Get_link_counts, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGet_link_counts*>(m_object);
}

void CE2Reply_Base::SetGet_link_counts(CE2Reply_Base::TGet_link_counts& value)
{
    TGet_link_counts* ptr = &value;
    if ( m_choice != e_Get_link_counts || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Get_link_counts;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("E2Reply", CE2Reply)
{
    SET_CHOICE_MODULE("NCBI-Entrez2");
    ADD_NAMED_BUF_CHOICE_VARIANT("error", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("get-info", m_object, CEntrez2_info);
    ADD_NAMED_REF_CHOICE_VARIANT("eval-boolean", m_object, CEntrez2_boolean_reply);
    ADD_NAMED_REF_CHOICE_VARIANT("get-docsum", m_object, CEntrez2_docsum_list);
    ADD_NAMED_STD_CHOICE_VARIANT("get-term-pos", m_Get_term_pos);
    ADD_NAMED_REF_CHOICE_VARIANT("get-term-list", m_object, CEntrez2_term_list);
    ADD_NAMED_REF_CHOICE_VARIANT("get-term-hierarchy", m_object, CEntrez2_hier_node);
    ADD_NAMED_REF_CHOICE_VARIANT("get-links", m_object, CEntrez2_link_set);
    ADD_NAMED_REF_CHOICE_VARIANT("get-linked", m_object, CEntrez2_id_list);
    ADD_NAMED_REF_CHOICE_VARIANT("get-link-counts", m_object, CEntrez2_link_count_list);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CE2Reply_Base::CE2Reply_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CE2Reply_Base::~CE2Reply_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

