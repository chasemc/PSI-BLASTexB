/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqblock.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqblock/EMBL_block.hpp>
#include <objects/general/Date.hpp>
#include <objects/seqblock/EMBL_xref.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CEMBL_block_Base::, EClass, false)
{
    SET_ENUM_INTERNAL_NAME("EMBL-block", "class");
    SET_ENUM_MODULE("EMBL-General");
    ADD_ENUM_VALUE("not-set", eClass_not_set);
    ADD_ENUM_VALUE("standard", eClass_standard);
    ADD_ENUM_VALUE("unannotated", eClass_unannotated);
    ADD_ENUM_VALUE("other", eClass_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CEMBL_block_Base::, EDiv, false)
{
    SET_ENUM_INTERNAL_NAME("EMBL-block", "div");
    SET_ENUM_MODULE("EMBL-General");
    ADD_ENUM_VALUE("fun", eDiv_fun);
    ADD_ENUM_VALUE("inv", eDiv_inv);
    ADD_ENUM_VALUE("mam", eDiv_mam);
    ADD_ENUM_VALUE("org", eDiv_org);
    ADD_ENUM_VALUE("phg", eDiv_phg);
    ADD_ENUM_VALUE("pln", eDiv_pln);
    ADD_ENUM_VALUE("pri", eDiv_pri);
    ADD_ENUM_VALUE("pro", eDiv_pro);
    ADD_ENUM_VALUE("rod", eDiv_rod);
    ADD_ENUM_VALUE("syn", eDiv_syn);
    ADD_ENUM_VALUE("una", eDiv_una);
    ADD_ENUM_VALUE("vrl", eDiv_vrl);
    ADD_ENUM_VALUE("vrt", eDiv_vrt);
    ADD_ENUM_VALUE("pat", eDiv_pat);
    ADD_ENUM_VALUE("est", eDiv_est);
    ADD_ENUM_VALUE("sts", eDiv_sts);
    ADD_ENUM_VALUE("other", eDiv_other);
}
END_ENUM_INFO

void CEMBL_block_Base::ResetCreation_date(void)
{
    if ( !m_Creation_date ) {
        m_Creation_date.Reset(new TCreation_date());
        return;
    }
    (*m_Creation_date).Reset();
}

void CEMBL_block_Base::SetCreation_date(CEMBL_block_Base::TCreation_date& value)
{
    m_Creation_date.Reset(&value);
}

void CEMBL_block_Base::ResetUpdate_date(void)
{
    if ( !m_Update_date ) {
        m_Update_date.Reset(new TUpdate_date());
        return;
    }
    (*m_Update_date).Reset();
}

void CEMBL_block_Base::SetUpdate_date(CEMBL_block_Base::TUpdate_date& value)
{
    m_Update_date.Reset(&value);
}

void CEMBL_block_Base::ResetExtra_acc(void)
{
    m_Extra_acc.clear();
    m_set_State[0] &= ~0x300;
}

void CEMBL_block_Base::ResetKeywords(void)
{
    m_Keywords.clear();
    m_set_State[0] &= ~0xc00;
}

void CEMBL_block_Base::ResetXref(void)
{
    m_Xref.clear();
    m_set_State[0] &= ~0x3000;
}

void CEMBL_block_Base::Reset(void)
{
    ResetClass();
    ResetDiv();
    ResetCreation_date();
    ResetUpdate_date();
    ResetExtra_acc();
    ResetKeywords();
    ResetXref();
}

BEGIN_NAMED_BASE_CLASS_INFO("EMBL-block", CEMBL_block)
{
    SET_CLASS_MODULE("EMBL-General");
    ADD_NAMED_ENUM_MEMBER("class", m_Class, EClass)->SetDefault(new TClass(eClass_standard))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("div", m_Div, EDiv)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("creation-date", m_Creation_date, CDate);
    ADD_NAMED_REF_MEMBER("update-date", m_Update_date, CDate);
    ADD_NAMED_MEMBER("extra-acc", m_Extra_acc, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("keywords", m_Keywords, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("xref", m_Xref, STL_list, (STL_CRef, (CLASS, (CEMBL_xref))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CEMBL_block_Base::CEMBL_block_Base(void)
    : m_Class(eClass_standard), m_Div((EDiv)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetCreation_date();
        ResetUpdate_date();
    }
}

// destructor
CEMBL_block_Base::~CEMBL_block_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

