M,10,general.asn:NCBI-General
--$Revision: 390235 $
--**********************************************************************
--
--  NCBI General Data elements
--  by James Ostell, 1990
--  Version 3.0 - June 1994
--
--**********************************************************************
  T,54,NCBI-General:Date
  T,58,NCBI-General:Date-std
  T,71,NCBI-General:Dbtag
  T,78,NCBI-General:Object-id
  T,85,NCBI-General:Person-id
  T,93,NCBI-General:Name-std
  T,106,NCBI-General:Int-fuzz
  T,128,NCBI-General:User-object
  T,133,NCBI-General:User-field

T,54,Date,CHOICE
-- StringStore is really a VisibleString.  It is used to define very
--   long strings which may need to be stored by the receiving program
--   in special structures, such as a ByteStore, but it's just a hint.
--   AsnTool stores StringStores in ByteStore structures.
-- OCTET STRINGs are also stored in ByteStores by AsnTool
-- 
-- typedef struct bsunit {             /* for building multiline strings 
-- Nlm_Handle str;            /* the string piece 
-- Nlm_Int2 len_avail,
-- len;
-- struct bsunit PNTR next; }       /* the next one 
-- Nlm_BSUnit, PNTR Nlm_BSUnitPtr;
-- 
-- typedef struct bytestore {
-- Nlm_Int4 seekptr,       /* current position 
-- totlen,             /* total stored data length in bytes 
-- chain_offset;       /* offset in ByteStore of first byte in curchain 
-- Nlm_BSUnitPtr chain,       /* chain of elements 
-- curchain;           /* the BSUnit containing seekptr 
-- } Nlm_ByteStore, PNTR Nlm_ByteStorePtr;
--
-- AsnTool incorporates this as a primitive type, so the definition
--   is here just for completeness
-- 
--  StringStore ::= [APPLICATION 1] IMPLICIT OCTET STRING
--
-- BigInt is really an INTEGER. It is used to warn the receiving code to expect
--   a value bigger than Int4 (actually Int8). It will be stored in DataVal.bigintvalue
--
--   Like StringStore, AsnTool incorporates it as a primitive. The definition would be:
--   BigInt ::= [APPLICATION 2] IMPLICIT INTEGER
--
-- Date is used to replace the (overly complex) UTCTtime, GeneralizedTime
--  of ASN.1
--  It stores only a date
--
  F,55,Date:str,VisibleString
  -- for those unparsed dates
  F,56,Date:std,/Date-std
  -- use this if you can

T,58,Date-std,SEQUENCE
-- NOTE: this is NOT a unix tm struct
  F,59,Date-std:year,INTEGER
  -- full year (including 1900)
  F,60,Date-std:month,INTEGER,OPTIONAL
  -- month (1-12)
  F,61,Date-std:day,INTEGER,OPTIONAL
  -- day of month (1-31)
  F,62,Date-std:season,VisibleString,OPTIONAL
  -- for "spring", "may-june", etc
  F,63,Date-std:hour,INTEGER,OPTIONAL
  -- hour of day (0-23)
  F,64,Date-std:minute,INTEGER,OPTIONAL
  -- minute of hour (0-59)
  F,65,Date-std:second,INTEGER,OPTIONAL
  -- second of minute (0-59)

T,71,Dbtag,SEQUENCE
-- Dbtag is generalized for tagging
-- eg. { "Social Security", str "023-79-8841" }
-- or  { "member", id 8882224 }
  F,72,Dbtag:db,VisibleString
  -- name of database or system
  F,73,Dbtag:tag,/Object-id
  -- appropriate tag

T,78,Object-id,CHOICE
-- Object-id can tag or name anything
--
  F,79,Object-id:id,INTEGER
  F,80,Object-id:str,VisibleString

T,85,Person-id,CHOICE
-- Person-id is to define a std element for people
--
  F,86,Person-id:dbtag,/Dbtag
  -- any defined database tag
  F,87,Person-id:name,/Name-std
  -- structured name
  F,88,Person-id:ml,VisibleString
  -- MEDLINE name (semi-structured)
  --    eg. "Jones RM"
  F,90,Person-id:str,VisibleString
  -- unstructured name
  F,91,Person-id:consortium,VisibleString
  -- consortium name

T,93,Name-std,SEQUENCE
-- Structured names
  F,94,Name-std:last,VisibleString
  F,95,Name-std:first,VisibleString,OPTIONAL
  F,96,Name-std:middle,VisibleString,OPTIONAL
  F,97,Name-std:full,VisibleString,OPTIONAL
  -- full name eg. "J. John Smith, Esq"
  F,98,Name-std:initials,VisibleString,OPTIONAL
  -- first + middle initials
  F,99,Name-std:suffix,VisibleString,OPTIONAL
  -- Jr, Sr, III
  F,100,Name-std:title,VisibleString,OPTIONAL
  -- Dr., Sister, etc

T,106,Int-fuzz,CHOICE
--**** Int-fuzz **********************************************
--*
--*   uncertainties in integer values
  F,107,Int-fuzz:p-m,INTEGER
  -- plus or minus fixed amount
  F,108,Int-fuzz:range,SEQUENCE
  -- max to min
    F,109,Int-fuzz:range:max,INTEGER
    F,110,Int-fuzz:range:min,INTEGER
  F,111,Int-fuzz:pct,INTEGER
  -- % plus or minus (x10) 0-1000
  F,112,Int-fuzz:lim,ENUMERATED
  -- some limit value
    V,113,Int-fuzz:lim:unk,0
    -- unknown
    V,114,Int-fuzz:lim:gt,1
    -- greater than
    V,115,Int-fuzz:lim:lt,2
    -- less than
    V,116,Int-fuzz:lim:tr,3
    -- space to right of position
    V,117,Int-fuzz:lim:tl,4
    -- space to left of position
    V,118,Int-fuzz:lim:circle,5
    -- artificial break at origin of circle
    V,119,Int-fuzz:lim:other,255
    -- something else
  F,120,Int-fuzz:alt,SET INTEGER
  -- set of alternatives for the integer

T,128,User-object,SEQUENCE
--**** User-object **********************************************
--*
--*   a general object for a user defined structured data item
--*    used by Seq-feat and Seq-descr
  F,129,User-object:class,VisibleString,OPTIONAL
  -- endeavor which designed this object
  F,130,User-object:type,/Object-id
  -- type of object within class
  F,131,User-object:data,SEQUENCE /User-field
  -- the object itself

T,133,User-field,SEQUENCE
  F,134,User-field:label,/Object-id
  -- field label
  F,135,User-field:num,INTEGER,OPTIONAL
  -- required for strs, ints, reals, oss
  F,136,User-field:data,CHOICE
  -- field contents
    F,137,User-field:data:str,UTF8String
    F,138,User-field:data:int,INTEGER
    F,139,User-field:data:real,REAL
    F,140,User-field:data:bool,BOOLEAN
    F,141,User-field:data:os,OCTET STRING
    F,142,User-field:data:object,/User-object
    -- for using other definitions
    F,143,User-field:data:strs,SEQUENCE UTF8String
    F,144,User-field:data:ints,SEQUENCE INTEGER
    F,145,User-field:data:reals,SEQUENCE REAL
    F,146,User-field:data:oss,SEQUENCE OCTET STRING
    F,147,User-field:data:fields,SEQUENCE /User-field
    F,148,User-field:data:objects,SEQUENCE /User-object
