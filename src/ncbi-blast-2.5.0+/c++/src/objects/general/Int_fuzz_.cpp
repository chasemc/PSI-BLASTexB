/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'general.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/general/Int_fuzz.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CInt_fuzz_Base::C_Range::Reset(void)
{
    ResetMax();
    ResetMin();
}

BEGIN_NAMED_CLASS_INFO("", CInt_fuzz_Base::C_Range)
{
    SET_INTERNAL_NAME("Int-fuzz", "range");
    SET_CLASS_MODULE("NCBI-General");
    ADD_NAMED_STD_MEMBER("max", m_Max)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("min", m_Min)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CInt_fuzz_Base::C_Range::C_Range(void)
    : m_Max(0), m_Min(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CInt_fuzz_Base::C_Range::~C_Range(void)
{
}


BEGIN_NAMED_ENUM_IN_INFO("", CInt_fuzz_Base::, ELim, false)
{
    SET_ENUM_INTERNAL_NAME("Int-fuzz", "lim");
    SET_ENUM_MODULE("NCBI-General");
    ADD_ENUM_VALUE("unk", eLim_unk);
    ADD_ENUM_VALUE("gt", eLim_gt);
    ADD_ENUM_VALUE("lt", eLim_lt);
    ADD_ENUM_VALUE("tr", eLim_tr);
    ADD_ENUM_VALUE("tl", eLim_tl);
    ADD_ENUM_VALUE("circle", eLim_circle);
    ADD_ENUM_VALUE("other", eLim_other);
}
END_ENUM_INFO

void CInt_fuzz_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CInt_fuzz_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Alt:
        m_Alt.Destruct();
        break;
    case e_Range:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CInt_fuzz_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_P_m:
        m_P_m = 0;
        break;
    case e_Range:
        (m_object = new(pool) C_Range())->AddReference();
        break;
    case e_Pct:
        m_Pct = 0;
        break;
    case e_Lim:
        m_Lim = (ELim)(0);
        break;
    case e_Alt:
        m_Alt.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CInt_fuzz_Base::sm_SelectionNames[] = {
    "not set",
    "p-m",
    "range",
    "pct",
    "lim",
    "alt"
};

NCBI_NS_STD::string CInt_fuzz_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CInt_fuzz_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CInt_fuzz_Base::TRange& CInt_fuzz_Base::GetRange(void) const
{
    CheckSelected(e_Range);
    return *static_cast<const TRange*>(m_object);
}

CInt_fuzz_Base::TRange& CInt_fuzz_Base::SetRange(void)
{
    Select(e_Range, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRange*>(m_object);
}

void CInt_fuzz_Base::SetRange(CInt_fuzz_Base::TRange& value)
{
    TRange* ptr = &value;
    if ( m_choice != e_Range || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Range;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Int-fuzz", CInt_fuzz)
{
    SET_CHOICE_MODULE("NCBI-General");
    ADD_NAMED_STD_CHOICE_VARIANT("p-m", m_P_m);
    ADD_NAMED_REF_CHOICE_VARIANT("range", m_object, C_Range);
    ADD_NAMED_STD_CHOICE_VARIANT("pct", m_Pct);
    ADD_NAMED_ENUM_CHOICE_VARIANT("lim", m_Lim, ELim);
    ADD_NAMED_BUF_CHOICE_VARIANT("alt", m_Alt, STL_list_set, (STD, (TSeqPos)));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CInt_fuzz_Base::CInt_fuzz_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CInt_fuzz_Base::~CInt_fuzz_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

