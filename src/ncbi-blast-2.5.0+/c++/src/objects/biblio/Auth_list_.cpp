/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'biblio.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/biblio/Auth_list.hpp>
#include <objects/biblio/Affil.hpp>
#include <objects/biblio/Author.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CAuth_list_Base::C_Names::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CAuth_list_Base::C_Names::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Std:
        m_Std.Destruct();
        break;
    case e_Ml:
        m_Ml.Destruct();
        break;
    case e_Str:
        m_Str.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CAuth_list_Base::C_Names::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Std:
        m_Std.Construct();
        break;
    case e_Ml:
        m_Ml.Construct();
        break;
    case e_Str:
        m_Str.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CAuth_list_Base::C_Names::sm_SelectionNames[] = {
    "not set",
    "std",
    "ml",
    "str"
};

NCBI_NS_STD::string CAuth_list_Base::C_Names::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CAuth_list_Base::C_Names::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CAuth_list_Base::C_Names)
{
    SET_INTERNAL_NAME("Auth-list", "names");
    SET_CHOICE_MODULE("NCBI-Biblio");
    ADD_NAMED_BUF_CHOICE_VARIANT("std", m_Std, STL_list, (STL_CRef, (CLASS, (CAuthor))));
    ADD_NAMED_BUF_CHOICE_VARIANT("ml", m_Ml, STL_list, (STD, (string)));
    ADD_NAMED_BUF_CHOICE_VARIANT("str", m_Str, STL_list, (STD, (string)));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CAuth_list_Base::C_Names::C_Names(void)
    : m_choice(e_not_set)
{
}

// destructor
CAuth_list_Base::C_Names::~C_Names(void)
{
    Reset();
}


void CAuth_list_Base::ResetNames(void)
{
    m_delay_Names.Forget();
    if ( !m_Names ) {
        m_Names.Reset(new TNames());
        return;
    }
    (*m_Names).Reset();
}

void CAuth_list_Base::SetNames(CAuth_list_Base::TNames& value)
{
    m_delay_Names.Forget();
    m_Names.Reset(&value);
}

void CAuth_list_Base::ResetAffil(void)
{
    m_Affil.Reset();
}

void CAuth_list_Base::SetAffil(CAuth_list_Base::TAffil& value)
{
    m_Affil.Reset(&value);
}

CAuth_list_Base::TAffil& CAuth_list_Base::SetAffil(void)
{
    if ( !m_Affil )
        m_Affil.Reset(new ncbi::objects::CAffil());
    return (*m_Affil);
}

void CAuth_list_Base::Reset(void)
{
    ResetNames();
    ResetAffil();
}

BEGIN_NAMED_BASE_CLASS_INFO("Auth-list", CAuth_list)
{
    SET_CLASS_MODULE("NCBI-Biblio");
    ADD_NAMED_REF_MEMBER("names", m_Names, C_Names)->SetDelayBuffer(MEMBER_PTR(m_delay_Names));
    ADD_NAMED_REF_MEMBER("affil", m_Affil, CAffil)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAuth_list_Base::CAuth_list_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetNames();
    }
}

// destructor
CAuth_list_Base::~CAuth_list_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

