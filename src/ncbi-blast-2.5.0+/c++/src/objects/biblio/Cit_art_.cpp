/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'biblio.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/biblio/Cit_art.hpp>
#include <objects/biblio/ArticleIdSet.hpp>
#include <objects/biblio/Auth_list.hpp>
#include <objects/biblio/Cit_book.hpp>
#include <objects/biblio/Cit_jour.hpp>
#include <objects/biblio/Cit_proc.hpp>
#include <objects/biblio/Title.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CCit_art_Base::C_From::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CCit_art_Base::C_From::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Journal:
    case e_Book:
    case e_Proc:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CCit_art_Base::C_From::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Journal:
        (m_object = new(pool) ncbi::objects::CCit_jour())->AddReference();
        break;
    case e_Book:
        (m_object = new(pool) ncbi::objects::CCit_book())->AddReference();
        break;
    case e_Proc:
        (m_object = new(pool) ncbi::objects::CCit_proc())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CCit_art_Base::C_From::sm_SelectionNames[] = {
    "not set",
    "journal",
    "book",
    "proc"
};

NCBI_NS_STD::string CCit_art_Base::C_From::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CCit_art_Base::C_From::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CCit_art_Base::C_From::TJournal& CCit_art_Base::C_From::GetJournal(void) const
{
    CheckSelected(e_Journal);
    return *static_cast<const TJournal*>(m_object);
}

CCit_art_Base::C_From::TJournal& CCit_art_Base::C_From::SetJournal(void)
{
    Select(e_Journal, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TJournal*>(m_object);
}

void CCit_art_Base::C_From::SetJournal(CCit_art_Base::C_From::TJournal& value)
{
    TJournal* ptr = &value;
    if ( m_choice != e_Journal || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Journal;
    }
}

const CCit_art_Base::C_From::TBook& CCit_art_Base::C_From::GetBook(void) const
{
    CheckSelected(e_Book);
    return *static_cast<const TBook*>(m_object);
}

CCit_art_Base::C_From::TBook& CCit_art_Base::C_From::SetBook(void)
{
    Select(e_Book, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBook*>(m_object);
}

void CCit_art_Base::C_From::SetBook(CCit_art_Base::C_From::TBook& value)
{
    TBook* ptr = &value;
    if ( m_choice != e_Book || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Book;
    }
}

const CCit_art_Base::C_From::TProc& CCit_art_Base::C_From::GetProc(void) const
{
    CheckSelected(e_Proc);
    return *static_cast<const TProc*>(m_object);
}

CCit_art_Base::C_From::TProc& CCit_art_Base::C_From::SetProc(void)
{
    Select(e_Proc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TProc*>(m_object);
}

void CCit_art_Base::C_From::SetProc(CCit_art_Base::C_From::TProc& value)
{
    TProc* ptr = &value;
    if ( m_choice != e_Proc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Proc;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CCit_art_Base::C_From)
{
    SET_INTERNAL_NAME("Cit-art", "from");
    SET_CHOICE_MODULE("NCBI-Biblio");
    ADD_NAMED_REF_CHOICE_VARIANT("journal", m_object, CCit_jour);
    ADD_NAMED_REF_CHOICE_VARIANT("book", m_object, CCit_book);
    ADD_NAMED_REF_CHOICE_VARIANT("proc", m_object, CCit_proc);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CCit_art_Base::C_From::C_From(void)
    : m_choice(e_not_set)
{
}

// destructor
CCit_art_Base::C_From::~C_From(void)
{
    Reset();
}


void CCit_art_Base::ResetTitle(void)
{
    m_Title.Reset();
}

void CCit_art_Base::SetTitle(CCit_art_Base::TTitle& value)
{
    m_Title.Reset(&value);
}

CCit_art_Base::TTitle& CCit_art_Base::SetTitle(void)
{
    if ( !m_Title )
        m_Title.Reset(new ncbi::objects::CTitle());
    return (*m_Title);
}

void CCit_art_Base::ResetAuthors(void)
{
    m_Authors.Reset();
}

void CCit_art_Base::SetAuthors(CCit_art_Base::TAuthors& value)
{
    m_Authors.Reset(&value);
}

CCit_art_Base::TAuthors& CCit_art_Base::SetAuthors(void)
{
    if ( !m_Authors )
        m_Authors.Reset(new ncbi::objects::CAuth_list());
    return (*m_Authors);
}

void CCit_art_Base::ResetFrom(void)
{
    if ( !m_From ) {
        m_From.Reset(new TFrom());
        return;
    }
    (*m_From).Reset();
}

void CCit_art_Base::SetFrom(CCit_art_Base::TFrom& value)
{
    m_From.Reset(&value);
}

void CCit_art_Base::ResetIds(void)
{
    m_Ids.Reset();
}

void CCit_art_Base::SetIds(CCit_art_Base::TIds& value)
{
    m_Ids.Reset(&value);
}

CCit_art_Base::TIds& CCit_art_Base::SetIds(void)
{
    if ( !m_Ids )
        m_Ids.Reset(new ncbi::objects::CArticleIdSet());
    return (*m_Ids);
}

void CCit_art_Base::Reset(void)
{
    ResetTitle();
    ResetAuthors();
    ResetFrom();
    ResetIds();
}

BEGIN_NAMED_BASE_CLASS_INFO("Cit-art", CCit_art)
{
    SET_CLASS_MODULE("NCBI-Biblio");
    ADD_NAMED_REF_MEMBER("title", m_Title, CTitle)->SetOptional();
    ADD_NAMED_REF_MEMBER("authors", m_Authors, CAuth_list)->SetOptional();
    ADD_NAMED_REF_MEMBER("from", m_From, C_From);
    ADD_NAMED_REF_MEMBER("ids", m_Ids, CArticleIdSet)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCit_art_Base::CCit_art_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetFrom();
    }
}

// destructor
CCit_art_Base::~CCit_art_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

