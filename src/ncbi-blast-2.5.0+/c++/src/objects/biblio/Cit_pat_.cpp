/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'biblio.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/biblio/Cit_pat.hpp>
#include <objects/biblio/Auth_list.hpp>
#include <objects/biblio/Patent_priority.hpp>
#include <objects/general/Date.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CCit_pat_Base::ResetTitle(void)
{
    m_Title.erase();
    m_set_State[0] &= ~0x3;
}

void CCit_pat_Base::ResetAuthors(void)
{
    if ( !m_Authors ) {
        m_Authors.Reset(new TAuthors());
        return;
    }
    (*m_Authors).Reset();
}

void CCit_pat_Base::SetAuthors(CCit_pat_Base::TAuthors& value)
{
    m_Authors.Reset(&value);
}

void CCit_pat_Base::ResetCountry(void)
{
    m_Country.erase();
    m_set_State[0] &= ~0x30;
}

void CCit_pat_Base::ResetDoc_type(void)
{
    m_Doc_type.erase();
    m_set_State[0] &= ~0xc0;
}

void CCit_pat_Base::ResetNumber(void)
{
    m_Number.erase();
    m_set_State[0] &= ~0x300;
}

void CCit_pat_Base::ResetDate_issue(void)
{
    m_Date_issue.Reset();
}

void CCit_pat_Base::SetDate_issue(CCit_pat_Base::TDate_issue& value)
{
    m_Date_issue.Reset(&value);
}

CCit_pat_Base::TDate_issue& CCit_pat_Base::SetDate_issue(void)
{
    if ( !m_Date_issue )
        m_Date_issue.Reset(new ncbi::objects::CDate());
    return (*m_Date_issue);
}

void CCit_pat_Base::ResetClass(void)
{
    m_Class.clear();
    m_set_State[0] &= ~0x3000;
}

void CCit_pat_Base::ResetApp_number(void)
{
    m_App_number.erase();
    m_set_State[0] &= ~0xc000;
}

void CCit_pat_Base::ResetApp_date(void)
{
    m_App_date.Reset();
}

void CCit_pat_Base::SetApp_date(CCit_pat_Base::TApp_date& value)
{
    m_App_date.Reset(&value);
}

CCit_pat_Base::TApp_date& CCit_pat_Base::SetApp_date(void)
{
    if ( !m_App_date )
        m_App_date.Reset(new ncbi::objects::CDate());
    return (*m_App_date);
}

void CCit_pat_Base::ResetApplicants(void)
{
    m_Applicants.Reset();
}

void CCit_pat_Base::SetApplicants(CCit_pat_Base::TApplicants& value)
{
    m_Applicants.Reset(&value);
}

CCit_pat_Base::TApplicants& CCit_pat_Base::SetApplicants(void)
{
    if ( !m_Applicants )
        m_Applicants.Reset(new ncbi::objects::CAuth_list());
    return (*m_Applicants);
}

void CCit_pat_Base::ResetAssignees(void)
{
    m_Assignees.Reset();
}

void CCit_pat_Base::SetAssignees(CCit_pat_Base::TAssignees& value)
{
    m_Assignees.Reset(&value);
}

CCit_pat_Base::TAssignees& CCit_pat_Base::SetAssignees(void)
{
    if ( !m_Assignees )
        m_Assignees.Reset(new ncbi::objects::CAuth_list());
    return (*m_Assignees);
}

void CCit_pat_Base::ResetPriority(void)
{
    m_Priority.clear();
    m_set_State[0] &= ~0xc00000;
}

void CCit_pat_Base::ResetAbstract(void)
{
    m_Abstract.erase();
    m_set_State[0] &= ~0x3000000;
}

void CCit_pat_Base::Reset(void)
{
    ResetTitle();
    ResetAuthors();
    ResetCountry();
    ResetDoc_type();
    ResetNumber();
    ResetDate_issue();
    ResetClass();
    ResetApp_number();
    ResetApp_date();
    ResetApplicants();
    ResetAssignees();
    ResetPriority();
    ResetAbstract();
}

BEGIN_NAMED_BASE_CLASS_INFO("Cit-pat", CCit_pat)
{
    SET_CLASS_MODULE("NCBI-Biblio");
    ADD_NAMED_STD_MEMBER("title", m_Title)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_REF_MEMBER("authors", m_Authors, CAuth_list);
    ADD_NAMED_STD_MEMBER("country", m_Country)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("doc-type", m_Doc_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("number", m_Number)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("date-issue", m_Date_issue, CDate)->SetOptional();
    ADD_NAMED_MEMBER("class", m_Class, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("app-number", m_App_number)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("app-date", m_App_date, CDate)->SetOptional();
    ADD_NAMED_REF_MEMBER("applicants", m_Applicants, CAuth_list)->SetOptional();
    ADD_NAMED_REF_MEMBER("assignees", m_Assignees, CAuth_list)->SetOptional();
    ADD_NAMED_MEMBER("priority", m_Priority, STL_list, (STL_CRef, (CLASS, (CPatent_priority))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("abstract", m_Abstract)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCit_pat_Base::CCit_pat_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAuthors();
    }
}

// destructor
CCit_pat_Base::~CCit_pat_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

