/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mla.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mla/Mla_back.hpp>
#include <objects/medlars/Medlars_entry.hpp>
#include <objects/medline/Medline_entry.hpp>
#include <objects/mla/Title_msg_list.hpp>
#include <objects/pub/Pub.hpp>
#include <objects/pubmed/Pubmed_entry.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CMla_back_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CMla_back_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Getuids:
        m_Getuids.Destruct();
        break;
    case e_Getpmids:
        m_Getpmids.Destruct();
        break;
    case e_Outpmid:
        m_Outpmid.Destruct();
        break;
    case e_Getmle:
    case e_Getpub:
    case e_Gettitle:
    case e_Getpme:
    case e_Getmlr:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CMla_back_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Error:
        m_Error = (ncbi::objects::EError_val)(0);
        break;
    case e_Getmle:
        (m_object = new(pool) ncbi::objects::CMedline_entry())->AddReference();
        break;
    case e_Getpub:
        (m_object = new(pool) ncbi::objects::CPub())->AddReference();
        break;
    case e_Gettitle:
        (m_object = new(pool) ncbi::objects::CTitle_msg_list())->AddReference();
        break;
    case e_Citmatch:
        m_Citmatch = 0;
        break;
    case e_Getuids:
        m_Getuids.Construct();
        break;
    case e_Getpmids:
        m_Getpmids.Construct();
        break;
    case e_Outuid:
        m_Outuid = 0;
        break;
    case e_Outpmid:
        m_Outpmid.Construct();
        break;
    case e_Getpme:
        (m_object = new(pool) ncbi::objects::CPubmed_entry())->AddReference();
        break;
    case e_Getmlr:
        (m_object = new(pool) ncbi::objects::CMedlars_entry())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CMla_back_Base::sm_SelectionNames[] = {
    "not set",
    "init",
    "error",
    "getmle",
    "getpub",
    "gettitle",
    "citmatch",
    "fini",
    "getuids",
    "getpmids",
    "outuid",
    "outpmid",
    "getpme",
    "getmlr"
};

NCBI_NS_STD::string CMla_back_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CMla_back_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CMla_back_Base::TGetmle& CMla_back_Base::GetGetmle(void) const
{
    CheckSelected(e_Getmle);
    return *static_cast<const TGetmle*>(m_object);
}

CMla_back_Base::TGetmle& CMla_back_Base::SetGetmle(void)
{
    Select(e_Getmle, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetmle*>(m_object);
}

void CMla_back_Base::SetGetmle(CMla_back_Base::TGetmle& value)
{
    TGetmle* ptr = &value;
    if ( m_choice != e_Getmle || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getmle;
    }
}

const CMla_back_Base::TGetpub& CMla_back_Base::GetGetpub(void) const
{
    CheckSelected(e_Getpub);
    return *static_cast<const TGetpub*>(m_object);
}

CMla_back_Base::TGetpub& CMla_back_Base::SetGetpub(void)
{
    Select(e_Getpub, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetpub*>(m_object);
}

void CMla_back_Base::SetGetpub(CMla_back_Base::TGetpub& value)
{
    TGetpub* ptr = &value;
    if ( m_choice != e_Getpub || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getpub;
    }
}

const CMla_back_Base::TGettitle& CMla_back_Base::GetGettitle(void) const
{
    CheckSelected(e_Gettitle);
    return *static_cast<const TGettitle*>(m_object);
}

CMla_back_Base::TGettitle& CMla_back_Base::SetGettitle(void)
{
    Select(e_Gettitle, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGettitle*>(m_object);
}

void CMla_back_Base::SetGettitle(CMla_back_Base::TGettitle& value)
{
    TGettitle* ptr = &value;
    if ( m_choice != e_Gettitle || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Gettitle;
    }
}

void CMla_back_Base::SetOutpmid(const CMla_back_Base::TOutpmid& value)
{
    Select(e_Outpmid, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_Outpmid = value;
}

const CMla_back_Base::TGetpme& CMla_back_Base::GetGetpme(void) const
{
    CheckSelected(e_Getpme);
    return *static_cast<const TGetpme*>(m_object);
}

CMla_back_Base::TGetpme& CMla_back_Base::SetGetpme(void)
{
    Select(e_Getpme, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetpme*>(m_object);
}

void CMla_back_Base::SetGetpme(CMla_back_Base::TGetpme& value)
{
    TGetpme* ptr = &value;
    if ( m_choice != e_Getpme || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getpme;
    }
}

const CMla_back_Base::TGetmlr& CMla_back_Base::GetGetmlr(void) const
{
    CheckSelected(e_Getmlr);
    return *static_cast<const TGetmlr*>(m_object);
}

CMla_back_Base::TGetmlr& CMla_back_Base::SetGetmlr(void)
{
    Select(e_Getmlr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGetmlr*>(m_object);
}

void CMla_back_Base::SetGetmlr(CMla_back_Base::TGetmlr& value)
{
    TGetmlr* ptr = &value;
    if ( m_choice != e_Getmlr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Getmlr;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Mla-back", CMla_back)
{
    SET_CHOICE_MODULE("NCBI-MedArchive");
    ADD_NAMED_NULL_CHOICE_VARIANT("init", null, ())->GetId().SetTag(0);
    ADD_NAMED_ENUM_CHOICE_VARIANT("error", m_Error, EError_val)->GetId().SetTag(1);
    ADD_NAMED_REF_CHOICE_VARIANT("getmle", m_object, CMedline_entry)->GetId().SetTag(2);
    ADD_NAMED_REF_CHOICE_VARIANT("getpub", m_object, CPub)->GetId().SetTag(3);
    ADD_NAMED_REF_CHOICE_VARIANT("gettitle", m_object, CTitle_msg_list)->GetId().SetTag(4);
    ADD_NAMED_STD_CHOICE_VARIANT("citmatch", m_Citmatch)->GetId().SetTag(5);
    ADD_NAMED_NULL_CHOICE_VARIANT("fini", null, ())->GetId().SetTag(6);
    ADD_NAMED_BUF_CHOICE_VARIANT("getuids", m_Getuids, STL_list, (STD, (int)))->GetId().SetTag(7);
    ADD_NAMED_BUF_CHOICE_VARIANT("getpmids", m_Getpmids, STL_list, (STD, (int)))->GetId().SetTag(8);
    ADD_NAMED_STD_CHOICE_VARIANT("outuid", m_Outuid)->GetId().SetTag(9);
    ADD_NAMED_BUF_CHOICE_VARIANT("outpmid", m_Outpmid, CLASS, (CPubMedId))->GetId().SetTag(10);
    ADD_NAMED_REF_CHOICE_VARIANT("getpme", m_object, CPubmed_entry)->GetId().SetTag(11);
    ADD_NAMED_REF_CHOICE_VARIANT("getmlr", m_object, CMedlars_entry)->GetId().SetTag(12);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CMla_back_Base::CMla_back_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CMla_back_Base::~CMla_back_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

