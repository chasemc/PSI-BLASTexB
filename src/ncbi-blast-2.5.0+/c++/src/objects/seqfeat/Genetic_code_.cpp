/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Genetic_code.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGenetic_code_Base::C_E::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CGenetic_code_Base::C_E::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Ncbi8aa:
        m_Ncbi8aa.Destruct();
        break;
    case e_Ncbistdaa:
        m_Ncbistdaa.Destruct();
        break;
    case e_Sncbi8aa:
        m_Sncbi8aa.Destruct();
        break;
    case e_Sncbistdaa:
        m_Sncbistdaa.Destruct();
        break;
    case e_Name:
    case e_Ncbieaa:
    case e_Sncbieaa:
        m_string.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CGenetic_code_Base::C_E::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Id:
        m_Id = 0;
        break;
    case e_Ncbi8aa:
        m_Ncbi8aa.Construct();
        break;
    case e_Ncbistdaa:
        m_Ncbistdaa.Construct();
        break;
    case e_Sncbi8aa:
        m_Sncbi8aa.Construct();
        break;
    case e_Sncbistdaa:
        m_Sncbistdaa.Construct();
        break;
    case e_Name:
    case e_Ncbieaa:
    case e_Sncbieaa:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CGenetic_code_Base::C_E::sm_SelectionNames[] = {
    "not set",
    "name",
    "id",
    "ncbieaa",
    "ncbi8aa",
    "ncbistdaa",
    "sncbieaa",
    "sncbi8aa",
    "sncbistdaa"
};

NCBI_NS_STD::string CGenetic_code_Base::C_E::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CGenetic_code_Base::C_E::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CGenetic_code_Base::C_E::SetName(const CGenetic_code_Base::C_E::TName& value)
{
    Select(e_Name, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CGenetic_code_Base::C_E::SetNcbieaa(const CGenetic_code_Base::C_E::TNcbieaa& value)
{
    Select(e_Ncbieaa, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CGenetic_code_Base::C_E::SetSncbieaa(const CGenetic_code_Base::C_E::TSncbieaa& value)
{
    Select(e_Sncbieaa, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CGenetic_code_Base::C_E)
{
    SET_INTERNAL_NAME("Genetic-code", "E");
    SET_CHOICE_MODULE("NCBI-Seqfeat");
    ADD_NAMED_BUF_CHOICE_VARIANT("name", m_string, STD, (string));
    ADD_NAMED_STD_CHOICE_VARIANT("id", m_Id);
    ADD_NAMED_BUF_CHOICE_VARIANT("ncbieaa", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("ncbi8aa", m_Ncbi8aa, STL_CHAR_vector, (char));
    ADD_NAMED_BUF_CHOICE_VARIANT("ncbistdaa", m_Ncbistdaa, STL_CHAR_vector, (char));
    ADD_NAMED_BUF_CHOICE_VARIANT("sncbieaa", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("sncbi8aa", m_Sncbi8aa, STL_CHAR_vector, (char));
    ADD_NAMED_BUF_CHOICE_VARIANT("sncbistdaa", m_Sncbistdaa, STL_CHAR_vector, (char));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CGenetic_code_Base::C_E::C_E(void)
    : m_choice(e_not_set)
{
}

// destructor
CGenetic_code_Base::C_E::~C_E(void)
{
    Reset();
}


void CGenetic_code_Base::Reset(void)
{
    m_data.clear();
    m_set_State[0] &= ~0x3;
}

BEGIN_NAMED_BASE_IMPLICIT_CLASS_INFO("Genetic-code", CGenetic_code)
{
    SET_CLASS_MODULE("NCBI-Seqfeat");
    ADD_NAMED_MEMBER("", m_data, STL_list_set, (STL_CRef, (CLASS, (C_E))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CGenetic_code_Base::CGenetic_code_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CGenetic_code_Base::~CGenetic_code_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

