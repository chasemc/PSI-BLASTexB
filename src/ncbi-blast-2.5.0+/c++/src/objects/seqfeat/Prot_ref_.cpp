/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Prot_ref.hpp>
#include <objects/general/Dbtag.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CProt_ref_Base::, EProcessed, false)
{
    SET_ENUM_INTERNAL_NAME("Prot-ref", "processed");
    SET_ENUM_MODULE("NCBI-Protein");
    ADD_ENUM_VALUE("not-set", eProcessed_not_set);
    ADD_ENUM_VALUE("preprotein", eProcessed_preprotein);
    ADD_ENUM_VALUE("mature", eProcessed_mature);
    ADD_ENUM_VALUE("signal-peptide", eProcessed_signal_peptide);
    ADD_ENUM_VALUE("transit-peptide", eProcessed_transit_peptide);
    ADD_ENUM_VALUE("propeptide", eProcessed_propeptide);
}
END_ENUM_INFO

void CProt_ref_Base::ResetName(void)
{
    m_Name.clear();
    m_set_State[0] &= ~0x3;
}

void CProt_ref_Base::ResetDesc(void)
{
    m_Desc.erase();
    m_set_State[0] &= ~0xc;
}

void CProt_ref_Base::ResetEc(void)
{
    m_Ec.clear();
    m_set_State[0] &= ~0x30;
}

void CProt_ref_Base::ResetActivity(void)
{
    m_Activity.clear();
    m_set_State[0] &= ~0xc0;
}

void CProt_ref_Base::ResetDb(void)
{
    m_Db.clear();
    m_set_State[0] &= ~0x300;
}

void CProt_ref_Base::Reset(void)
{
    ResetName();
    ResetDesc();
    ResetEc();
    ResetActivity();
    ResetDb();
    ResetProcessed();
}

BEGIN_NAMED_BASE_CLASS_INFO("Prot-ref", CProt_ref)
{
    SET_CLASS_MODULE("NCBI-Protein");
    ADD_NAMED_MEMBER("name", m_Name, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("desc", m_Desc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("ec", m_Ec, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("activity", m_Activity, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("db", m_Db, STL_vector_set, (STL_CRef, (CLASS, (CDbtag))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("processed", m_Processed, EProcessed)->SetDefault(new TProcessed(eProcessed_not_set))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CProt_ref_Base::CProt_ref_Base(void)
    : m_Processed(eProcessed_not_set)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CProt_ref_Base::~CProt_ref_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

