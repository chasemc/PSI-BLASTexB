/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/RNA_ref.hpp>
#include <objects/seqfeat/RNA_gen.hpp>
#include <objects/seqfeat/Trna_ext.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CRNA_ref_Base::, EType, false)
{
    SET_ENUM_INTERNAL_NAME("RNA-ref", "type");
    SET_ENUM_MODULE("NCBI-RNA");
    ADD_ENUM_VALUE("unknown", eType_unknown);
    ADD_ENUM_VALUE("premsg", eType_premsg);
    ADD_ENUM_VALUE("mRNA", eType_mRNA);
    ADD_ENUM_VALUE("tRNA", eType_tRNA);
    ADD_ENUM_VALUE("rRNA", eType_rRNA);
    ADD_ENUM_VALUE("snRNA", eType_snRNA);
    ADD_ENUM_VALUE("scRNA", eType_scRNA);
    ADD_ENUM_VALUE("snoRNA", eType_snoRNA);
    ADD_ENUM_VALUE("ncRNA", eType_ncRNA);
    ADD_ENUM_VALUE("tmRNA", eType_tmRNA);
    ADD_ENUM_VALUE("miscRNA", eType_miscRNA);
    ADD_ENUM_VALUE("other", eType_other);
}
END_ENUM_INFO

void CRNA_ref_Base::C_Ext::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CRNA_ref_Base::C_Ext::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Name:
        m_string.Destruct();
        break;
    case e_TRNA:
    case e_Gen:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CRNA_ref_Base::C_Ext::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_TRNA:
        (m_object = new(pool) ncbi::objects::CTrna_ext())->AddReference();
        break;
    case e_Gen:
        (m_object = new(pool) ncbi::objects::CRNA_gen())->AddReference();
        break;
    case e_Name:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CRNA_ref_Base::C_Ext::sm_SelectionNames[] = {
    "not set",
    "name",
    "tRNA",
    "gen"
};

NCBI_NS_STD::string CRNA_ref_Base::C_Ext::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CRNA_ref_Base::C_Ext::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CRNA_ref_Base::C_Ext::SetName(const CRNA_ref_Base::C_Ext::TName& value)
{
    Select(e_Name, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CRNA_ref_Base::C_Ext::TTRNA& CRNA_ref_Base::C_Ext::GetTRNA(void) const
{
    CheckSelected(e_TRNA);
    return *static_cast<const TTRNA*>(m_object);
}

CRNA_ref_Base::C_Ext::TTRNA& CRNA_ref_Base::C_Ext::SetTRNA(void)
{
    Select(e_TRNA, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTRNA*>(m_object);
}

void CRNA_ref_Base::C_Ext::SetTRNA(CRNA_ref_Base::C_Ext::TTRNA& value)
{
    TTRNA* ptr = &value;
    if ( m_choice != e_TRNA || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_TRNA;
    }
}

const CRNA_ref_Base::C_Ext::TGen& CRNA_ref_Base::C_Ext::GetGen(void) const
{
    CheckSelected(e_Gen);
    return *static_cast<const TGen*>(m_object);
}

CRNA_ref_Base::C_Ext::TGen& CRNA_ref_Base::C_Ext::SetGen(void)
{
    Select(e_Gen, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGen*>(m_object);
}

void CRNA_ref_Base::C_Ext::SetGen(CRNA_ref_Base::C_Ext::TGen& value)
{
    TGen* ptr = &value;
    if ( m_choice != e_Gen || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Gen;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CRNA_ref_Base::C_Ext)
{
    SET_INTERNAL_NAME("RNA-ref", "ext");
    SET_CHOICE_MODULE("NCBI-RNA");
    ADD_NAMED_BUF_CHOICE_VARIANT("name", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("tRNA", m_object, CTrna_ext);
    ADD_NAMED_REF_CHOICE_VARIANT("gen", m_object, CRNA_gen);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CRNA_ref_Base::C_Ext::C_Ext(void)
    : m_choice(e_not_set)
{
}

// destructor
CRNA_ref_Base::C_Ext::~C_Ext(void)
{
    Reset();
}


void CRNA_ref_Base::ResetExt(void)
{
    m_Ext.Reset();
}

void CRNA_ref_Base::SetExt(CRNA_ref_Base::TExt& value)
{
    m_Ext.Reset(&value);
}

CRNA_ref_Base::TExt& CRNA_ref_Base::SetExt(void)
{
    if ( !m_Ext )
        m_Ext.Reset(new C_Ext());
    return (*m_Ext);
}

void CRNA_ref_Base::Reset(void)
{
    ResetType();
    ResetPseudo();
    ResetExt();
}

BEGIN_NAMED_BASE_CLASS_INFO("RNA-ref", CRNA_ref)
{
    SET_CLASS_MODULE("NCBI-RNA");
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("pseudo", m_Pseudo)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("ext", m_Ext, C_Ext)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CRNA_ref_Base::CRNA_ref_Base(void)
    : m_Type((EType)(0)), m_Pseudo(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CRNA_ref_Base::~CRNA_ref_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

