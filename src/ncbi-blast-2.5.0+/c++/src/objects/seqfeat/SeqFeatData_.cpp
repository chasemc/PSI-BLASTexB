/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/SeqFeatData.hpp>
#include <objects/general/User_object.hpp>
#include <objects/seq/Numbering.hpp>
#include <objects/seq/Pubdesc.hpp>
#include <objects/seqfeat/BioSource.hpp>
#include <objects/seqfeat/Cdregion.hpp>
#include <objects/seqfeat/Clone_ref.hpp>
#include <objects/seqfeat/Gene_ref.hpp>
#include <objects/seqfeat/Imp_feat.hpp>
#include <objects/seqfeat/Org_ref.hpp>
#include <objects/seqfeat/Prot_ref.hpp>
#include <objects/seqfeat/RNA_ref.hpp>
#include <objects/seqfeat/Rsite_ref.hpp>
#include <objects/seqfeat/Txinit.hpp>
#include <objects/seqfeat/Variation_ref.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSeqFeatData_Base::, EBond, false)
{
    SET_ENUM_INTERNAL_NAME("SeqFeatData", "bond");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("disulfide", eBond_disulfide);
    ADD_ENUM_VALUE("thiolester", eBond_thiolester);
    ADD_ENUM_VALUE("xlink", eBond_xlink);
    ADD_ENUM_VALUE("thioether", eBond_thioether);
    ADD_ENUM_VALUE("other", eBond_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CSeqFeatData_Base::, ESite, false)
{
    SET_ENUM_INTERNAL_NAME("SeqFeatData", "site");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("active", eSite_active);
    ADD_ENUM_VALUE("binding", eSite_binding);
    ADD_ENUM_VALUE("cleavage", eSite_cleavage);
    ADD_ENUM_VALUE("inhibit", eSite_inhibit);
    ADD_ENUM_VALUE("modified", eSite_modified);
    ADD_ENUM_VALUE("glycosylation", eSite_glycosylation);
    ADD_ENUM_VALUE("myristoylation", eSite_myristoylation);
    ADD_ENUM_VALUE("mutagenized", eSite_mutagenized);
    ADD_ENUM_VALUE("metal-binding", eSite_metal_binding);
    ADD_ENUM_VALUE("phosphorylation", eSite_phosphorylation);
    ADD_ENUM_VALUE("acetylation", eSite_acetylation);
    ADD_ENUM_VALUE("amidation", eSite_amidation);
    ADD_ENUM_VALUE("methylation", eSite_methylation);
    ADD_ENUM_VALUE("hydroxylation", eSite_hydroxylation);
    ADD_ENUM_VALUE("sulfatation", eSite_sulfatation);
    ADD_ENUM_VALUE("oxidative-deamination", eSite_oxidative_deamination);
    ADD_ENUM_VALUE("pyrrolidone-carboxylic-acid", eSite_pyrrolidone_carboxylic_acid);
    ADD_ENUM_VALUE("gamma-carboxyglutamic-acid", eSite_gamma_carboxyglutamic_acid);
    ADD_ENUM_VALUE("blocked", eSite_blocked);
    ADD_ENUM_VALUE("lipid-binding", eSite_lipid_binding);
    ADD_ENUM_VALUE("np-binding", eSite_np_binding);
    ADD_ENUM_VALUE("dna-binding", eSite_dna_binding);
    ADD_ENUM_VALUE("signal-peptide", eSite_signal_peptide);
    ADD_ENUM_VALUE("transit-peptide", eSite_transit_peptide);
    ADD_ENUM_VALUE("transmembrane-region", eSite_transmembrane_region);
    ADD_ENUM_VALUE("nitrosylation", eSite_nitrosylation);
    ADD_ENUM_VALUE("other", eSite_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CSeqFeatData_Base::, EPsec_str, false)
{
    SET_ENUM_INTERNAL_NAME("SeqFeatData", "psec-str");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("helix", ePsec_str_helix);
    ADD_ENUM_VALUE("sheet", ePsec_str_sheet);
    ADD_ENUM_VALUE("turn", ePsec_str_turn);
}
END_ENUM_INFO

void CSeqFeatData_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqFeatData_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Het:
        m_Het.Destruct();
        break;
    case e_Region:
    case e_Non_std_residue:
        m_string.Destruct();
        break;
    case e_Gene:
    case e_Org:
    case e_Cdregion:
    case e_Prot:
    case e_Rna:
    case e_Pub:
    case e_Seq:
    case e_Imp:
    case e_Rsite:
    case e_User:
    case e_Txinit:
    case e_Num:
    case e_Biosrc:
    case e_Clone:
    case e_Variation:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqFeatData_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Gene:
        (m_object = new(pool) ncbi::objects::CGene_ref())->AddReference();
        break;
    case e_Org:
        (m_object = new(pool) ncbi::objects::COrg_ref())->AddReference();
        break;
    case e_Cdregion:
        (m_object = new(pool) ncbi::objects::CCdregion())->AddReference();
        break;
    case e_Prot:
        (m_object = new(pool) ncbi::objects::CProt_ref())->AddReference();
        break;
    case e_Rna:
        (m_object = new(pool) ncbi::objects::CRNA_ref())->AddReference();
        break;
    case e_Pub:
        (m_object = new(pool) ncbi::objects::CPubdesc())->AddReference();
        break;
    case e_Seq:
        (m_object = new(pool) ncbi::objects::CSeq_loc())->AddReference();
        break;
    case e_Imp:
        (m_object = new(pool) ncbi::objects::CImp_feat())->AddReference();
        break;
    case e_Bond:
        m_Bond = (EBond)(0);
        break;
    case e_Site:
        m_Site = (ESite)(0);
        break;
    case e_Rsite:
        (m_object = new(pool) ncbi::objects::CRsite_ref())->AddReference();
        break;
    case e_User:
        (m_object = new(pool) ncbi::objects::CUser_object())->AddReference();
        break;
    case e_Txinit:
        (m_object = new(pool) ncbi::objects::CTxinit())->AddReference();
        break;
    case e_Num:
        (m_object = new(pool) ncbi::objects::CNumbering())->AddReference();
        break;
    case e_Psec_str:
        m_Psec_str = (EPsec_str)(0);
        break;
    case e_Het:
        m_Het.Construct();
        break;
    case e_Biosrc:
        (m_object = new(pool) ncbi::objects::CBioSource())->AddReference();
        break;
    case e_Clone:
        (m_object = new(pool) ncbi::objects::CClone_ref())->AddReference();
        break;
    case e_Variation:
        (m_object = new(pool) ncbi::objects::CVariation_ref())->AddReference();
        break;
    case e_Region:
    case e_Non_std_residue:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqFeatData_Base::sm_SelectionNames[] = {
    "not set",
    "gene",
    "org",
    "cdregion",
    "prot",
    "rna",
    "pub",
    "seq",
    "imp",
    "region",
    "comment",
    "bond",
    "site",
    "rsite",
    "user",
    "txinit",
    "num",
    "psec-str",
    "non-std-residue",
    "het",
    "biosrc",
    "clone",
    "variation"
};

NCBI_NS_STD::string CSeqFeatData_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqFeatData_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeqFeatData_Base::TGene& CSeqFeatData_Base::GetGene(void) const
{
    CheckSelected(e_Gene);
    return *static_cast<const TGene*>(m_object);
}

CSeqFeatData_Base::TGene& CSeqFeatData_Base::SetGene(void)
{
    Select(e_Gene, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGene*>(m_object);
}

void CSeqFeatData_Base::SetGene(CSeqFeatData_Base::TGene& value)
{
    TGene* ptr = &value;
    if ( m_choice != e_Gene || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Gene;
    }
}

const CSeqFeatData_Base::TOrg& CSeqFeatData_Base::GetOrg(void) const
{
    CheckSelected(e_Org);
    return *static_cast<const TOrg*>(m_object);
}

CSeqFeatData_Base::TOrg& CSeqFeatData_Base::SetOrg(void)
{
    Select(e_Org, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TOrg*>(m_object);
}

void CSeqFeatData_Base::SetOrg(CSeqFeatData_Base::TOrg& value)
{
    TOrg* ptr = &value;
    if ( m_choice != e_Org || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Org;
    }
}

const CSeqFeatData_Base::TCdregion& CSeqFeatData_Base::GetCdregion(void) const
{
    CheckSelected(e_Cdregion);
    return *static_cast<const TCdregion*>(m_object);
}

CSeqFeatData_Base::TCdregion& CSeqFeatData_Base::SetCdregion(void)
{
    Select(e_Cdregion, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCdregion*>(m_object);
}

void CSeqFeatData_Base::SetCdregion(CSeqFeatData_Base::TCdregion& value)
{
    TCdregion* ptr = &value;
    if ( m_choice != e_Cdregion || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Cdregion;
    }
}

const CSeqFeatData_Base::TProt& CSeqFeatData_Base::GetProt(void) const
{
    CheckSelected(e_Prot);
    return *static_cast<const TProt*>(m_object);
}

CSeqFeatData_Base::TProt& CSeqFeatData_Base::SetProt(void)
{
    Select(e_Prot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TProt*>(m_object);
}

void CSeqFeatData_Base::SetProt(CSeqFeatData_Base::TProt& value)
{
    TProt* ptr = &value;
    if ( m_choice != e_Prot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Prot;
    }
}

const CSeqFeatData_Base::TRna& CSeqFeatData_Base::GetRna(void) const
{
    CheckSelected(e_Rna);
    return *static_cast<const TRna*>(m_object);
}

CSeqFeatData_Base::TRna& CSeqFeatData_Base::SetRna(void)
{
    Select(e_Rna, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRna*>(m_object);
}

void CSeqFeatData_Base::SetRna(CSeqFeatData_Base::TRna& value)
{
    TRna* ptr = &value;
    if ( m_choice != e_Rna || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Rna;
    }
}

const CSeqFeatData_Base::TPub& CSeqFeatData_Base::GetPub(void) const
{
    CheckSelected(e_Pub);
    return *static_cast<const TPub*>(m_object);
}

CSeqFeatData_Base::TPub& CSeqFeatData_Base::SetPub(void)
{
    Select(e_Pub, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPub*>(m_object);
}

void CSeqFeatData_Base::SetPub(CSeqFeatData_Base::TPub& value)
{
    TPub* ptr = &value;
    if ( m_choice != e_Pub || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pub;
    }
}

const CSeqFeatData_Base::TSeq& CSeqFeatData_Base::GetSeq(void) const
{
    CheckSelected(e_Seq);
    return *static_cast<const TSeq*>(m_object);
}

CSeqFeatData_Base::TSeq& CSeqFeatData_Base::SetSeq(void)
{
    Select(e_Seq, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq*>(m_object);
}

void CSeqFeatData_Base::SetSeq(CSeqFeatData_Base::TSeq& value)
{
    TSeq* ptr = &value;
    if ( m_choice != e_Seq || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq;
    }
}

const CSeqFeatData_Base::TImp& CSeqFeatData_Base::GetImp(void) const
{
    CheckSelected(e_Imp);
    return *static_cast<const TImp*>(m_object);
}

CSeqFeatData_Base::TImp& CSeqFeatData_Base::SetImp(void)
{
    Select(e_Imp, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TImp*>(m_object);
}

void CSeqFeatData_Base::SetImp(CSeqFeatData_Base::TImp& value)
{
    TImp* ptr = &value;
    if ( m_choice != e_Imp || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Imp;
    }
}

void CSeqFeatData_Base::SetRegion(const CSeqFeatData_Base::TRegion& value)
{
    Select(e_Region, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CSeqFeatData_Base::TRsite& CSeqFeatData_Base::GetRsite(void) const
{
    CheckSelected(e_Rsite);
    return *static_cast<const TRsite*>(m_object);
}

CSeqFeatData_Base::TRsite& CSeqFeatData_Base::SetRsite(void)
{
    Select(e_Rsite, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRsite*>(m_object);
}

void CSeqFeatData_Base::SetRsite(CSeqFeatData_Base::TRsite& value)
{
    TRsite* ptr = &value;
    if ( m_choice != e_Rsite || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Rsite;
    }
}

const CSeqFeatData_Base::TUser& CSeqFeatData_Base::GetUser(void) const
{
    CheckSelected(e_User);
    return *static_cast<const TUser*>(m_object);
}

CSeqFeatData_Base::TUser& CSeqFeatData_Base::SetUser(void)
{
    Select(e_User, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TUser*>(m_object);
}

void CSeqFeatData_Base::SetUser(CSeqFeatData_Base::TUser& value)
{
    TUser* ptr = &value;
    if ( m_choice != e_User || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_User;
    }
}

const CSeqFeatData_Base::TTxinit& CSeqFeatData_Base::GetTxinit(void) const
{
    CheckSelected(e_Txinit);
    return *static_cast<const TTxinit*>(m_object);
}

CSeqFeatData_Base::TTxinit& CSeqFeatData_Base::SetTxinit(void)
{
    Select(e_Txinit, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTxinit*>(m_object);
}

void CSeqFeatData_Base::SetTxinit(CSeqFeatData_Base::TTxinit& value)
{
    TTxinit* ptr = &value;
    if ( m_choice != e_Txinit || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Txinit;
    }
}

const CSeqFeatData_Base::TNum& CSeqFeatData_Base::GetNum(void) const
{
    CheckSelected(e_Num);
    return *static_cast<const TNum*>(m_object);
}

CSeqFeatData_Base::TNum& CSeqFeatData_Base::SetNum(void)
{
    Select(e_Num, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TNum*>(m_object);
}

void CSeqFeatData_Base::SetNum(CSeqFeatData_Base::TNum& value)
{
    TNum* ptr = &value;
    if ( m_choice != e_Num || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Num;
    }
}

void CSeqFeatData_Base::SetNon_std_residue(const CSeqFeatData_Base::TNon_std_residue& value)
{
    Select(e_Non_std_residue, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CSeqFeatData_Base::SetHet(const CSeqFeatData_Base::THet& value)
{
    Select(e_Het, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_Het = value;
}

const CSeqFeatData_Base::TBiosrc& CSeqFeatData_Base::GetBiosrc(void) const
{
    CheckSelected(e_Biosrc);
    return *static_cast<const TBiosrc*>(m_object);
}

CSeqFeatData_Base::TBiosrc& CSeqFeatData_Base::SetBiosrc(void)
{
    Select(e_Biosrc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBiosrc*>(m_object);
}

void CSeqFeatData_Base::SetBiosrc(CSeqFeatData_Base::TBiosrc& value)
{
    TBiosrc* ptr = &value;
    if ( m_choice != e_Biosrc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Biosrc;
    }
}

const CSeqFeatData_Base::TClone& CSeqFeatData_Base::GetClone(void) const
{
    CheckSelected(e_Clone);
    return *static_cast<const TClone*>(m_object);
}

CSeqFeatData_Base::TClone& CSeqFeatData_Base::SetClone(void)
{
    Select(e_Clone, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TClone*>(m_object);
}

void CSeqFeatData_Base::SetClone(CSeqFeatData_Base::TClone& value)
{
    TClone* ptr = &value;
    if ( m_choice != e_Clone || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Clone;
    }
}

const CSeqFeatData_Base::TVariation& CSeqFeatData_Base::GetVariation(void) const
{
    CheckSelected(e_Variation);
    return *static_cast<const TVariation*>(m_object);
}

CSeqFeatData_Base::TVariation& CSeqFeatData_Base::SetVariation(void)
{
    Select(e_Variation, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TVariation*>(m_object);
}

void CSeqFeatData_Base::SetVariation(CSeqFeatData_Base::TVariation& value)
{
    TVariation* ptr = &value;
    if ( m_choice != e_Variation || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Variation;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("SeqFeatData", CSeqFeatData)
{
    SET_CHOICE_MODULE("NCBI-Seqfeat");
    ADD_NAMED_REF_CHOICE_VARIANT("gene", m_object, CGene_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("org", m_object, COrg_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("cdregion", m_object, CCdregion);
    ADD_NAMED_REF_CHOICE_VARIANT("prot", m_object, CProt_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("rna", m_object, CRNA_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("pub", m_object, CPubdesc);
    ADD_NAMED_REF_CHOICE_VARIANT("seq", m_object, CSeq_loc);
    ADD_NAMED_REF_CHOICE_VARIANT("imp", m_object, CImp_feat);
    ADD_NAMED_BUF_CHOICE_VARIANT("region", m_string, STD, (string));
    ADD_NAMED_NULL_CHOICE_VARIANT("comment", null, ());
    ADD_NAMED_ENUM_CHOICE_VARIANT("bond", m_Bond, EBond);
    ADD_NAMED_ENUM_CHOICE_VARIANT("site", m_Site, ESite);
    ADD_NAMED_REF_CHOICE_VARIANT("rsite", m_object, CRsite_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("user", m_object, CUser_object);
    ADD_NAMED_REF_CHOICE_VARIANT("txinit", m_object, CTxinit);
    ADD_NAMED_REF_CHOICE_VARIANT("num", m_object, CNumbering);
    ADD_NAMED_ENUM_CHOICE_VARIANT("psec-str", m_Psec_str, EPsec_str);
    ADD_NAMED_BUF_CHOICE_VARIANT("non-std-residue", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("het", m_Het, CLASS, (CHeterogen));
    ADD_NAMED_REF_CHOICE_VARIANT("biosrc", m_object, CBioSource);
    ADD_NAMED_REF_CHOICE_VARIANT("clone", m_object, CClone_ref);
    ADD_NAMED_REF_CHOICE_VARIANT("variation", m_object, CVariation_ref);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqFeatData_Base::CSeqFeatData_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqFeatData_Base::~CSeqFeatData_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

