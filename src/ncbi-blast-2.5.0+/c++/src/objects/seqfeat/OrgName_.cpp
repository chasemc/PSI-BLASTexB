/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/OrgName.hpp>
#include <objects/seqfeat/BinomialOrgName.hpp>
#include <objects/seqfeat/MultiOrgName.hpp>
#include <objects/seqfeat/OrgMod.hpp>
#include <objects/seqfeat/PartialOrgName.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void COrgName_Base::C_Name::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void COrgName_Base::C_Name::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Virus:
        m_string.Destruct();
        break;
    case e_Binomial:
    case e_Hybrid:
    case e_Namedhybrid:
    case e_Partial:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void COrgName_Base::C_Name::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Binomial:
        (m_object = new(pool) ncbi::objects::CBinomialOrgName())->AddReference();
        break;
    case e_Hybrid:
        (m_object = new(pool) ncbi::objects::CMultiOrgName())->AddReference();
        break;
    case e_Namedhybrid:
        (m_object = new(pool) ncbi::objects::CBinomialOrgName())->AddReference();
        break;
    case e_Partial:
        (m_object = new(pool) ncbi::objects::CPartialOrgName())->AddReference();
        break;
    case e_Virus:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const COrgName_Base::C_Name::sm_SelectionNames[] = {
    "not set",
    "binomial",
    "virus",
    "hybrid",
    "namedhybrid",
    "partial"
};

NCBI_NS_STD::string COrgName_Base::C_Name::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void COrgName_Base::C_Name::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const COrgName_Base::C_Name::TBinomial& COrgName_Base::C_Name::GetBinomial(void) const
{
    CheckSelected(e_Binomial);
    return *static_cast<const TBinomial*>(m_object);
}

COrgName_Base::C_Name::TBinomial& COrgName_Base::C_Name::SetBinomial(void)
{
    Select(e_Binomial, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBinomial*>(m_object);
}

void COrgName_Base::C_Name::SetBinomial(COrgName_Base::C_Name::TBinomial& value)
{
    TBinomial* ptr = &value;
    if ( m_choice != e_Binomial || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Binomial;
    }
}

void COrgName_Base::C_Name::SetVirus(const COrgName_Base::C_Name::TVirus& value)
{
    Select(e_Virus, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const COrgName_Base::C_Name::THybrid& COrgName_Base::C_Name::GetHybrid(void) const
{
    CheckSelected(e_Hybrid);
    return *static_cast<const THybrid*>(m_object);
}

COrgName_Base::C_Name::THybrid& COrgName_Base::C_Name::SetHybrid(void)
{
    Select(e_Hybrid, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<THybrid*>(m_object);
}

void COrgName_Base::C_Name::SetHybrid(COrgName_Base::C_Name::THybrid& value)
{
    THybrid* ptr = &value;
    if ( m_choice != e_Hybrid || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Hybrid;
    }
}

const COrgName_Base::C_Name::TNamedhybrid& COrgName_Base::C_Name::GetNamedhybrid(void) const
{
    CheckSelected(e_Namedhybrid);
    return *static_cast<const TNamedhybrid*>(m_object);
}

COrgName_Base::C_Name::TNamedhybrid& COrgName_Base::C_Name::SetNamedhybrid(void)
{
    Select(e_Namedhybrid, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TNamedhybrid*>(m_object);
}

void COrgName_Base::C_Name::SetNamedhybrid(COrgName_Base::C_Name::TNamedhybrid& value)
{
    TNamedhybrid* ptr = &value;
    if ( m_choice != e_Namedhybrid || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Namedhybrid;
    }
}

const COrgName_Base::C_Name::TPartial& COrgName_Base::C_Name::GetPartial(void) const
{
    CheckSelected(e_Partial);
    return *static_cast<const TPartial*>(m_object);
}

COrgName_Base::C_Name::TPartial& COrgName_Base::C_Name::SetPartial(void)
{
    Select(e_Partial, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPartial*>(m_object);
}

void COrgName_Base::C_Name::SetPartial(COrgName_Base::C_Name::TPartial& value)
{
    TPartial* ptr = &value;
    if ( m_choice != e_Partial || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Partial;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", COrgName_Base::C_Name)
{
    SET_INTERNAL_NAME("OrgName", "name");
    SET_CHOICE_MODULE("NCBI-Organism");
    ADD_NAMED_REF_CHOICE_VARIANT("binomial", m_object, CBinomialOrgName);
    ADD_NAMED_BUF_CHOICE_VARIANT("virus", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("hybrid", m_object, CMultiOrgName);
    ADD_NAMED_REF_CHOICE_VARIANT("namedhybrid", m_object, CBinomialOrgName);
    ADD_NAMED_REF_CHOICE_VARIANT("partial", m_object, CPartialOrgName);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
COrgName_Base::C_Name::C_Name(void)
    : m_choice(e_not_set)
{
}

// destructor
COrgName_Base::C_Name::~C_Name(void)
{
    Reset();
}


void COrgName_Base::ResetName(void)
{
    m_Name.Reset();
}

void COrgName_Base::SetName(COrgName_Base::TName& value)
{
    m_Name.Reset(&value);
}

COrgName_Base::TName& COrgName_Base::SetName(void)
{
    if ( !m_Name )
        m_Name.Reset(new C_Name());
    return (*m_Name);
}

void COrgName_Base::ResetAttrib(void)
{
    m_Attrib.erase();
    m_set_State[0] &= ~0xc;
}

void COrgName_Base::ResetMod(void)
{
    m_Mod.clear();
    m_set_State[0] &= ~0x30;
}

void COrgName_Base::ResetLineage(void)
{
    m_Lineage.erase();
    m_set_State[0] &= ~0xc0;
}

void COrgName_Base::ResetDiv(void)
{
    m_Div.erase();
    m_set_State[0] &= ~0x3000;
}

void COrgName_Base::Reset(void)
{
    ResetName();
    ResetAttrib();
    ResetMod();
    ResetLineage();
    ResetGcode();
    ResetMgcode();
    ResetDiv();
    ResetPgcode();
}

BEGIN_NAMED_BASE_CLASS_INFO("OrgName", COrgName)
{
    SET_CLASS_MODULE("NCBI-Organism");
    ADD_NAMED_REF_MEMBER("name", m_Name, C_Name)->SetOptional();
    ADD_NAMED_STD_MEMBER("attrib", m_Attrib)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("mod", m_Mod, STL_list, (STL_CRef, (CLASS, (COrgMod))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("lineage", m_Lineage)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gcode", m_Gcode)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("mgcode", m_Mgcode)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("div", m_Div)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pgcode", m_Pgcode)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
COrgName_Base::COrgName_Base(void)
    : m_Gcode(0), m_Mgcode(0), m_Pgcode(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
COrgName_Base::~COrgName_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

