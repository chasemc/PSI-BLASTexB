/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'blast.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/blast/blastclient.hpp>
#include <objects/blast/Blas_get_searc_resul_reply.hpp>
#include <objects/blast/Blas_get_windo_taxid_reply.hpp>
#include <objects/blast/Blast4_finish_params_reply.hpp>
#include <objects/blast/Blast4_get_databa_ex_reply.hpp>
#include <objects/blast/Blast4_get_databases_reply.hpp>
#include <objects/blast/Blast4_get_matrices_reply.hpp>
#include <objects/blast/Blast4_get_parameter_reply.hpp>
#include <objects/blast/Blast4_get_paramsets_reply.hpp>
#include <objects/blast/Blast4_get_programs_reply.hpp>
#include <objects/blast/Blast4_get_seq_parts_reply.hpp>
#include <objects/blast/Blast4_get_sequences_reply.hpp>
#include <objects/blast/Blast4_queue_search_reply.hpp>
#include <objects/blast/Blast_get_proto_info_reply.hpp>
#include <objects/blast/Blast_get_reque_info_reply.hpp>
#include <objects/blast/Blast_get_searc_info_reply.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CBlast4Client_Base::Ask(const CBlast4Client_Base::TRequestChoice& req, CBlast4Client_Base::TReply& reply)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetBody().Assign(req);
    Ask(request, reply);
}


void CBlast4Client_Base::Ask(const CBlast4Client_Base::TRequestChoice& req, CBlast4Client_Base::TReply& reply, CBlast4Client_Base::TReplyChoice::E_Choice wanted)
{
    TRequest request;
    request.Assign(*m_DefaultRequest);
    request.SetBody().Assign(req);
    Ask(request, reply, wanted);
}


void CBlast4Client_Base::Ask(const CBlast4Client_Base::TRequest& request, CBlast4Client_Base::TReply& reply, CBlast4Client_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

CRef<CBlast4_finish_params_reply> CBlast4Client_Base::AskFinish_params(const CBlast4_finish_params_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetFinish_params(const_cast<CBlast4_finish_params_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Finish_params);
    return CRef<CBlast4_finish_params_reply>(&x_Choice(*reply).SetFinish_params());
}

CRef<CBlast4_get_databases_reply> CBlast4Client_Base::AskGet_databases(CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_databases();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_databases);
    return CRef<CBlast4_get_databases_reply>(&x_Choice(*reply).SetGet_databases());
}

CRef<CBlast4_get_matrices_reply> CBlast4Client_Base::AskGet_matrices(CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_matrices();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_matrices);
    return CRef<CBlast4_get_matrices_reply>(&x_Choice(*reply).SetGet_matrices());
}

CRef<CBlast4_get_parameters_reply> CBlast4Client_Base::AskGet_parameters(CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_parameters();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_parameters);
    return CRef<CBlast4_get_parameters_reply>(&x_Choice(*reply).SetGet_parameters());
}

CRef<CBlast4_get_paramsets_reply> CBlast4Client_Base::AskGet_paramsets(CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_paramsets();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_paramsets);
    return CRef<CBlast4_get_paramsets_reply>(&x_Choice(*reply).SetGet_paramsets());
}

CRef<CBlast4_get_programs_reply> CBlast4Client_Base::AskGet_programs(CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_programs();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_programs);
    return CRef<CBlast4_get_programs_reply>(&x_Choice(*reply).SetGet_programs());
}

CRef<CBlast4_get_search_results_reply> CBlast4Client_Base::AskGet_search_results(const CBlast4_get_search_results_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_search_results(const_cast<CBlast4_get_search_results_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_search_results);
    return CRef<CBlast4_get_search_results_reply>(&x_Choice(*reply).SetGet_search_results());
}

CRef<CBlast4_get_sequences_reply> CBlast4Client_Base::AskGet_sequences(const CBlast4_get_sequences_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_sequences(const_cast<CBlast4_get_sequences_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_sequences);
    return CRef<CBlast4_get_sequences_reply>(&x_Choice(*reply).SetGet_sequences());
}

CRef<CBlast4_queue_search_reply> CBlast4Client_Base::AskQueue_search(const CBlast4_queue_search_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetQueue_search(const_cast<CBlast4_queue_search_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Queue_search);
    return CRef<CBlast4_queue_search_reply>(&x_Choice(*reply).SetQueue_search());
}

CRef<CBlast4_get_request_info_reply> CBlast4Client_Base::AskGet_request_info(const CBlast4_get_request_info_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_request_info(const_cast<CBlast4_get_request_info_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_request_info);
    return CRef<CBlast4_get_request_info_reply>(&x_Choice(*reply).SetGet_request_info());
}

CRef<CBlast4_get_seq_parts_reply> CBlast4Client_Base::AskGet_sequence_parts(const CBlast4_get_seq_parts_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_sequence_parts(const_cast<CBlast4_get_seq_parts_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_sequence_parts);
    return CRef<CBlast4_get_seq_parts_reply>(&x_Choice(*reply).SetGet_sequence_parts());
}

CRef<CBlast4_get_windowmasked_taxids_reply> CBlast4Client_Base::AskGet_windowmasked_taxids(CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_windowmasked_taxids();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_windowmasked_taxids);
    return CRef<CBlast4_get_windowmasked_taxids_reply>(&x_Choice(*reply).SetGet_windowmasked_taxids());
}

CRef<CBlast4_get_protocol_info_reply> CBlast4Client_Base::AskGet_protocol_info(const CBlast4_get_protocol_info_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_protocol_info(const_cast<CBlast4_get_protocol_info_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_protocol_info);
    return CRef<CBlast4_get_protocol_info_reply>(&x_Choice(*reply).SetGet_protocol_info());
}

CRef<CBlast4_get_search_info_reply> CBlast4Client_Base::AskGet_search_info(const CBlast4_get_search_info_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_search_info(const_cast<CBlast4_get_search_info_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_search_info);
    return CRef<CBlast4_get_search_info_reply>(&x_Choice(*reply).SetGet_search_info());
}

CRef<CBlast4_get_databases_ex_reply> CBlast4Client_Base::AskGet_databases_ex(const CBlast4_get_databases_ex_request& req, CBlast4Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_databases_ex(const_cast<CBlast4_get_databases_ex_request&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_databases_ex);
    return CRef<CBlast4_get_databases_ex_reply>(&x_Choice(*reply).SetGet_databases_ex());
}

// constructor
CBlast4Client_Base::CBlast4Client_Base(void)
    : Tparent("blast4"), m_DefaultRequest(new TRequest)
{
}

// destructor
CBlast4Client_Base::~CBlast4Client_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

