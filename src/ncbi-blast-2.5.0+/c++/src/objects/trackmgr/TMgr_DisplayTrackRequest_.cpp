/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'trackmgr.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/trackmgr/TMgr_DisplayTrackRequest.hpp>
#include <objects/trackmgr/TMgr_AttrSpec.hpp>
#include <objects/trackmgr/TMgr_ClientInfo.hpp>
#include <objects/trackmgr/TMgr_GenomeContext.hpp>
#include <objects/trackmgr/TMgr_Identity.hpp>
#include <objects/trackmgr/TMgr_TrackACL_Authorizatio.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CTMgr_DisplayTrackRequest_Base::C_Flags::Reset(void)
{
    ResetInclude_stats();
    ResetInclude_default_tracks();
    ResetInclude_track_items();
}

BEGIN_NAMED_CLASS_INFO("", CTMgr_DisplayTrackRequest_Base::C_Flags)
{
    SET_INTERNAL_NAME("TMgr-DisplayTrackRequest", "flags");
    SET_CLASS_MODULE("NCBI-TrackManager");
    ADD_NAMED_STD_MEMBER("include-stats", m_Include_stats)->SetDefault(new TInclude_stats(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("include-default-tracks", m_Include_default_tracks)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("include-track-items", m_Include_track_items)->SetDefault(new TInclude_track_items(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CTMgr_DisplayTrackRequest_Base::C_Flags::C_Flags(void)
    : m_Include_stats(false), m_Include_default_tracks(0), m_Include_track_items(false)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CTMgr_DisplayTrackRequest_Base::C_Flags::~C_Flags(void)
{
}


void CTMgr_DisplayTrackRequest_Base::ResetClient(void)
{
    if ( !m_Client ) {
        m_Client.Reset(new TClient());
        return;
    }
    (*m_Client).Reset();
}

void CTMgr_DisplayTrackRequest_Base::SetClient(CTMgr_DisplayTrackRequest_Base::TClient& value)
{
    m_Client.Reset(&value);
}

void CTMgr_DisplayTrackRequest_Base::ResetGenome_context(void)
{
    if ( !m_Genome_context ) {
        m_Genome_context.Reset(new TGenome_context());
        return;
    }
    (*m_Genome_context).Reset();
}

void CTMgr_DisplayTrackRequest_Base::SetGenome_context(CTMgr_DisplayTrackRequest_Base::TGenome_context& value)
{
    m_Genome_context.Reset(&value);
}

void CTMgr_DisplayTrackRequest_Base::ResetAttrs(void)
{
    m_Attrs.clear();
    m_set_State[0] &= ~0x30;
}

void CTMgr_DisplayTrackRequest_Base::ResetIdentity(void)
{
    m_Identity.Reset();
}

void CTMgr_DisplayTrackRequest_Base::SetIdentity(CTMgr_DisplayTrackRequest_Base::TIdentity& value)
{
    m_Identity.Reset(&value);
}

CTMgr_DisplayTrackRequest_Base::TIdentity& CTMgr_DisplayTrackRequest_Base::SetIdentity(void)
{
    if ( !m_Identity )
        m_Identity.Reset(new ncbi::objects::CTMgr_Identity());
    return (*m_Identity);
}

void CTMgr_DisplayTrackRequest_Base::ResetAuthorization(void)
{
    m_Authorization.Reset();
}

void CTMgr_DisplayTrackRequest_Base::SetAuthorization(CTMgr_DisplayTrackRequest_Base::TAuthorization& value)
{
    m_Authorization.Reset(&value);
}

CTMgr_DisplayTrackRequest_Base::TAuthorization& CTMgr_DisplayTrackRequest_Base::SetAuthorization(void)
{
    if ( !m_Authorization )
        m_Authorization.Reset(new ncbi::objects::CTMgr_TrackACL_Authorization());
    return (*m_Authorization);
}

void CTMgr_DisplayTrackRequest_Base::ResetFlags(void)
{
    m_Flags.Reset();
}

void CTMgr_DisplayTrackRequest_Base::SetFlags(CTMgr_DisplayTrackRequest_Base::TFlags& value)
{
    m_Flags.Reset(&value);
}

CTMgr_DisplayTrackRequest_Base::TFlags& CTMgr_DisplayTrackRequest_Base::SetFlags(void)
{
    if ( !m_Flags )
        m_Flags.Reset(new C_Flags());
    return (*m_Flags);
}

void CTMgr_DisplayTrackRequest_Base::Reset(void)
{
    ResetClient();
    ResetGenome_context();
    ResetAttrs();
    ResetIdentity();
    ResetAuthorization();
    ResetFlags();
}

BEGIN_NAMED_BASE_CLASS_INFO("TMgr-DisplayTrackRequest", CTMgr_DisplayTrackRequest)
{
    SET_CLASS_MODULE("NCBI-TrackManager");
    ADD_NAMED_REF_MEMBER("client", m_Client, CTMgr_ClientInfo);
    ADD_NAMED_REF_MEMBER("genome-context", m_Genome_context, CTMgr_GenomeContext);
    ADD_NAMED_MEMBER("attrs", m_Attrs, STL_list_set, (STL_CRef, (CLASS, (CTMgr_AttrSpec))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("identity", m_Identity, CTMgr_Identity)->SetOptional();
    ADD_NAMED_REF_MEMBER("authorization", m_Authorization, CTMgr_TrackACL_Authorization)->SetOptional();
    ADD_NAMED_REF_MEMBER("flags", m_Flags, C_Flags)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CTMgr_DisplayTrackRequest_Base::CTMgr_DisplayTrackRequest_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetClient();
        ResetGenome_context();
    }
}

// destructor
CTMgr_DisplayTrackRequest_Base::~CTMgr_DisplayTrackRequest_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

