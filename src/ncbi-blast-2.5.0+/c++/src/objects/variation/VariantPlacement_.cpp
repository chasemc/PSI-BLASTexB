/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'variation.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/variation/VariantPlacement.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/general/Int_fuzz.hpp>
#include <objects/general/Object_id.hpp>
#include <objects/general/User_object.hpp>
#include <objects/seq/Seq_literal.hpp>
#include <objects/seqloc/Seq_loc.hpp>
#include <objects/variation/VariationException.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CVariantPlacement_Base::, EMol, true)
{
    SET_ENUM_INTERNAL_NAME("VariantPlacement", "mol");
    SET_ENUM_MODULE("NCBI-VariationPackage");
    ADD_ENUM_VALUE("unknown", eMol_unknown);
    ADD_ENUM_VALUE("genomic", eMol_genomic);
    ADD_ENUM_VALUE("cdna", eMol_cdna);
    ADD_ENUM_VALUE("rna", eMol_rna);
    ADD_ENUM_VALUE("protein", eMol_protein);
    ADD_ENUM_VALUE("mitochondrion", eMol_mitochondrion);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CVariantPlacement_Base::, EPlacement_method, true)
{
    SET_ENUM_INTERNAL_NAME("VariantPlacement", "placement-method");
    SET_ENUM_MODULE("NCBI-VariationPackage");
    ADD_ENUM_VALUE("projected", ePlacement_method_projected);
    ADD_ENUM_VALUE("asserted", ePlacement_method_asserted);
    ADD_ENUM_VALUE("aligned", ePlacement_method_aligned);
}
END_ENUM_INFO

void CVariantPlacement_Base::ResetLoc(void)
{
    if ( !m_Loc ) {
        m_Loc.Reset(new TLoc());
        return;
    }
    (*m_Loc).Reset();
}

void CVariantPlacement_Base::SetLoc(CVariantPlacement_Base::TLoc& value)
{
    m_Loc.Reset(&value);
}

void CVariantPlacement_Base::ResetStart_offset_fuzz(void)
{
    m_Start_offset_fuzz.Reset();
}

void CVariantPlacement_Base::SetStart_offset_fuzz(CVariantPlacement_Base::TStart_offset_fuzz& value)
{
    m_Start_offset_fuzz.Reset(&value);
}

CVariantPlacement_Base::TStart_offset_fuzz& CVariantPlacement_Base::SetStart_offset_fuzz(void)
{
    if ( !m_Start_offset_fuzz )
        m_Start_offset_fuzz.Reset(new ncbi::objects::CInt_fuzz());
    return (*m_Start_offset_fuzz);
}

void CVariantPlacement_Base::ResetStop_offset_fuzz(void)
{
    m_Stop_offset_fuzz.Reset();
}

void CVariantPlacement_Base::SetStop_offset_fuzz(CVariantPlacement_Base::TStop_offset_fuzz& value)
{
    m_Stop_offset_fuzz.Reset(&value);
}

CVariantPlacement_Base::TStop_offset_fuzz& CVariantPlacement_Base::SetStop_offset_fuzz(void)
{
    if ( !m_Stop_offset_fuzz )
        m_Stop_offset_fuzz.Reset(new ncbi::objects::CInt_fuzz());
    return (*m_Stop_offset_fuzz);
}

void CVariantPlacement_Base::ResetSeq(void)
{
    m_Seq.Reset();
}

void CVariantPlacement_Base::SetSeq(CVariantPlacement_Base::TSeq& value)
{
    m_Seq.Reset(&value);
}

CVariantPlacement_Base::TSeq& CVariantPlacement_Base::SetSeq(void)
{
    if ( !m_Seq )
        m_Seq.Reset(new ncbi::objects::CSeq_literal());
    return (*m_Seq);
}

void CVariantPlacement_Base::ResetAssembly(void)
{
    m_Assembly.Reset();
}

void CVariantPlacement_Base::SetAssembly(CVariantPlacement_Base::TAssembly& value)
{
    m_Assembly.Reset(&value);
}

CVariantPlacement_Base::TAssembly& CVariantPlacement_Base::SetAssembly(void)
{
    if ( !m_Assembly )
        m_Assembly.Reset(new ncbi::objects::CDbtag());
    return (*m_Assembly);
}

void CVariantPlacement_Base::ResetHgvs_name(void)
{
    m_Hgvs_name.erase();
    m_set_State[0] &= ~0x300000;
}

void CVariantPlacement_Base::ResetComment(void)
{
    m_Comment.erase();
    m_set_State[0] &= ~0xc00000;
}

void CVariantPlacement_Base::ResetExceptions(void)
{
    m_Exceptions.clear();
    m_set_State[0] &= ~0x3000000;
}

void CVariantPlacement_Base::ResetDbxrefs(void)
{
    m_Dbxrefs.clear();
    m_set_State[0] &= ~0xc000000;
}

void CVariantPlacement_Base::ResetExt(void)
{
    m_Ext.clear();
    m_set_State[0] &= ~0x30000000;
}

void CVariantPlacement_Base::ResetId(void)
{
    m_Id.Reset();
}

void CVariantPlacement_Base::SetId(CVariantPlacement_Base::TId& value)
{
    m_Id.Reset(&value);
}

CVariantPlacement_Base::TId& CVariantPlacement_Base::SetId(void)
{
    if ( !m_Id )
        m_Id.Reset(new ncbi::objects::CObject_id());
    return (*m_Id);
}

void CVariantPlacement_Base::ResetParent_id(void)
{
    m_Parent_id.Reset();
}

void CVariantPlacement_Base::SetParent_id(CVariantPlacement_Base::TParent_id& value)
{
    m_Parent_id.Reset(&value);
}

CVariantPlacement_Base::TParent_id& CVariantPlacement_Base::SetParent_id(void)
{
    if ( !m_Parent_id )
        m_Parent_id.Reset(new ncbi::objects::CObject_id());
    return (*m_Parent_id);
}

void CVariantPlacement_Base::ResetSo_terms(void)
{
    m_So_terms.clear();
    m_set_State[1] &= ~0x30;
}

void CVariantPlacement_Base::Reset(void)
{
    ResetLoc();
    ResetMol();
    ResetPlacement_method();
    ResetStart_offset();
    ResetStart_offset_fuzz();
    ResetStop_offset();
    ResetStop_offset_fuzz();
    ResetFrame();
    ResetSeq();
    ResetAssembly();
    ResetHgvs_name();
    ResetComment();
    ResetExceptions();
    ResetDbxrefs();
    ResetExt();
    ResetGene_location();
    ResetId();
    ResetParent_id();
    ResetSo_terms();
}

BEGIN_NAMED_BASE_CLASS_INFO("VariantPlacement", CVariantPlacement)
{
    SET_CLASS_MODULE("NCBI-VariationPackage");
    ADD_NAMED_REF_MEMBER("loc", m_Loc, CSeq_loc);
    ADD_NAMED_ENUM_MEMBER("mol", m_Mol, EMol)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("placement-method", m_Placement_method, EPlacement_method)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("start-offset", m_Start_offset)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("start-offset-fuzz", m_Start_offset_fuzz, CInt_fuzz)->SetOptional();
    ADD_NAMED_STD_MEMBER("stop-offset", m_Stop_offset)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("stop-offset-fuzz", m_Stop_offset_fuzz, CInt_fuzz)->SetOptional();
    ADD_NAMED_STD_MEMBER("frame", m_Frame)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("seq", m_Seq, CSeq_literal)->SetOptional();
    ADD_NAMED_REF_MEMBER("assembly", m_Assembly, CDbtag)->SetOptional();
    ADD_NAMED_STD_MEMBER("hgvs-name", m_Hgvs_name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("comment", m_Comment)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("exceptions", m_Exceptions, STL_list_set, (STL_CRef, (CLASS, (CVariationException))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("dbxrefs", m_Dbxrefs, STL_list_set, (STL_CRef, (CLASS, (CDbtag))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("ext", m_Ext, STL_list_set, (STL_CRef, (CLASS, (CUser_object))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gene-location", m_Gene_location)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("id", m_Id, CObject_id)->SetOptional();
    ADD_NAMED_REF_MEMBER("parent-id", m_Parent_id, CObject_id)->SetOptional();
    ADD_NAMED_MEMBER("so-terms", m_So_terms, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CVariantPlacement_Base::CVariantPlacement_Base(void)
    : m_Mol((EMol)(0)), m_Placement_method((EPlacement_method)(0)), m_Start_offset(0), m_Stop_offset(0), m_Frame(0), m_Gene_location(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetLoc();
    }
}

// destructor
CVariantPlacement_Base::~CVariantPlacement_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

