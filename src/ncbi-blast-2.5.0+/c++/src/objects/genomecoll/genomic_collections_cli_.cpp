/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'gencoll_client.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/genomecoll/genomic_collections_cli.hpp>
#include <objects/genomecoll/GCClient_AssembliesForSequ.hpp>
#include <objects/genomecoll/GCClient_EquivalentAssembl.hpp>
#include <objects/genomecoll/GC_Assembly.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGenomicCollectionsService_Base::Ask(const CGenomicCollectionsService_Base::TRequest& request, CGenomicCollectionsService_Base::TReply& reply, CGenomicCollectionsService_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

CRef<CGC_Assembly> CGenomicCollectionsService_Base::AskGet_assembly(const CGCClient_GetAssemblyRequest& req, CGenomicCollectionsService_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_assembly(const_cast<CGCClient_GetAssemblyRequest&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_assembly);
    return CRef<CGC_Assembly>(&x_Choice(*reply).SetGet_assembly());
}

string CGenomicCollectionsService_Base::AskGet_chrtype_valid(const CGCClient_ValidateChrTypeLocRequest& req, CGenomicCollectionsService_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_chrtype_valid(const_cast<CGCClient_ValidateChrTypeLocRequest&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_chrtype_valid);
    return x_Choice(*reply).GetGet_chrtype_valid();
}

CRef<CGCClient_AssembliesForSequences> CGenomicCollectionsService_Base::AskGet_best_assembly(const CGCClient_FindBestAssemblyRequest& req, CGenomicCollectionsService_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_best_assembly(const_cast<CGCClient_FindBestAssemblyRequest&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_best_assembly);
    return CRef<CGCClient_AssembliesForSequences>(&x_Choice(*reply).SetGet_best_assembly());
}

CRef<CGCClient_EquivalentAssemblies> CGenomicCollectionsService_Base::AskGet_equivalent_assemblies(const CGCClient_GetEquivalentAssembliesRequest& req, CGenomicCollectionsService_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_equivalent_assemblies(const_cast<CGCClient_GetEquivalentAssembliesRequest&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_equivalent_assemblies);
    return CRef<CGCClient_EquivalentAssemblies>(&x_Choice(*reply).SetGet_equivalent_assemblies());
}

vector< char > CGenomicCollectionsService_Base::AskGet_assembly_blob(const CGCClient_GetAssemblyBlobRequest& req, CGenomicCollectionsService_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_assembly_blob(const_cast<CGCClient_GetAssemblyBlobRequest&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_assembly_blob);
    return x_Choice(*reply).GetGet_assembly_blob();
}

CRef<CGCClient_AssembliesForSequences> CGenomicCollectionsService_Base::AskGet_assembly_by_sequence(const CGCClient_GetAssemblyBySequenceRequest& req, CGenomicCollectionsService_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGet_assembly_by_sequence(const_cast<CGCClient_GetAssemblyBySequenceRequest&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Get_assembly_by_sequence);
    return CRef<CGCClient_AssembliesForSequences>(&x_Choice(*reply).SetGet_assembly_by_sequence());
}

// constructor
CGenomicCollectionsService_Base::CGenomicCollectionsService_Base(void)
    : Tparent("GC_GetAssembly_v3s")
{
}

// destructor
CGenomicCollectionsService_Base::~CGenomicCollectionsService_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

