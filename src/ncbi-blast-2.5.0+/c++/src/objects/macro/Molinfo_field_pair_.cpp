/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'macro.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/macro/Molinfo_field_pair.hpp>
#include <objects/macro/Molinfo_completedness_pair.hpp>
#include <objects/macro/Molinfo_mol_class_pair.hpp>
#include <objects/macro/Molinfo_molecule_pair.hpp>
#include <objects/macro/Molinfo_strand_pair.hpp>
#include <objects/macro/Molinfo_technique_pair.hpp>
#include <objects/macro/Molinfo_topology_pair.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CMolinfo_field_pair_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CMolinfo_field_pair_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Molecule:
    case e_Technique:
    case e_Completedness:
    case e_Mol_class:
    case e_Topology:
    case e_Strand:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CMolinfo_field_pair_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Molecule:
        (m_object = new(pool) ncbi::objects::CMolinfo_molecule_pair())->AddReference();
        break;
    case e_Technique:
        (m_object = new(pool) ncbi::objects::CMolinfo_technique_pair())->AddReference();
        break;
    case e_Completedness:
        (m_object = new(pool) ncbi::objects::CMolinfo_completedness_pair())->AddReference();
        break;
    case e_Mol_class:
        (m_object = new(pool) ncbi::objects::CMolinfo_mol_class_pair())->AddReference();
        break;
    case e_Topology:
        (m_object = new(pool) ncbi::objects::CMolinfo_topology_pair())->AddReference();
        break;
    case e_Strand:
        (m_object = new(pool) ncbi::objects::CMolinfo_strand_pair())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CMolinfo_field_pair_Base::sm_SelectionNames[] = {
    "not set",
    "molecule",
    "technique",
    "completedness",
    "mol-class",
    "topology",
    "strand"
};

NCBI_NS_STD::string CMolinfo_field_pair_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CMolinfo_field_pair_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CMolinfo_field_pair_Base::TMolecule& CMolinfo_field_pair_Base::GetMolecule(void) const
{
    CheckSelected(e_Molecule);
    return *static_cast<const TMolecule*>(m_object);
}

CMolinfo_field_pair_Base::TMolecule& CMolinfo_field_pair_Base::SetMolecule(void)
{
    Select(e_Molecule, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TMolecule*>(m_object);
}

void CMolinfo_field_pair_Base::SetMolecule(CMolinfo_field_pair_Base::TMolecule& value)
{
    TMolecule* ptr = &value;
    if ( m_choice != e_Molecule || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Molecule;
    }
}

const CMolinfo_field_pair_Base::TTechnique& CMolinfo_field_pair_Base::GetTechnique(void) const
{
    CheckSelected(e_Technique);
    return *static_cast<const TTechnique*>(m_object);
}

CMolinfo_field_pair_Base::TTechnique& CMolinfo_field_pair_Base::SetTechnique(void)
{
    Select(e_Technique, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTechnique*>(m_object);
}

void CMolinfo_field_pair_Base::SetTechnique(CMolinfo_field_pair_Base::TTechnique& value)
{
    TTechnique* ptr = &value;
    if ( m_choice != e_Technique || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Technique;
    }
}

const CMolinfo_field_pair_Base::TCompletedness& CMolinfo_field_pair_Base::GetCompletedness(void) const
{
    CheckSelected(e_Completedness);
    return *static_cast<const TCompletedness*>(m_object);
}

CMolinfo_field_pair_Base::TCompletedness& CMolinfo_field_pair_Base::SetCompletedness(void)
{
    Select(e_Completedness, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCompletedness*>(m_object);
}

void CMolinfo_field_pair_Base::SetCompletedness(CMolinfo_field_pair_Base::TCompletedness& value)
{
    TCompletedness* ptr = &value;
    if ( m_choice != e_Completedness || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Completedness;
    }
}

const CMolinfo_field_pair_Base::TMol_class& CMolinfo_field_pair_Base::GetMol_class(void) const
{
    CheckSelected(e_Mol_class);
    return *static_cast<const TMol_class*>(m_object);
}

CMolinfo_field_pair_Base::TMol_class& CMolinfo_field_pair_Base::SetMol_class(void)
{
    Select(e_Mol_class, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TMol_class*>(m_object);
}

void CMolinfo_field_pair_Base::SetMol_class(CMolinfo_field_pair_Base::TMol_class& value)
{
    TMol_class* ptr = &value;
    if ( m_choice != e_Mol_class || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Mol_class;
    }
}

const CMolinfo_field_pair_Base::TTopology& CMolinfo_field_pair_Base::GetTopology(void) const
{
    CheckSelected(e_Topology);
    return *static_cast<const TTopology*>(m_object);
}

CMolinfo_field_pair_Base::TTopology& CMolinfo_field_pair_Base::SetTopology(void)
{
    Select(e_Topology, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTopology*>(m_object);
}

void CMolinfo_field_pair_Base::SetTopology(CMolinfo_field_pair_Base::TTopology& value)
{
    TTopology* ptr = &value;
    if ( m_choice != e_Topology || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Topology;
    }
}

const CMolinfo_field_pair_Base::TStrand& CMolinfo_field_pair_Base::GetStrand(void) const
{
    CheckSelected(e_Strand);
    return *static_cast<const TStrand*>(m_object);
}

CMolinfo_field_pair_Base::TStrand& CMolinfo_field_pair_Base::SetStrand(void)
{
    Select(e_Strand, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TStrand*>(m_object);
}

void CMolinfo_field_pair_Base::SetStrand(CMolinfo_field_pair_Base::TStrand& value)
{
    TStrand* ptr = &value;
    if ( m_choice != e_Strand || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Strand;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Molinfo-field-pair", CMolinfo_field_pair)
{
    SET_CHOICE_MODULE("NCBI-Macro");
    ADD_NAMED_REF_CHOICE_VARIANT("molecule", m_object, CMolinfo_molecule_pair);
    ADD_NAMED_REF_CHOICE_VARIANT("technique", m_object, CMolinfo_technique_pair);
    ADD_NAMED_REF_CHOICE_VARIANT("completedness", m_object, CMolinfo_completedness_pair);
    ADD_NAMED_REF_CHOICE_VARIANT("mol-class", m_object, CMolinfo_mol_class_pair);
    ADD_NAMED_REF_CHOICE_VARIANT("topology", m_object, CMolinfo_topology_pair);
    ADD_NAMED_REF_CHOICE_VARIANT("strand", m_object, CMolinfo_strand_pair);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CMolinfo_field_pair_Base::CMolinfo_field_pair_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CMolinfo_field_pair_Base::~CMolinfo_field_pair_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

