/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb3.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb3/Biostruc_feature.hpp>
#include <objects/general/User_object.hpp>
#include <objects/mmdb3/Biostruc_script.hpp>
#include <objects/mmdb3/Camera.hpp>
#include <objects/mmdb3/Chem_graph_alignment.hpp>
#include <objects/mmdb3/Chem_graph_interaction.hpp>
#include <objects/mmdb3/Chem_graph_pntrs.hpp>
#include <objects/mmdb3/Color_prop.hpp>
#include <objects/mmdb3/Other_feature.hpp>
#include <objects/mmdb3/Region_pntrs.hpp>
#include <objects/mmdb3/Region_similarity.hpp>
#include <objects/mmdb3/Transform.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CBiostruc_feature_Base::, EType, true)
{
    SET_ENUM_INTERNAL_NAME("Biostruc-feature", "type");
    SET_ENUM_MODULE("MMDB-Features");
    ADD_ENUM_VALUE("helix", eType_helix);
    ADD_ENUM_VALUE("strand", eType_strand);
    ADD_ENUM_VALUE("sheet", eType_sheet);
    ADD_ENUM_VALUE("turn", eType_turn);
    ADD_ENUM_VALUE("site", eType_site);
    ADD_ENUM_VALUE("footnote", eType_footnote);
    ADD_ENUM_VALUE("comment", eType_comment);
    ADD_ENUM_VALUE("interaction", eType_interaction);
    ADD_ENUM_VALUE("subgraph", eType_subgraph);
    ADD_ENUM_VALUE("region", eType_region);
    ADD_ENUM_VALUE("core", eType_core);
    ADD_ENUM_VALUE("supercore", eType_supercore);
    ADD_ENUM_VALUE("color", eType_color);
    ADD_ENUM_VALUE("render", eType_render);
    ADD_ENUM_VALUE("label", eType_label);
    ADD_ENUM_VALUE("transform", eType_transform);
    ADD_ENUM_VALUE("camera", eType_camera);
    ADD_ENUM_VALUE("script", eType_script);
    ADD_ENUM_VALUE("alignment", eType_alignment);
    ADD_ENUM_VALUE("similarity", eType_similarity);
    ADD_ENUM_VALUE("multalign", eType_multalign);
    ADD_ENUM_VALUE("indirect", eType_indirect);
    ADD_ENUM_VALUE("cn3dstate", eType_cn3dstate);
    ADD_ENUM_VALUE("other", eType_other);
}
END_ENUM_INFO

void CBiostruc_feature_Base::C_Property::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CBiostruc_feature_Base::C_Property::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Color:
    case e_Transform:
    case e_Camera:
    case e_Script:
    case e_User:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CBiostruc_feature_Base::C_Property::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Color:
        (m_object = new(pool) ncbi::objects::CColor_prop())->AddReference();
        break;
    case e_Render:
        m_Render = (int)(0);
        break;
    case e_Transform:
        (m_object = new(pool) ncbi::objects::CTransform())->AddReference();
        break;
    case e_Camera:
        (m_object = new(pool) ncbi::objects::CCamera())->AddReference();
        break;
    case e_Script:
        (m_object = new(pool) ncbi::objects::CBiostruc_script())->AddReference();
        break;
    case e_User:
        (m_object = new(pool) ncbi::objects::CUser_object())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CBiostruc_feature_Base::C_Property::sm_SelectionNames[] = {
    "not set",
    "color",
    "render",
    "transform",
    "camera",
    "script",
    "user"
};

NCBI_NS_STD::string CBiostruc_feature_Base::C_Property::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CBiostruc_feature_Base::C_Property::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CBiostruc_feature_Base::C_Property::TColor& CBiostruc_feature_Base::C_Property::GetColor(void) const
{
    CheckSelected(e_Color);
    return *static_cast<const TColor*>(m_object);
}

CBiostruc_feature_Base::C_Property::TColor& CBiostruc_feature_Base::C_Property::SetColor(void)
{
    Select(e_Color, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TColor*>(m_object);
}

void CBiostruc_feature_Base::C_Property::SetColor(CBiostruc_feature_Base::C_Property::TColor& value)
{
    TColor* ptr = &value;
    if ( m_choice != e_Color || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Color;
    }
}

const CBiostruc_feature_Base::C_Property::TTransform& CBiostruc_feature_Base::C_Property::GetTransform(void) const
{
    CheckSelected(e_Transform);
    return *static_cast<const TTransform*>(m_object);
}

CBiostruc_feature_Base::C_Property::TTransform& CBiostruc_feature_Base::C_Property::SetTransform(void)
{
    Select(e_Transform, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTransform*>(m_object);
}

void CBiostruc_feature_Base::C_Property::SetTransform(CBiostruc_feature_Base::C_Property::TTransform& value)
{
    TTransform* ptr = &value;
    if ( m_choice != e_Transform || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Transform;
    }
}

const CBiostruc_feature_Base::C_Property::TCamera& CBiostruc_feature_Base::C_Property::GetCamera(void) const
{
    CheckSelected(e_Camera);
    return *static_cast<const TCamera*>(m_object);
}

CBiostruc_feature_Base::C_Property::TCamera& CBiostruc_feature_Base::C_Property::SetCamera(void)
{
    Select(e_Camera, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCamera*>(m_object);
}

void CBiostruc_feature_Base::C_Property::SetCamera(CBiostruc_feature_Base::C_Property::TCamera& value)
{
    TCamera* ptr = &value;
    if ( m_choice != e_Camera || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Camera;
    }
}

const CBiostruc_feature_Base::C_Property::TScript& CBiostruc_feature_Base::C_Property::GetScript(void) const
{
    CheckSelected(e_Script);
    return *static_cast<const TScript*>(m_object);
}

CBiostruc_feature_Base::C_Property::TScript& CBiostruc_feature_Base::C_Property::SetScript(void)
{
    Select(e_Script, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TScript*>(m_object);
}

void CBiostruc_feature_Base::C_Property::SetScript(CBiostruc_feature_Base::C_Property::TScript& value)
{
    TScript* ptr = &value;
    if ( m_choice != e_Script || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Script;
    }
}

const CBiostruc_feature_Base::C_Property::TUser& CBiostruc_feature_Base::C_Property::GetUser(void) const
{
    CheckSelected(e_User);
    return *static_cast<const TUser*>(m_object);
}

CBiostruc_feature_Base::C_Property::TUser& CBiostruc_feature_Base::C_Property::SetUser(void)
{
    Select(e_User, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TUser*>(m_object);
}

void CBiostruc_feature_Base::C_Property::SetUser(CBiostruc_feature_Base::C_Property::TUser& value)
{
    TUser* ptr = &value;
    if ( m_choice != e_User || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_User;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CBiostruc_feature_Base::C_Property)
{
    SET_INTERNAL_NAME("Biostruc-feature", "property");
    SET_CHOICE_MODULE("MMDB-Features");
    ADD_NAMED_REF_CHOICE_VARIANT("color", m_object, CColor_prop);
    ADD_NAMED_ENUM_CHOICE_VARIANT("render", m_Render, ERender_prop);
    ADD_NAMED_REF_CHOICE_VARIANT("transform", m_object, CTransform);
    ADD_NAMED_REF_CHOICE_VARIANT("camera", m_object, CCamera);
    ADD_NAMED_REF_CHOICE_VARIANT("script", m_object, CBiostruc_script);
    ADD_NAMED_REF_CHOICE_VARIANT("user", m_object, CUser_object);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CBiostruc_feature_Base::C_Property::C_Property(void)
    : m_choice(e_not_set)
{
}

// destructor
CBiostruc_feature_Base::C_Property::~C_Property(void)
{
    Reset();
}


void CBiostruc_feature_Base::C_Location::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CBiostruc_feature_Base::C_Location::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Subgraph:
    case e_Region:
    case e_Alignment:
    case e_Interaction:
    case e_Similarity:
    case e_Indirect:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CBiostruc_feature_Base::C_Location::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Subgraph:
        (m_object = new(pool) ncbi::objects::CChem_graph_pntrs())->AddReference();
        break;
    case e_Region:
        (m_object = new(pool) ncbi::objects::CRegion_pntrs())->AddReference();
        break;
    case e_Alignment:
        (m_object = new(pool) ncbi::objects::CChem_graph_alignment())->AddReference();
        break;
    case e_Interaction:
        (m_object = new(pool) ncbi::objects::CChem_graph_interaction())->AddReference();
        break;
    case e_Similarity:
        (m_object = new(pool) ncbi::objects::CRegion_similarity())->AddReference();
        break;
    case e_Indirect:
        (m_object = new(pool) ncbi::objects::COther_feature())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CBiostruc_feature_Base::C_Location::sm_SelectionNames[] = {
    "not set",
    "subgraph",
    "region",
    "alignment",
    "interaction",
    "similarity",
    "indirect"
};

NCBI_NS_STD::string CBiostruc_feature_Base::C_Location::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CBiostruc_feature_Base::C_Location::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CBiostruc_feature_Base::C_Location::TSubgraph& CBiostruc_feature_Base::C_Location::GetSubgraph(void) const
{
    CheckSelected(e_Subgraph);
    return *static_cast<const TSubgraph*>(m_object);
}

CBiostruc_feature_Base::C_Location::TSubgraph& CBiostruc_feature_Base::C_Location::SetSubgraph(void)
{
    Select(e_Subgraph, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSubgraph*>(m_object);
}

void CBiostruc_feature_Base::C_Location::SetSubgraph(CBiostruc_feature_Base::C_Location::TSubgraph& value)
{
    TSubgraph* ptr = &value;
    if ( m_choice != e_Subgraph || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Subgraph;
    }
}

const CBiostruc_feature_Base::C_Location::TRegion& CBiostruc_feature_Base::C_Location::GetRegion(void) const
{
    CheckSelected(e_Region);
    return *static_cast<const TRegion*>(m_object);
}

CBiostruc_feature_Base::C_Location::TRegion& CBiostruc_feature_Base::C_Location::SetRegion(void)
{
    Select(e_Region, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRegion*>(m_object);
}

void CBiostruc_feature_Base::C_Location::SetRegion(CBiostruc_feature_Base::C_Location::TRegion& value)
{
    TRegion* ptr = &value;
    if ( m_choice != e_Region || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Region;
    }
}

const CBiostruc_feature_Base::C_Location::TAlignment& CBiostruc_feature_Base::C_Location::GetAlignment(void) const
{
    CheckSelected(e_Alignment);
    return *static_cast<const TAlignment*>(m_object);
}

CBiostruc_feature_Base::C_Location::TAlignment& CBiostruc_feature_Base::C_Location::SetAlignment(void)
{
    Select(e_Alignment, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAlignment*>(m_object);
}

void CBiostruc_feature_Base::C_Location::SetAlignment(CBiostruc_feature_Base::C_Location::TAlignment& value)
{
    TAlignment* ptr = &value;
    if ( m_choice != e_Alignment || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Alignment;
    }
}

const CBiostruc_feature_Base::C_Location::TInteraction& CBiostruc_feature_Base::C_Location::GetInteraction(void) const
{
    CheckSelected(e_Interaction);
    return *static_cast<const TInteraction*>(m_object);
}

CBiostruc_feature_Base::C_Location::TInteraction& CBiostruc_feature_Base::C_Location::SetInteraction(void)
{
    Select(e_Interaction, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TInteraction*>(m_object);
}

void CBiostruc_feature_Base::C_Location::SetInteraction(CBiostruc_feature_Base::C_Location::TInteraction& value)
{
    TInteraction* ptr = &value;
    if ( m_choice != e_Interaction || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Interaction;
    }
}

const CBiostruc_feature_Base::C_Location::TSimilarity& CBiostruc_feature_Base::C_Location::GetSimilarity(void) const
{
    CheckSelected(e_Similarity);
    return *static_cast<const TSimilarity*>(m_object);
}

CBiostruc_feature_Base::C_Location::TSimilarity& CBiostruc_feature_Base::C_Location::SetSimilarity(void)
{
    Select(e_Similarity, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSimilarity*>(m_object);
}

void CBiostruc_feature_Base::C_Location::SetSimilarity(CBiostruc_feature_Base::C_Location::TSimilarity& value)
{
    TSimilarity* ptr = &value;
    if ( m_choice != e_Similarity || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Similarity;
    }
}

const CBiostruc_feature_Base::C_Location::TIndirect& CBiostruc_feature_Base::C_Location::GetIndirect(void) const
{
    CheckSelected(e_Indirect);
    return *static_cast<const TIndirect*>(m_object);
}

CBiostruc_feature_Base::C_Location::TIndirect& CBiostruc_feature_Base::C_Location::SetIndirect(void)
{
    Select(e_Indirect, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TIndirect*>(m_object);
}

void CBiostruc_feature_Base::C_Location::SetIndirect(CBiostruc_feature_Base::C_Location::TIndirect& value)
{
    TIndirect* ptr = &value;
    if ( m_choice != e_Indirect || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Indirect;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CBiostruc_feature_Base::C_Location)
{
    SET_INTERNAL_NAME("Biostruc-feature", "location");
    SET_CHOICE_MODULE("MMDB-Features");
    ADD_NAMED_REF_CHOICE_VARIANT("subgraph", m_object, CChem_graph_pntrs);
    ADD_NAMED_REF_CHOICE_VARIANT("region", m_object, CRegion_pntrs);
    ADD_NAMED_REF_CHOICE_VARIANT("alignment", m_object, CChem_graph_alignment);
    ADD_NAMED_REF_CHOICE_VARIANT("interaction", m_object, CChem_graph_interaction);
    ADD_NAMED_REF_CHOICE_VARIANT("similarity", m_object, CRegion_similarity);
    ADD_NAMED_REF_CHOICE_VARIANT("indirect", m_object, COther_feature);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CBiostruc_feature_Base::C_Location::C_Location(void)
    : m_choice(e_not_set)
{
}

// destructor
CBiostruc_feature_Base::C_Location::~C_Location(void)
{
    Reset();
}


void CBiostruc_feature_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0xc;
}

void CBiostruc_feature_Base::ResetProperty(void)
{
    m_Property.Reset();
}

void CBiostruc_feature_Base::SetProperty(CBiostruc_feature_Base::TProperty& value)
{
    m_Property.Reset(&value);
}

CBiostruc_feature_Base::TProperty& CBiostruc_feature_Base::SetProperty(void)
{
    if ( !m_Property )
        m_Property.Reset(new C_Property());
    return (*m_Property);
}

void CBiostruc_feature_Base::ResetLocation(void)
{
    m_Location.Reset();
}

void CBiostruc_feature_Base::SetLocation(CBiostruc_feature_Base::TLocation& value)
{
    m_Location.Reset(&value);
}

CBiostruc_feature_Base::TLocation& CBiostruc_feature_Base::SetLocation(void)
{
    if ( !m_Location )
        m_Location.Reset(new C_Location());
    return (*m_Location);
}

void CBiostruc_feature_Base::Reset(void)
{
    ResetId();
    ResetName();
    ResetType();
    ResetProperty();
    ResetLocation();
}

BEGIN_NAMED_BASE_CLASS_INFO("Biostruc-feature", CBiostruc_feature)
{
    SET_CLASS_MODULE("MMDB-Features");
    ADD_NAMED_MEMBER("id", m_Id, CLASS, (CBiostruc_feature_id))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("property", m_Property, C_Property)->SetOptional();
    ADD_NAMED_REF_MEMBER("location", m_Location, C_Location)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CBiostruc_feature_Base::CBiostruc_feature_Base(void)
    : m_Id(CBiostruc_feature_id(0)), m_Type((EType)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CBiostruc_feature_Base::~CBiostruc_feature_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

