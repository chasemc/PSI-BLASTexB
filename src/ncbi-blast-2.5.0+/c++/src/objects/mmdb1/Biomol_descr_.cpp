/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb1.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb1/Biomol_descr.hpp>
#include <objects/pub/Pub.hpp>
#include <objects/seqfeat/BioSource.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CBiomol_descr_Base::, EAssembly_type, true)
{
    SET_ENUM_INTERNAL_NAME("Biomol-descr", "assembly-type");
    SET_ENUM_MODULE("MMDB-Chemical-graph");
    ADD_ENUM_VALUE("physiological-form", eAssembly_type_physiological_form);
    ADD_ENUM_VALUE("crystallographic-cell", eAssembly_type_crystallographic_cell);
    ADD_ENUM_VALUE("other", eAssembly_type_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CBiomol_descr_Base::, EMolecule_type, true)
{
    SET_ENUM_INTERNAL_NAME("Biomol-descr", "molecule-type");
    SET_ENUM_MODULE("MMDB-Chemical-graph");
    ADD_ENUM_VALUE("dna", eMolecule_type_dna);
    ADD_ENUM_VALUE("rna", eMolecule_type_rna);
    ADD_ENUM_VALUE("protein", eMolecule_type_protein);
    ADD_ENUM_VALUE("other-biopolymer", eMolecule_type_other_biopolymer);
    ADD_ENUM_VALUE("solvent", eMolecule_type_solvent);
    ADD_ENUM_VALUE("other-nonpolymer", eMolecule_type_other_nonpolymer);
    ADD_ENUM_VALUE("other", eMolecule_type_other);
}
END_ENUM_INFO

void CBiomol_descr_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CBiomol_descr_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Name:
    case e_Pdb_class:
    case e_Pdb_source:
    case e_Pdb_comment:
    case e_Other_comment:
        m_string.Destruct();
        break;
    case e_Organism:
    case e_Attribution:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CBiomol_descr_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Organism:
        (m_object = new(pool) ncbi::objects::CBioSource())->AddReference();
        break;
    case e_Attribution:
        (m_object = new(pool) ncbi::objects::CPub())->AddReference();
        break;
    case e_Assembly_type:
        m_Assembly_type = (EAssembly_type)(0);
        break;
    case e_Molecule_type:
        m_Molecule_type = (EMolecule_type)(0);
        break;
    case e_Name:
    case e_Pdb_class:
    case e_Pdb_source:
    case e_Pdb_comment:
    case e_Other_comment:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CBiomol_descr_Base::sm_SelectionNames[] = {
    "not set",
    "name",
    "pdb-class",
    "pdb-source",
    "pdb-comment",
    "other-comment",
    "organism",
    "attribution",
    "assembly-type",
    "molecule-type"
};

NCBI_NS_STD::string CBiomol_descr_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CBiomol_descr_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CBiomol_descr_Base::SetName(const CBiomol_descr_Base::TName& value)
{
    Select(e_Name, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CBiomol_descr_Base::SetPdb_class(const CBiomol_descr_Base::TPdb_class& value)
{
    Select(e_Pdb_class, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CBiomol_descr_Base::SetPdb_source(const CBiomol_descr_Base::TPdb_source& value)
{
    Select(e_Pdb_source, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CBiomol_descr_Base::SetPdb_comment(const CBiomol_descr_Base::TPdb_comment& value)
{
    Select(e_Pdb_comment, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CBiomol_descr_Base::SetOther_comment(const CBiomol_descr_Base::TOther_comment& value)
{
    Select(e_Other_comment, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CBiomol_descr_Base::TOrganism& CBiomol_descr_Base::GetOrganism(void) const
{
    CheckSelected(e_Organism);
    return *static_cast<const TOrganism*>(m_object);
}

CBiomol_descr_Base::TOrganism& CBiomol_descr_Base::SetOrganism(void)
{
    Select(e_Organism, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TOrganism*>(m_object);
}

void CBiomol_descr_Base::SetOrganism(CBiomol_descr_Base::TOrganism& value)
{
    TOrganism* ptr = &value;
    if ( m_choice != e_Organism || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Organism;
    }
}

const CBiomol_descr_Base::TAttribution& CBiomol_descr_Base::GetAttribution(void) const
{
    CheckSelected(e_Attribution);
    return *static_cast<const TAttribution*>(m_object);
}

CBiomol_descr_Base::TAttribution& CBiomol_descr_Base::SetAttribution(void)
{
    Select(e_Attribution, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TAttribution*>(m_object);
}

void CBiomol_descr_Base::SetAttribution(CBiomol_descr_Base::TAttribution& value)
{
    TAttribution* ptr = &value;
    if ( m_choice != e_Attribution || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Attribution;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Biomol-descr", CBiomol_descr)
{
    SET_CHOICE_MODULE("MMDB-Chemical-graph");
    ADD_NAMED_BUF_CHOICE_VARIANT("name", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("pdb-class", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("pdb-source", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("pdb-comment", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("other-comment", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("organism", m_object, CBioSource);
    ADD_NAMED_REF_CHOICE_VARIANT("attribution", m_object, CPub);
    ADD_NAMED_ENUM_CHOICE_VARIANT("assembly-type", m_Assembly_type, EAssembly_type);
    ADD_NAMED_ENUM_CHOICE_VARIANT("molecule-type", m_Molecule_type, EMolecule_type);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CBiomol_descr_Base::CBiomol_descr_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CBiomol_descr_Base::~CBiomol_descr_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

