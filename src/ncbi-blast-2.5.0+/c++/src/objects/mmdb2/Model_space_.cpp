/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb2/Model_space.hpp>
#include <objects/mmdb2/Reference_frame.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CModel_space_Base::, ECoordinate_units, false)
{
    SET_ENUM_INTERNAL_NAME("Model-space", "coordinate-units");
    SET_ENUM_MODULE("MMDB-Structural-model");
    ADD_ENUM_VALUE("angstroms", eCoordinate_units_angstroms);
    ADD_ENUM_VALUE("nanometers", eCoordinate_units_nanometers);
    ADD_ENUM_VALUE("other", eCoordinate_units_other);
    ADD_ENUM_VALUE("unknown", eCoordinate_units_unknown);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CModel_space_Base::, EThermal_factor_units, false)
{
    SET_ENUM_INTERNAL_NAME("Model-space", "thermal-factor-units");
    SET_ENUM_MODULE("MMDB-Structural-model");
    ADD_ENUM_VALUE("b", eThermal_factor_units_b);
    ADD_ENUM_VALUE("u", eThermal_factor_units_u);
    ADD_ENUM_VALUE("other", eThermal_factor_units_other);
    ADD_ENUM_VALUE("unknown", eThermal_factor_units_unknown);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CModel_space_Base::, EOccupancy_factor_units, false)
{
    SET_ENUM_INTERNAL_NAME("Model-space", "occupancy-factor-units");
    SET_ENUM_MODULE("MMDB-Structural-model");
    ADD_ENUM_VALUE("fractional", eOccupancy_factor_units_fractional);
    ADD_ENUM_VALUE("electrons", eOccupancy_factor_units_electrons);
    ADD_ENUM_VALUE("other", eOccupancy_factor_units_other);
    ADD_ENUM_VALUE("unknown", eOccupancy_factor_units_unknown);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CModel_space_Base::, EDensity_units, false)
{
    SET_ENUM_INTERNAL_NAME("Model-space", "density-units");
    SET_ENUM_MODULE("MMDB-Structural-model");
    ADD_ENUM_VALUE("electrons-per-unit-volume", eDensity_units_electrons_per_unit_volume);
    ADD_ENUM_VALUE("arbitrary-scale", eDensity_units_arbitrary_scale);
    ADD_ENUM_VALUE("other", eDensity_units_other);
    ADD_ENUM_VALUE("unknown", eDensity_units_unknown);
}
END_ENUM_INFO

void CModel_space_Base::ResetReference_frame(void)
{
    m_Reference_frame.Reset();
}

void CModel_space_Base::SetReference_frame(CModel_space_Base::TReference_frame& value)
{
    m_Reference_frame.Reset(&value);
}

CModel_space_Base::TReference_frame& CModel_space_Base::SetReference_frame(void)
{
    if ( !m_Reference_frame )
        m_Reference_frame.Reset(new ncbi::objects::CReference_frame());
    return (*m_Reference_frame);
}

void CModel_space_Base::Reset(void)
{
    ResetCoordinate_units();
    ResetThermal_factor_units();
    ResetOccupancy_factor_units();
    ResetDensity_units();
    ResetReference_frame();
}

BEGIN_NAMED_BASE_CLASS_INFO("Model-space", CModel_space)
{
    SET_CLASS_MODULE("MMDB-Structural-model");
    ADD_NAMED_ENUM_MEMBER("coordinate-units", m_Coordinate_units, ECoordinate_units)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("thermal-factor-units", m_Thermal_factor_units, EThermal_factor_units)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("occupancy-factor-units", m_Occupancy_factor_units, EOccupancy_factor_units)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("density-units", m_Density_units, EDensity_units)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("reference-frame", m_Reference_frame, CReference_frame)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CModel_space_Base::CModel_space_Base(void)
    : m_Coordinate_units((ECoordinate_units)(0)), m_Thermal_factor_units((EThermal_factor_units)(0)), m_Occupancy_factor_units((EOccupancy_factor_units)(0)), m_Density_units((EDensity_units)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CModel_space_Base::~CModel_space_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

