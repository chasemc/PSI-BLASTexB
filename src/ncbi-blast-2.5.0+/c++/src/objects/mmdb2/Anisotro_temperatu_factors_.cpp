/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb2/Anisotro_temperatu_factors.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CAnisotropic_temperature_factors_Base::ResetB_11(void)
{
    m_B_11.clear();
    m_set_State[0] &= ~0xc;
}

void CAnisotropic_temperature_factors_Base::ResetB_12(void)
{
    m_B_12.clear();
    m_set_State[0] &= ~0x30;
}

void CAnisotropic_temperature_factors_Base::ResetB_13(void)
{
    m_B_13.clear();
    m_set_State[0] &= ~0xc0;
}

void CAnisotropic_temperature_factors_Base::ResetB_22(void)
{
    m_B_22.clear();
    m_set_State[0] &= ~0x300;
}

void CAnisotropic_temperature_factors_Base::ResetB_23(void)
{
    m_B_23.clear();
    m_set_State[0] &= ~0xc00;
}

void CAnisotropic_temperature_factors_Base::ResetB_33(void)
{
    m_B_33.clear();
    m_set_State[0] &= ~0x3000;
}

void CAnisotropic_temperature_factors_Base::Reset(void)
{
    ResetScale_factor();
    ResetB_11();
    ResetB_12();
    ResetB_13();
    ResetB_22();
    ResetB_23();
    ResetB_33();
}

BEGIN_NAMED_BASE_CLASS_INFO("Anisotropic-temperature-factors", CAnisotropic_temperature_factors)
{
    SET_CLASS_MODULE("MMDB-Structural-model");
    ADD_NAMED_STD_MEMBER("scale-factor", m_Scale_factor)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("b-11", m_B_11, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("b-12", m_B_12, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("b-13", m_B_13, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("b-22", m_B_22, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("b-23", m_B_23, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("b-33", m_B_33, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAnisotropic_temperature_factors_Base::CAnisotropic_temperature_factors_Base(void)
    : m_Scale_factor(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CAnisotropic_temperature_factors_Base::~CAnisotropic_temperature_factors_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

