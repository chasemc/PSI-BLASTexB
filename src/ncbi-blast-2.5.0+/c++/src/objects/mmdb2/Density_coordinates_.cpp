/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb2/Density_coordinates.hpp>
#include <objects/mmdb3/Brick.hpp>
#include <objects/mmdb3/Chem_graph_pntrs.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CDensity_coordinates_Base::, EFastest_varying, false)
{
    SET_ENUM_INTERNAL_NAME("Density-coordinates", "fastest-varying");
    SET_ENUM_MODULE("MMDB-Structural-model");
    ADD_ENUM_VALUE("x", eFastest_varying_x);
    ADD_ENUM_VALUE("y", eFastest_varying_y);
    ADD_ENUM_VALUE("z", eFastest_varying_z);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CDensity_coordinates_Base::, ESlowest_varying, false)
{
    SET_ENUM_INTERNAL_NAME("Density-coordinates", "slowest-varying");
    SET_ENUM_MODULE("MMDB-Structural-model");
    ADD_ENUM_VALUE("x", eSlowest_varying_x);
    ADD_ENUM_VALUE("y", eSlowest_varying_y);
    ADD_ENUM_VALUE("z", eSlowest_varying_z);
}
END_ENUM_INFO

void CDensity_coordinates_Base::ResetContents(void)
{
    if ( !m_Contents ) {
        m_Contents.Reset(new TContents());
        return;
    }
    (*m_Contents).Reset();
}

void CDensity_coordinates_Base::SetContents(CDensity_coordinates_Base::TContents& value)
{
    m_Contents.Reset(&value);
}

void CDensity_coordinates_Base::ResetGrid_corners(void)
{
    if ( !m_Grid_corners ) {
        m_Grid_corners.Reset(new TGrid_corners());
        return;
    }
    (*m_Grid_corners).Reset();
}

void CDensity_coordinates_Base::SetGrid_corners(CDensity_coordinates_Base::TGrid_corners& value)
{
    m_Grid_corners.Reset(&value);
}

void CDensity_coordinates_Base::ResetDensity(void)
{
    m_Density.clear();
    m_set_State[0] &= ~0x30000;
}

void CDensity_coordinates_Base::Reset(void)
{
    ResetContents();
    ResetGrid_corners();
    ResetGrid_steps_x();
    ResetGrid_steps_y();
    ResetGrid_steps_z();
    ResetFastest_varying();
    ResetSlowest_varying();
    ResetScale_factor();
    ResetDensity();
}

BEGIN_NAMED_BASE_CLASS_INFO("Density-coordinates", CDensity_coordinates)
{
    SET_CLASS_MODULE("MMDB-Structural-model");
    ADD_NAMED_REF_MEMBER("contents", m_Contents, CChem_graph_pntrs);
    ADD_NAMED_REF_MEMBER("grid-corners", m_Grid_corners, CBrick);
    ADD_NAMED_STD_MEMBER("grid-steps-x", m_Grid_steps_x)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("grid-steps-y", m_Grid_steps_y)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("grid-steps-z", m_Grid_steps_z)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("fastest-varying", m_Fastest_varying, EFastest_varying)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("slowest-varying", m_Slowest_varying, ESlowest_varying)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("scale-factor", m_Scale_factor)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("density", m_Density, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CDensity_coordinates_Base::CDensity_coordinates_Base(void)
    : m_Grid_steps_x(0), m_Grid_steps_y(0), m_Grid_steps_z(0), m_Fastest_varying((EFastest_varying)(0)), m_Slowest_varying((ESlowest_varying)(0)), m_Scale_factor(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetContents();
        ResetGrid_corners();
    }
}

// destructor
CDensity_coordinates_Base::~CDensity_coordinates_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

