/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'id2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/id2/ID2_Request_Get_Blob_Info.hpp>
#include <objects/id2/ID2_Blob_Id.hpp>
#include <objects/id2/ID2_Get_Blob_Details.hpp>
#include <objects/id2/ID2_Request_Get_Blob_Id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::ResetRequest(void)
{
    if ( !m_Request ) {
        m_Request.Reset(new TRequest());
        return;
    }
    (*m_Request).Reset();
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::SetRequest(CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::TRequest& value)
{
    m_Request.Reset(&value);
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::ResetExclude_blobs(void)
{
    m_Exclude_blobs.clear();
    m_set_State[0] &= ~0xc;
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::Reset(void)
{
    ResetRequest();
    ResetExclude_blobs();
}

BEGIN_NAMED_CLASS_INFO("", CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve)
{
    SET_INTERNAL_NAME("ID2-Request-Get-Blob-Info.blob-id", "resolve");
    SET_CLASS_MODULE("NCBI-ID2Access");
    ADD_NAMED_REF_MEMBER("request", m_Request, CID2_Request_Get_Blob_Id);
    ADD_NAMED_MEMBER("exclude-blobs", m_Exclude_blobs, STL_list, (STL_CRef, (CLASS, (CID2_Blob_Id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::C_Resolve(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetRequest();
    }
}

// destructor
CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Resolve::~C_Resolve(void)
{
}


void CID2_Request_Get_Blob_Info_Base::C_Blob_id::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Blob_id:
    case e_Resolve:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Blob_id:
        (m_object = new(pool) ncbi::objects::CID2_Blob_Id())->AddReference();
        break;
    case e_Resolve:
        (m_object = new(pool) C_Resolve())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CID2_Request_Get_Blob_Info_Base::C_Blob_id::sm_SelectionNames[] = {
    "not set",
    "blob-id",
    "resolve"
};

NCBI_NS_STD::string CID2_Request_Get_Blob_Info_Base::C_Blob_id::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CID2_Request_Get_Blob_Info_Base::C_Blob_id::TBlob_id& CID2_Request_Get_Blob_Info_Base::C_Blob_id::GetBlob_id(void) const
{
    CheckSelected(e_Blob_id);
    return *static_cast<const TBlob_id*>(m_object);
}

CID2_Request_Get_Blob_Info_Base::C_Blob_id::TBlob_id& CID2_Request_Get_Blob_Info_Base::C_Blob_id::SetBlob_id(void)
{
    Select(e_Blob_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBlob_id*>(m_object);
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::SetBlob_id(CID2_Request_Get_Blob_Info_Base::C_Blob_id::TBlob_id& value)
{
    TBlob_id* ptr = &value;
    if ( m_choice != e_Blob_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Blob_id;
    }
}

const CID2_Request_Get_Blob_Info_Base::C_Blob_id::TResolve& CID2_Request_Get_Blob_Info_Base::C_Blob_id::GetResolve(void) const
{
    CheckSelected(e_Resolve);
    return *static_cast<const TResolve*>(m_object);
}

CID2_Request_Get_Blob_Info_Base::C_Blob_id::TResolve& CID2_Request_Get_Blob_Info_Base::C_Blob_id::SetResolve(void)
{
    Select(e_Resolve, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TResolve*>(m_object);
}

void CID2_Request_Get_Blob_Info_Base::C_Blob_id::SetResolve(CID2_Request_Get_Blob_Info_Base::C_Blob_id::TResolve& value)
{
    TResolve* ptr = &value;
    if ( m_choice != e_Resolve || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Resolve;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CID2_Request_Get_Blob_Info_Base::C_Blob_id)
{
    SET_INTERNAL_NAME("ID2-Request-Get-Blob-Info", "blob-id");
    SET_CHOICE_MODULE("NCBI-ID2Access");
    ADD_NAMED_REF_CHOICE_VARIANT("blob-id", m_object, CID2_Blob_Id);
    ADD_NAMED_REF_CHOICE_VARIANT("resolve", m_object, C_Resolve);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CID2_Request_Get_Blob_Info_Base::C_Blob_id::C_Blob_id(void)
    : m_choice(e_not_set)
{
}

// destructor
CID2_Request_Get_Blob_Info_Base::C_Blob_id::~C_Blob_id(void)
{
    Reset();
}


void CID2_Request_Get_Blob_Info_Base::ResetBlob_id(void)
{
    if ( !m_Blob_id ) {
        m_Blob_id.Reset(new TBlob_id());
        return;
    }
    (*m_Blob_id).Reset();
}

void CID2_Request_Get_Blob_Info_Base::SetBlob_id(CID2_Request_Get_Blob_Info_Base::TBlob_id& value)
{
    m_Blob_id.Reset(&value);
}

void CID2_Request_Get_Blob_Info_Base::ResetGet_data(void)
{
    m_Get_data.Reset();
}

void CID2_Request_Get_Blob_Info_Base::SetGet_data(CID2_Request_Get_Blob_Info_Base::TGet_data& value)
{
    m_Get_data.Reset(&value);
}

CID2_Request_Get_Blob_Info_Base::TGet_data& CID2_Request_Get_Blob_Info_Base::SetGet_data(void)
{
    if ( !m_Get_data )
        m_Get_data.Reset(new ncbi::objects::CID2_Get_Blob_Details());
    return (*m_Get_data);
}

void CID2_Request_Get_Blob_Info_Base::Reset(void)
{
    ResetBlob_id();
    ResetGet_seq_ids();
    ResetGet_data();
}

BEGIN_NAMED_BASE_CLASS_INFO("ID2-Request-Get-Blob-Info", CID2_Request_Get_Blob_Info)
{
    SET_CLASS_MODULE("NCBI-ID2Access");
    ADD_NAMED_REF_MEMBER("blob-id", m_Blob_id, C_Blob_id);
    ADD_NAMED_NULL_MEMBER("get-seq-ids", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("get-data", m_Get_data, CID2_Get_Blob_Details)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CID2_Request_Get_Blob_Info_Base::CID2_Request_Get_Blob_Info_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetBlob_id();
    }
}

// destructor
CID2_Request_Get_Blob_Info_Base::~CID2_Request_Get_Blob_Info_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

