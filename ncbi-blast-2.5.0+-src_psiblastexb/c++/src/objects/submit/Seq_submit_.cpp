/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'submit.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/submit/Seq_submit.hpp>
#include <objects/seq/Seq_annot.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqset/Seq_entry.hpp>
#include <objects/submit/Submit_block.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeq_submit_Base::C_Data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeq_submit_Base::C_Data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Entrys:
        m_Entrys.Destruct();
        break;
    case e_Annots:
        m_Annots.Destruct();
        break;
    case e_Delete:
        m_Delete.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeq_submit_Base::C_Data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Entrys:
        m_Entrys.Construct();
        break;
    case e_Annots:
        m_Annots.Construct();
        break;
    case e_Delete:
        m_Delete.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeq_submit_Base::C_Data::sm_SelectionNames[] = {
    "not set",
    "entrys",
    "annots",
    "delete"
};

NCBI_NS_STD::string CSeq_submit_Base::C_Data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeq_submit_Base::C_Data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CSeq_submit_Base::C_Data)
{
    SET_INTERNAL_NAME("Seq-submit", "data");
    SET_CHOICE_MODULE("NCBI-Submit");
    ADD_NAMED_BUF_CHOICE_VARIANT("entrys", m_Entrys, STL_list_set, (STL_CRef, (CLASS, (CSeq_entry))));
    ADD_NAMED_BUF_CHOICE_VARIANT("annots", m_Annots, STL_list_set, (STL_CRef, (CLASS, (CSeq_annot))));
    ADD_NAMED_BUF_CHOICE_VARIANT("delete", m_Delete, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeq_submit_Base::C_Data::C_Data(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeq_submit_Base::C_Data::~C_Data(void)
{
    Reset();
}


void CSeq_submit_Base::ResetSub(void)
{
    if ( !m_Sub ) {
        m_Sub.Reset(new TSub());
        return;
    }
    (*m_Sub).Reset();
}

void CSeq_submit_Base::SetSub(CSeq_submit_Base::TSub& value)
{
    m_Sub.Reset(&value);
}

void CSeq_submit_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CSeq_submit_Base::SetData(CSeq_submit_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CSeq_submit_Base::Reset(void)
{
    ResetSub();
    ResetData();
}

BEGIN_NAMED_BASE_CLASS_INFO("Seq-submit", CSeq_submit)
{
    SET_CLASS_MODULE("NCBI-Submit");
    ADD_NAMED_REF_MEMBER("sub", m_Sub, CSubmit_block);
    ADD_NAMED_REF_MEMBER("data", m_Data, C_Data);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeq_submit_Base::CSeq_submit_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSub();
        ResetData();
    }
}

// destructor
CSeq_submit_Base::~CSeq_submit_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

