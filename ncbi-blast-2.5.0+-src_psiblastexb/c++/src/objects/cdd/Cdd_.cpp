/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'cdd.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/cdd/Cdd.hpp>
#include <objects/cdd/Align_annot_set.hpp>
#include <objects/cdd/Cdd_descr_set.hpp>
#include <objects/cdd/Cdd_id.hpp>
#include <objects/cdd/Cdd_id_set.hpp>
#include <objects/cdd/Domain_parent.hpp>
#include <objects/cdd/Matrix.hpp>
#include <objects/cdd/Reject_id.hpp>
#include <objects/cdd/Sequence_tree.hpp>
#include <objects/cdd/Triangle.hpp>
#include <objects/cdd/Update_align.hpp>
#include <objects/cn3d/Cn3d_style_dictionary.hpp>
#include <objects/cn3d/Cn3d_user_annotations.hpp>
#include <objects/mmdb1/Biostruc_annot_set.hpp>
#include <objects/scoremat/PssmWithParameters.hpp>
#include <objects/seq/Bioseq.hpp>
#include <objects/seq/Seq_annot.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqloc/Seq_interval.hpp>
#include <objects/seqset/Seq_entry.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CCdd_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CCdd_Base::ResetId(void)
{
    if ( !m_Id ) {
        m_Id.Reset(new TId());
        return;
    }
    (*m_Id).Reset();
}

void CCdd_Base::SetId(CCdd_Base::TId& value)
{
    m_Id.Reset(&value);
}

void CCdd_Base::ResetDescription(void)
{
    m_Description.Reset();
}

void CCdd_Base::SetDescription(CCdd_Base::TDescription& value)
{
    m_Description.Reset(&value);
}

CCdd_Base::TDescription& CCdd_Base::SetDescription(void)
{
    if ( !m_Description )
        m_Description.Reset(new ncbi::objects::CCdd_descr_set());
    return (*m_Description);
}

void CCdd_Base::ResetSeqannot(void)
{
    m_Seqannot.clear();
    m_set_State[0] &= ~0xc0;
}

void CCdd_Base::ResetFeatures(void)
{
    m_Features.Reset();
}

void CCdd_Base::SetFeatures(CCdd_Base::TFeatures& value)
{
    m_Features.Reset(&value);
}

CCdd_Base::TFeatures& CCdd_Base::SetFeatures(void)
{
    if ( !m_Features )
        m_Features.Reset(new ncbi::objects::CBiostruc_annot_set());
    return (*m_Features);
}

void CCdd_Base::ResetSequences(void)
{
    m_Sequences.Reset();
}

void CCdd_Base::SetSequences(CCdd_Base::TSequences& value)
{
    m_Sequences.Reset(&value);
}

CCdd_Base::TSequences& CCdd_Base::SetSequences(void)
{
    if ( !m_Sequences )
        m_Sequences.Reset(new ncbi::objects::CSeq_entry());
    return (*m_Sequences);
}

void CCdd_Base::ResetProfile_range(void)
{
    m_Profile_range.Reset();
}

void CCdd_Base::SetProfile_range(CCdd_Base::TProfile_range& value)
{
    m_Profile_range.Reset(&value);
}

CCdd_Base::TProfile_range& CCdd_Base::SetProfile_range(void)
{
    if ( !m_Profile_range )
        m_Profile_range.Reset(new ncbi::objects::CSeq_interval());
    return (*m_Profile_range);
}

void CCdd_Base::ResetTrunc_master(void)
{
    m_Trunc_master.Reset();
}

void CCdd_Base::SetTrunc_master(CCdd_Base::TTrunc_master& value)
{
    m_Trunc_master.Reset(&value);
}

CCdd_Base::TTrunc_master& CCdd_Base::SetTrunc_master(void)
{
    if ( !m_Trunc_master )
        m_Trunc_master.Reset(new ncbi::objects::CBioseq());
    return (*m_Trunc_master);
}

void CCdd_Base::ResetPosfreq(void)
{
    m_Posfreq.Reset();
}

void CCdd_Base::SetPosfreq(CCdd_Base::TPosfreq& value)
{
    m_Posfreq.Reset(&value);
}

CCdd_Base::TPosfreq& CCdd_Base::SetPosfreq(void)
{
    if ( !m_Posfreq )
        m_Posfreq.Reset(new ncbi::objects::CMatrix());
    return (*m_Posfreq);
}

void CCdd_Base::ResetScoremat(void)
{
    m_Scoremat.Reset();
}

void CCdd_Base::SetScoremat(CCdd_Base::TScoremat& value)
{
    m_Scoremat.Reset(&value);
}

CCdd_Base::TScoremat& CCdd_Base::SetScoremat(void)
{
    if ( !m_Scoremat )
        m_Scoremat.Reset(new ncbi::objects::CMatrix());
    return (*m_Scoremat);
}

void CCdd_Base::ResetDistance(void)
{
    m_Distance.Reset();
}

void CCdd_Base::SetDistance(CCdd_Base::TDistance& value)
{
    m_Distance.Reset(&value);
}

CCdd_Base::TDistance& CCdd_Base::SetDistance(void)
{
    if ( !m_Distance )
        m_Distance.Reset(new ncbi::objects::CTriangle());
    return (*m_Distance);
}

void CCdd_Base::ResetParent(void)
{
    m_Parent.Reset();
}

void CCdd_Base::SetParent(CCdd_Base::TParent& value)
{
    m_Parent.Reset(&value);
}

CCdd_Base::TParent& CCdd_Base::SetParent(void)
{
    if ( !m_Parent )
        m_Parent.Reset(new ncbi::objects::CCdd_id());
    return (*m_Parent);
}

void CCdd_Base::ResetChildren(void)
{
    m_Children.Reset();
}

void CCdd_Base::SetChildren(CCdd_Base::TChildren& value)
{
    m_Children.Reset(&value);
}

CCdd_Base::TChildren& CCdd_Base::SetChildren(void)
{
    if ( !m_Children )
        m_Children.Reset(new ncbi::objects::CCdd_id_set());
    return (*m_Children);
}

void CCdd_Base::ResetSiblings(void)
{
    m_Siblings.Reset();
}

void CCdd_Base::SetSiblings(CCdd_Base::TSiblings& value)
{
    m_Siblings.Reset(&value);
}

CCdd_Base::TSiblings& CCdd_Base::SetSiblings(void)
{
    if ( !m_Siblings )
        m_Siblings.Reset(new ncbi::objects::CCdd_id_set());
    return (*m_Siblings);
}

void CCdd_Base::ResetNeighbors(void)
{
    m_Neighbors.Reset();
}

void CCdd_Base::SetNeighbors(CCdd_Base::TNeighbors& value)
{
    m_Neighbors.Reset(&value);
}

CCdd_Base::TNeighbors& CCdd_Base::SetNeighbors(void)
{
    if ( !m_Neighbors )
        m_Neighbors.Reset(new ncbi::objects::CCdd_id_set());
    return (*m_Neighbors);
}

void CCdd_Base::ResetPending(void)
{
    m_Pending.clear();
    m_set_State[0] &= ~0xc0000000;
}

void CCdd_Base::ResetRejects(void)
{
    m_Rejects.clear();
    m_set_State[1] &= ~0x3;
}

void CCdd_Base::ResetMaster3d(void)
{
    m_Master3d.clear();
    m_set_State[1] &= ~0xc;
}

void CCdd_Base::ResetAlignannot(void)
{
    m_Alignannot.Reset();
}

void CCdd_Base::SetAlignannot(CCdd_Base::TAlignannot& value)
{
    m_Alignannot.Reset(&value);
}

CCdd_Base::TAlignannot& CCdd_Base::SetAlignannot(void)
{
    if ( !m_Alignannot )
        m_Alignannot.Reset(new ncbi::objects::CAlign_annot_set());
    return (*m_Alignannot);
}

void CCdd_Base::ResetStyle_dictionary(void)
{
    m_Style_dictionary.Reset();
}

void CCdd_Base::SetStyle_dictionary(CCdd_Base::TStyle_dictionary& value)
{
    m_Style_dictionary.Reset(&value);
}

CCdd_Base::TStyle_dictionary& CCdd_Base::SetStyle_dictionary(void)
{
    if ( !m_Style_dictionary )
        m_Style_dictionary.Reset(new ncbi::objects::CCn3d_style_dictionary());
    return (*m_Style_dictionary);
}

void CCdd_Base::ResetUser_annotations(void)
{
    m_User_annotations.Reset();
}

void CCdd_Base::SetUser_annotations(CCdd_Base::TUser_annotations& value)
{
    m_User_annotations.Reset(&value);
}

CCdd_Base::TUser_annotations& CCdd_Base::SetUser_annotations(void)
{
    if ( !m_User_annotations )
        m_User_annotations.Reset(new ncbi::objects::CCn3d_user_annotations());
    return (*m_User_annotations);
}

void CCdd_Base::ResetAncestors(void)
{
    m_Ancestors.clear();
    m_set_State[1] &= ~0xc00;
}

void CCdd_Base::ResetScoreparams(void)
{
    m_Scoreparams.Reset();
}

void CCdd_Base::SetScoreparams(CCdd_Base::TScoreparams& value)
{
    m_Scoreparams.Reset(&value);
}

CCdd_Base::TScoreparams& CCdd_Base::SetScoreparams(void)
{
    if ( !m_Scoreparams )
        m_Scoreparams.Reset(new ncbi::objects::CPssmWithParameters());
    return (*m_Scoreparams);
}

void CCdd_Base::ResetSeqtree(void)
{
    m_Seqtree.Reset();
}

void CCdd_Base::SetSeqtree(CCdd_Base::TSeqtree& value)
{
    m_Seqtree.Reset(&value);
}

CCdd_Base::TSeqtree& CCdd_Base::SetSeqtree(void)
{
    if ( !m_Seqtree )
        m_Seqtree.Reset(new ncbi::objects::CSequence_tree());
    return (*m_Seqtree);
}

void CCdd_Base::Reset(void)
{
    ResetName();
    ResetId();
    ResetDescription();
    ResetSeqannot();
    ResetFeatures();
    ResetSequences();
    ResetProfile_range();
    ResetTrunc_master();
    ResetPosfreq();
    ResetScoremat();
    ResetDistance();
    ResetParent();
    ResetChildren();
    ResetSiblings();
    ResetNeighbors();
    ResetPending();
    ResetRejects();
    ResetMaster3d();
    ResetAlignannot();
    ResetStyle_dictionary();
    ResetUser_annotations();
    ResetAncestors();
    ResetScoreparams();
    ResetSeqtree();
}

BEGIN_NAMED_BASE_CLASS_INFO("Cdd", CCdd)
{
    SET_CLASS_MODULE("NCBI-Cdd");
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_REF_MEMBER("id", m_Id, CCdd_id_set);
    ADD_NAMED_REF_MEMBER("description", m_Description, CCdd_descr_set)->SetOptional();
    ADD_NAMED_MEMBER("seqannot", m_Seqannot, STL_list, (STL_CRef, (CLASS, (CSeq_annot))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("features", m_Features, CBiostruc_annot_set)->SetOptional();
    ADD_NAMED_REF_MEMBER("sequences", m_Sequences, CSeq_entry)->SetOptional();
    ADD_NAMED_REF_MEMBER("profile-range", m_Profile_range, CSeq_interval)->SetOptional();
    ADD_NAMED_REF_MEMBER("trunc-master", m_Trunc_master, CBioseq)->SetOptional();
    ADD_NAMED_REF_MEMBER("posfreq", m_Posfreq, CMatrix)->SetOptional();
    ADD_NAMED_REF_MEMBER("scoremat", m_Scoremat, CMatrix)->SetOptional();
    ADD_NAMED_REF_MEMBER("distance", m_Distance, CTriangle)->SetOptional();
    ADD_NAMED_REF_MEMBER("parent", m_Parent, CCdd_id)->SetOptional();
    ADD_NAMED_REF_MEMBER("children", m_Children, CCdd_id_set)->SetOptional();
    ADD_NAMED_REF_MEMBER("siblings", m_Siblings, CCdd_id_set)->SetOptional();
    ADD_NAMED_REF_MEMBER("neighbors", m_Neighbors, CCdd_id_set)->SetOptional();
    ADD_NAMED_MEMBER("pending", m_Pending, STL_list, (STL_CRef, (CLASS, (CUpdate_align))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("rejects", m_Rejects, STL_list, (STL_CRef, (CLASS, (CReject_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("master3d", m_Master3d, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("alignannot", m_Alignannot, CAlign_annot_set)->SetOptional();
    ADD_NAMED_REF_MEMBER("style-dictionary", m_Style_dictionary, CCn3d_style_dictionary)->SetOptional();
    ADD_NAMED_REF_MEMBER("user-annotations", m_User_annotations, CCn3d_user_annotations)->SetOptional();
    ADD_NAMED_MEMBER("ancestors", m_Ancestors, STL_list, (STL_CRef, (CLASS, (CDomain_parent))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("scoreparams", m_Scoreparams, CPssmWithParameters)->SetOptional();
    ADD_NAMED_REF_MEMBER("seqtree", m_Seqtree, CSequence_tree)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCdd_Base::CCdd_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetId();
    }
}

// destructor
CCdd_Base::~CCdd_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

