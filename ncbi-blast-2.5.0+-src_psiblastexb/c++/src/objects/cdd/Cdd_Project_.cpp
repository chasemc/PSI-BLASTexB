/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'cdd.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/cdd/Cdd_Project.hpp>
#include <objects/cdd/Cdd.hpp>
#include <objects/cdd/Cdd_Script.hpp>
#include <objects/cdd/Cdd_Viewer.hpp>
#include <objects/cdd/Cdd_id_set.hpp>
#include <objects/general/Date.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CCdd_Project_Base::ResetCds(void)
{
    m_Cds.clear();
    m_set_State[0] &= ~0x3;
}

void CCdd_Project_Base::ResetCdcolor(void)
{
    m_Cdcolor.clear();
    m_set_State[0] &= ~0xc;
}

void CCdd_Project_Base::ResetViewers(void)
{
    m_Viewers.clear();
    m_set_State[0] &= ~0x30;
}

void CCdd_Project_Base::ResetLog(void)
{
    m_Log.erase();
    m_set_State[0] &= ~0xc0;
}

void CCdd_Project_Base::ResetScripts(void)
{
    m_Scripts.clear();
    m_set_State[0] &= ~0x300;
}

void CCdd_Project_Base::ResetId(void)
{
    m_Id.Reset();
}

void CCdd_Project_Base::SetId(CCdd_Project_Base::TId& value)
{
    m_Id.Reset(&value);
}

CCdd_Project_Base::TId& CCdd_Project_Base::SetId(void)
{
    if ( !m_Id )
        m_Id.Reset(new ncbi::objects::CCdd_id_set());
    return (*m_Id);
}

void CCdd_Project_Base::ResetRids(void)
{
    m_Rids.clear();
    m_set_State[0] &= ~0x3000;
}

void CCdd_Project_Base::ResetCreate_date(void)
{
    m_Create_date.Reset();
}

void CCdd_Project_Base::SetCreate_date(CCdd_Project_Base::TCreate_date& value)
{
    m_Create_date.Reset(&value);
}

CCdd_Project_Base::TCreate_date& CCdd_Project_Base::SetCreate_date(void)
{
    if ( !m_Create_date )
        m_Create_date.Reset(new ncbi::objects::CDate());
    return (*m_Create_date);
}

void CCdd_Project_Base::ResetUpdate_date(void)
{
    m_Update_date.Reset();
}

void CCdd_Project_Base::SetUpdate_date(CCdd_Project_Base::TUpdate_date& value)
{
    m_Update_date.Reset(&value);
}

CCdd_Project_Base::TUpdate_date& CCdd_Project_Base::SetUpdate_date(void)
{
    if ( !m_Update_date )
        m_Update_date.Reset(new ncbi::objects::CDate());
    return (*m_Update_date);
}

void CCdd_Project_Base::Reset(void)
{
    ResetCds();
    ResetCdcolor();
    ResetViewers();
    ResetLog();
    ResetScripts();
    ResetId();
    ResetRids();
    ResetCreate_date();
    ResetUpdate_date();
    ResetProject_id();
}

BEGIN_NAMED_BASE_CLASS_INFO("Cdd-Project", CCdd_Project)
{
    SET_CLASS_MODULE("NCBI-Cdd");
    ADD_NAMED_MEMBER("cds", m_Cds, STL_list, (STL_CRef, (CLASS, (CCdd))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("cdcolor", m_Cdcolor, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("viewers", m_Viewers, STL_list, (STL_CRef, (CLASS, (CCdd_Viewer))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("log", m_Log)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("scripts", m_Scripts, STL_list, (STL_CRef, (CLASS, (CCdd_Script))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("id", m_Id, CCdd_id_set)->SetOptional();
    ADD_NAMED_MEMBER("rids", m_Rids, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("create-date", m_Create_date, CDate)->SetOptional();
    ADD_NAMED_REF_MEMBER("update-date", m_Update_date, CDate)->SetOptional();
    ADD_NAMED_STD_MEMBER("project-id", m_Project_id)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCdd_Project_Base::CCdd_Project_Base(void)
    : m_Project_id(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CCdd_Project_Base::~CCdd_Project_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

