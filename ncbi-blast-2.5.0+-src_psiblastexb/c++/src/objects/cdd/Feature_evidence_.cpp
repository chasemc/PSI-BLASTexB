/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'cdd.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/cdd/Feature_evidence.hpp>
#include <objects/cdd/Cdd_book_ref.hpp>
#include <objects/mmdb1/Biostruc_annot_set.hpp>
#include <objects/pub/Pub.hpp>
#include <objects/seqfeat/Seq_feat.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CFeature_evidence_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CFeature_evidence_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Comment:
        m_string.Destruct();
        break;
    case e_Reference:
    case e_Bsannot:
    case e_Seqfeat:
    case e_Book_ref:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CFeature_evidence_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Reference:
        (m_object = new(pool) ncbi::objects::CPub())->AddReference();
        break;
    case e_Bsannot:
        (m_object = new(pool) ncbi::objects::CBiostruc_annot_set())->AddReference();
        break;
    case e_Seqfeat:
        (m_object = new(pool) ncbi::objects::CSeq_feat())->AddReference();
        break;
    case e_Book_ref:
        (m_object = new(pool) ncbi::objects::CCdd_book_ref())->AddReference();
        break;
    case e_Comment:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CFeature_evidence_Base::sm_SelectionNames[] = {
    "not set",
    "comment",
    "reference",
    "bsannot",
    "seqfeat",
    "book-ref"
};

NCBI_NS_STD::string CFeature_evidence_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CFeature_evidence_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CFeature_evidence_Base::SetComment(const CFeature_evidence_Base::TComment& value)
{
    Select(e_Comment, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CFeature_evidence_Base::TReference& CFeature_evidence_Base::GetReference(void) const
{
    CheckSelected(e_Reference);
    return *static_cast<const TReference*>(m_object);
}

CFeature_evidence_Base::TReference& CFeature_evidence_Base::SetReference(void)
{
    Select(e_Reference, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReference*>(m_object);
}

void CFeature_evidence_Base::SetReference(CFeature_evidence_Base::TReference& value)
{
    TReference* ptr = &value;
    if ( m_choice != e_Reference || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reference;
    }
}

const CFeature_evidence_Base::TBsannot& CFeature_evidence_Base::GetBsannot(void) const
{
    CheckSelected(e_Bsannot);
    return *static_cast<const TBsannot*>(m_object);
}

CFeature_evidence_Base::TBsannot& CFeature_evidence_Base::SetBsannot(void)
{
    Select(e_Bsannot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBsannot*>(m_object);
}

void CFeature_evidence_Base::SetBsannot(CFeature_evidence_Base::TBsannot& value)
{
    TBsannot* ptr = &value;
    if ( m_choice != e_Bsannot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Bsannot;
    }
}

const CFeature_evidence_Base::TSeqfeat& CFeature_evidence_Base::GetSeqfeat(void) const
{
    CheckSelected(e_Seqfeat);
    return *static_cast<const TSeqfeat*>(m_object);
}

CFeature_evidence_Base::TSeqfeat& CFeature_evidence_Base::SetSeqfeat(void)
{
    Select(e_Seqfeat, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeqfeat*>(m_object);
}

void CFeature_evidence_Base::SetSeqfeat(CFeature_evidence_Base::TSeqfeat& value)
{
    TSeqfeat* ptr = &value;
    if ( m_choice != e_Seqfeat || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seqfeat;
    }
}

const CFeature_evidence_Base::TBook_ref& CFeature_evidence_Base::GetBook_ref(void) const
{
    CheckSelected(e_Book_ref);
    return *static_cast<const TBook_ref*>(m_object);
}

CFeature_evidence_Base::TBook_ref& CFeature_evidence_Base::SetBook_ref(void)
{
    Select(e_Book_ref, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBook_ref*>(m_object);
}

void CFeature_evidence_Base::SetBook_ref(CFeature_evidence_Base::TBook_ref& value)
{
    TBook_ref* ptr = &value;
    if ( m_choice != e_Book_ref || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Book_ref;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Feature-evidence", CFeature_evidence)
{
    SET_CHOICE_MODULE("NCBI-Cdd");
    ADD_NAMED_BUF_CHOICE_VARIANT("comment", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("reference", m_object, CPub);
    ADD_NAMED_REF_CHOICE_VARIANT("bsannot", m_object, CBiostruc_annot_set);
    ADD_NAMED_REF_CHOICE_VARIANT("seqfeat", m_object, CSeq_feat);
    ADD_NAMED_REF_CHOICE_VARIANT("book-ref", m_object, CCdd_book_ref);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CFeature_evidence_Base::CFeature_evidence_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CFeature_evidence_Base::~CFeature_evidence_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

