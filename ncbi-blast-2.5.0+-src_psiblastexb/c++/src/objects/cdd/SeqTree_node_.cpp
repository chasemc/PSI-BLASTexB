/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'cdd.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/cdd/SeqTree_node.hpp>
#include <objects/cdd/Node_annotation.hpp>
#include <objects/seqloc/Seq_interval.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeqTree_node_Base::C_Children::C_Footprint::ResetSeqRange(void)
{
    if ( !m_SeqRange ) {
        m_SeqRange.Reset(new TSeqRange());
        return;
    }
    (*m_SeqRange).Reset();
}

void CSeqTree_node_Base::C_Children::C_Footprint::SetSeqRange(CSeqTree_node_Base::C_Children::C_Footprint::TSeqRange& value)
{
    m_SeqRange.Reset(&value);
}

void CSeqTree_node_Base::C_Children::C_Footprint::Reset(void)
{
    ResetSeqRange();
    ResetRowId();
}

BEGIN_NAMED_CLASS_INFO("", CSeqTree_node_Base::C_Children::C_Footprint)
{
    SET_INTERNAL_NAME("SeqTree-node.children", "footprint");
    SET_CLASS_MODULE("NCBI-Cdd");
    ADD_NAMED_REF_MEMBER("seqRange", m_SeqRange, CSeq_interval);
    ADD_NAMED_STD_MEMBER("rowId", m_RowId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeqTree_node_Base::C_Children::C_Footprint::C_Footprint(void)
    : m_RowId(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSeqRange();
    }
}

// destructor
CSeqTree_node_Base::C_Children::C_Footprint::~C_Footprint(void)
{
}


void CSeqTree_node_Base::C_Children::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqTree_node_Base::C_Children::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Children:
        m_Children.Destruct();
        break;
    case e_Footprint:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqTree_node_Base::C_Children::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Children:
        m_Children.Construct();
        break;
    case e_Footprint:
        (m_object = new(pool) C_Footprint())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqTree_node_Base::C_Children::sm_SelectionNames[] = {
    "not set",
    "children",
    "footprint"
};

NCBI_NS_STD::string CSeqTree_node_Base::C_Children::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqTree_node_Base::C_Children::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeqTree_node_Base::C_Children::TFootprint& CSeqTree_node_Base::C_Children::GetFootprint(void) const
{
    CheckSelected(e_Footprint);
    return *static_cast<const TFootprint*>(m_object);
}

CSeqTree_node_Base::C_Children::TFootprint& CSeqTree_node_Base::C_Children::SetFootprint(void)
{
    Select(e_Footprint, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TFootprint*>(m_object);
}

void CSeqTree_node_Base::C_Children::SetFootprint(CSeqTree_node_Base::C_Children::TFootprint& value)
{
    TFootprint* ptr = &value;
    if ( m_choice != e_Footprint || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Footprint;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CSeqTree_node_Base::C_Children)
{
    SET_INTERNAL_NAME("SeqTree-node", "children");
    SET_CHOICE_MODULE("NCBI-Cdd");
    ADD_NAMED_BUF_CHOICE_VARIANT("children", m_Children, STL_list, (STL_CRef, (CLASS, (CSeqTree_node))));
    ADD_NAMED_REF_CHOICE_VARIANT("footprint", m_object, C_Footprint);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqTree_node_Base::C_Children::C_Children(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqTree_node_Base::C_Children::~C_Children(void)
{
    Reset();
}


void CSeqTree_node_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0xc;
}

void CSeqTree_node_Base::ResetChildren(void)
{
    if ( !m_Children ) {
        m_Children.Reset(new TChildren());
        return;
    }
    (*m_Children).Reset();
}

void CSeqTree_node_Base::SetChildren(CSeqTree_node_Base::TChildren& value)
{
    m_Children.Reset(&value);
}

void CSeqTree_node_Base::ResetAnnotation(void)
{
    m_Annotation.Reset();
}

void CSeqTree_node_Base::SetAnnotation(CSeqTree_node_Base::TAnnotation& value)
{
    m_Annotation.Reset(&value);
}

CSeqTree_node_Base::TAnnotation& CSeqTree_node_Base::SetAnnotation(void)
{
    if ( !m_Annotation )
        m_Annotation.Reset(new ncbi::objects::CNode_annotation());
    return (*m_Annotation);
}

void CSeqTree_node_Base::Reset(void)
{
    ResetIsAnnotated();
    ResetName();
    ResetDistance();
    ResetChildren();
    ResetAnnotation();
}

BEGIN_NAMED_BASE_CLASS_INFO("SeqTree-node", CSeqTree_node)
{
    SET_CLASS_MODULE("NCBI-Cdd");
    ADD_NAMED_STD_MEMBER("isAnnotated", m_IsAnnotated)->SetDefault(new TIsAnnotated(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("distance", m_Distance)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("children", m_Children, C_Children);
    ADD_NAMED_REF_MEMBER("annotation", m_Annotation, CNode_annotation)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeqTree_node_Base::CSeqTree_node_Base(void)
    : m_IsAnnotated(false), m_Distance(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetChildren();
    }
}

// destructor
CSeqTree_node_Base::~CSeqTree_node_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

