/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'taxon3.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/taxon3/T3Data.hpp>
#include <objects/seqfeat/Org_ref.hpp>
#include <objects/taxon3/T3RefreshFlags.hpp>
#include <objects/taxon3/T3StatusFlags.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CT3Data_Base::ResetOrg(void)
{
    if ( !m_Org ) {
        m_Org.Reset(new TOrg());
        return;
    }
    (*m_Org).Reset();
}

void CT3Data_Base::SetOrg(CT3Data_Base::TOrg& value)
{
    m_Org.Reset(&value);
}

void CT3Data_Base::ResetBlast_name_lineage(void)
{
    m_Blast_name_lineage.clear();
    m_set_State[0] &= ~0xc;
}

void CT3Data_Base::ResetStatus(void)
{
    m_Status.clear();
    m_set_State[0] &= ~0x30;
}

void CT3Data_Base::ResetRefresh(void)
{
    m_Refresh.Reset();
}

void CT3Data_Base::SetRefresh(CT3Data_Base::TRefresh& value)
{
    m_Refresh.Reset(&value);
}

CT3Data_Base::TRefresh& CT3Data_Base::SetRefresh(void)
{
    if ( !m_Refresh )
        m_Refresh.Reset(new ncbi::objects::CT3RefreshFlags());
    return (*m_Refresh);
}

void CT3Data_Base::Reset(void)
{
    ResetOrg();
    ResetBlast_name_lineage();
    ResetStatus();
    ResetRefresh();
}

BEGIN_NAMED_BASE_CLASS_INFO("T3Data", CT3Data)
{
    SET_CLASS_MODULE("NCBI-Taxon3");
    ADD_NAMED_REF_MEMBER("org", m_Org, COrg_ref);
    ADD_NAMED_MEMBER("blast-name-lineage", m_Blast_name_lineage, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("status", m_Status, STL_list, (STL_CRef, (CLASS, (CT3StatusFlags))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("refresh", m_Refresh, CT3RefreshFlags)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CT3Data_Base::CT3Data_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetOrg();
    }
}

// destructor
CT3Data_Base::~CT3Data_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

