/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seq.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seq/Seq_hist.hpp>
#include <objects/general/Date.hpp>
#include <objects/seq/Seq_hist_rec.hpp>
#include <objects/seqalign/Seq_align.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeq_hist_Base::C_Deleted::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeq_hist_Base::C_Deleted::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Date:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeq_hist_Base::C_Deleted::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Bool:
        m_Bool = 0;
        break;
    case e_Date:
        (m_object = new(pool) ncbi::objects::CDate())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeq_hist_Base::C_Deleted::sm_SelectionNames[] = {
    "not set",
    "bool",
    "date"
};

NCBI_NS_STD::string CSeq_hist_Base::C_Deleted::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeq_hist_Base::C_Deleted::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeq_hist_Base::C_Deleted::TDate& CSeq_hist_Base::C_Deleted::GetDate(void) const
{
    CheckSelected(e_Date);
    return *static_cast<const TDate*>(m_object);
}

CSeq_hist_Base::C_Deleted::TDate& CSeq_hist_Base::C_Deleted::SetDate(void)
{
    Select(e_Date, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TDate*>(m_object);
}

void CSeq_hist_Base::C_Deleted::SetDate(CSeq_hist_Base::C_Deleted::TDate& value)
{
    TDate* ptr = &value;
    if ( m_choice != e_Date || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Date;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CSeq_hist_Base::C_Deleted)
{
    SET_INTERNAL_NAME("Seq-hist", "deleted");
    SET_CHOICE_MODULE("NCBI-Sequence");
    ADD_NAMED_STD_CHOICE_VARIANT("bool", m_Bool);
    ADD_NAMED_REF_CHOICE_VARIANT("date", m_object, CDate);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeq_hist_Base::C_Deleted::C_Deleted(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeq_hist_Base::C_Deleted::~C_Deleted(void)
{
    Reset();
}


void CSeq_hist_Base::ResetAssembly(void)
{
    m_Assembly.clear();
    m_set_State[0] &= ~0x3;
}

void CSeq_hist_Base::ResetReplaces(void)
{
    m_Replaces.Reset();
}

void CSeq_hist_Base::SetReplaces(CSeq_hist_Base::TReplaces& value)
{
    m_Replaces.Reset(&value);
}

CSeq_hist_Base::TReplaces& CSeq_hist_Base::SetReplaces(void)
{
    if ( !m_Replaces )
        m_Replaces.Reset(new ncbi::objects::CSeq_hist_rec());
    return (*m_Replaces);
}

void CSeq_hist_Base::ResetReplaced_by(void)
{
    m_Replaced_by.Reset();
}

void CSeq_hist_Base::SetReplaced_by(CSeq_hist_Base::TReplaced_by& value)
{
    m_Replaced_by.Reset(&value);
}

CSeq_hist_Base::TReplaced_by& CSeq_hist_Base::SetReplaced_by(void)
{
    if ( !m_Replaced_by )
        m_Replaced_by.Reset(new ncbi::objects::CSeq_hist_rec());
    return (*m_Replaced_by);
}

void CSeq_hist_Base::ResetDeleted(void)
{
    m_Deleted.Reset();
}

void CSeq_hist_Base::SetDeleted(CSeq_hist_Base::TDeleted& value)
{
    m_Deleted.Reset(&value);
}

CSeq_hist_Base::TDeleted& CSeq_hist_Base::SetDeleted(void)
{
    if ( !m_Deleted )
        m_Deleted.Reset(new C_Deleted());
    return (*m_Deleted);
}

void CSeq_hist_Base::Reset(void)
{
    ResetAssembly();
    ResetReplaces();
    ResetReplaced_by();
    ResetDeleted();
}

BEGIN_NAMED_BASE_CLASS_INFO("Seq-hist", CSeq_hist)
{
    SET_CLASS_MODULE("NCBI-Sequence");
    ADD_NAMED_MEMBER("assembly", m_Assembly, STL_list_set, (STL_CRef, (CLASS, (CSeq_align))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("replaces", m_Replaces, CSeq_hist_rec)->SetOptional();
    ADD_NAMED_REF_MEMBER("replaced-by", m_Replaced_by, CSeq_hist_rec)->SetOptional();
    ADD_NAMED_REF_MEMBER("deleted", m_Deleted, C_Deleted)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeq_hist_Base::CSeq_hist_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CSeq_hist_Base::~CSeq_hist_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

