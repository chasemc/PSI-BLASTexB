/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seq.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seq/Seqdesc.hpp>
#include <objects/general/Date.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/general/User_object.hpp>
#include <objects/seq/MolInfo.hpp>
#include <objects/seq/Numbering.hpp>
#include <objects/seq/Pubdesc.hpp>
#include <objects/seqblock/EMBL_block.hpp>
#include <objects/seqblock/GB_block.hpp>
#include <objects/seqblock/PDB_block.hpp>
#include <objects/seqblock/PIR_block.hpp>
#include <objects/seqblock/PRF_block.hpp>
#include <objects/seqblock/SP_block.hpp>
#include <objects/seqfeat/BioSource.hpp>
#include <objects/seqfeat/ModelEvidenceSupport.hpp>
#include <objects/seqfeat/Org_ref.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeqdesc_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqdesc_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Modif:
        m_Modif.Destruct();
        break;
    case e_Het:
        m_Het.Destruct();
        break;
    case e_Name:
    case e_Title:
    case e_Comment:
    case e_Region:
        m_string.Destruct();
        break;
    case e_Org:
    case e_Num:
    case e_Maploc:
    case e_Pir:
    case e_Genbank:
    case e_Pub:
    case e_User:
    case e_Sp:
    case e_Dbxref:
    case e_Embl:
    case e_Create_date:
    case e_Update_date:
    case e_Prf:
    case e_Pdb:
    case e_Source:
    case e_Molinfo:
    case e_Modelev:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqdesc_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Mol_type:
        m_Mol_type = (ncbi::objects::EGIBB_mol)(0);
        break;
    case e_Modif:
        m_Modif.Construct();
        break;
    case e_Method:
        m_Method = (ncbi::objects::EGIBB_method)(0);
        break;
    case e_Org:
        (m_object = new(pool) ncbi::objects::COrg_ref())->AddReference();
        break;
    case e_Num:
        (m_object = new(pool) ncbi::objects::CNumbering())->AddReference();
        break;
    case e_Maploc:
        (m_object = new(pool) ncbi::objects::CDbtag())->AddReference();
        break;
    case e_Pir:
        (m_object = new(pool) ncbi::objects::CPIR_block())->AddReference();
        break;
    case e_Genbank:
        (m_object = new(pool) ncbi::objects::CGB_block())->AddReference();
        break;
    case e_Pub:
        (m_object = new(pool) ncbi::objects::CPubdesc())->AddReference();
        break;
    case e_User:
        (m_object = new(pool) ncbi::objects::CUser_object())->AddReference();
        break;
    case e_Sp:
        (m_object = new(pool) ncbi::objects::CSP_block())->AddReference();
        break;
    case e_Dbxref:
        (m_object = new(pool) ncbi::objects::CDbtag())->AddReference();
        break;
    case e_Embl:
        (m_object = new(pool) ncbi::objects::CEMBL_block())->AddReference();
        break;
    case e_Create_date:
        (m_object = new(pool) ncbi::objects::CDate())->AddReference();
        break;
    case e_Update_date:
        (m_object = new(pool) ncbi::objects::CDate())->AddReference();
        break;
    case e_Prf:
        (m_object = new(pool) ncbi::objects::CPRF_block())->AddReference();
        break;
    case e_Pdb:
        (m_object = new(pool) ncbi::objects::CPDB_block())->AddReference();
        break;
    case e_Het:
        m_Het.Construct();
        break;
    case e_Source:
        (m_object = new(pool) ncbi::objects::CBioSource())->AddReference();
        break;
    case e_Molinfo:
        (m_object = new(pool) ncbi::objects::CMolInfo())->AddReference();
        break;
    case e_Modelev:
        (m_object = new(pool) ncbi::objects::CModelEvidenceSupport())->AddReference();
        break;
    case e_Name:
    case e_Title:
    case e_Comment:
    case e_Region:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqdesc_Base::sm_SelectionNames[] = {
    "not set",
    "mol-type",
    "modif",
    "method",
    "name",
    "title",
    "org",
    "comment",
    "num",
    "maploc",
    "pir",
    "genbank",
    "pub",
    "region",
    "user",
    "sp",
    "dbxref",
    "embl",
    "create-date",
    "update-date",
    "prf",
    "pdb",
    "het",
    "source",
    "molinfo",
    "modelev"
};

NCBI_NS_STD::string CSeqdesc_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqdesc_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqdesc_Base::SetName(const CSeqdesc_Base::TName& value)
{
    Select(e_Name, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CSeqdesc_Base::SetTitle(const CSeqdesc_Base::TTitle& value)
{
    Select(e_Title, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CSeqdesc_Base::TOrg& CSeqdesc_Base::GetOrg(void) const
{
    CheckSelected(e_Org);
    return *static_cast<const TOrg*>(m_object);
}

CSeqdesc_Base::TOrg& CSeqdesc_Base::SetOrg(void)
{
    Select(e_Org, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TOrg*>(m_object);
}

void CSeqdesc_Base::SetOrg(CSeqdesc_Base::TOrg& value)
{
    TOrg* ptr = &value;
    if ( m_choice != e_Org || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Org;
    }
}

void CSeqdesc_Base::SetComment(const CSeqdesc_Base::TComment& value)
{
    Select(e_Comment, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CSeqdesc_Base::TNum& CSeqdesc_Base::GetNum(void) const
{
    CheckSelected(e_Num);
    return *static_cast<const TNum*>(m_object);
}

CSeqdesc_Base::TNum& CSeqdesc_Base::SetNum(void)
{
    Select(e_Num, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TNum*>(m_object);
}

void CSeqdesc_Base::SetNum(CSeqdesc_Base::TNum& value)
{
    TNum* ptr = &value;
    if ( m_choice != e_Num || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Num;
    }
}

const CSeqdesc_Base::TMaploc& CSeqdesc_Base::GetMaploc(void) const
{
    CheckSelected(e_Maploc);
    return *static_cast<const TMaploc*>(m_object);
}

CSeqdesc_Base::TMaploc& CSeqdesc_Base::SetMaploc(void)
{
    Select(e_Maploc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TMaploc*>(m_object);
}

void CSeqdesc_Base::SetMaploc(CSeqdesc_Base::TMaploc& value)
{
    TMaploc* ptr = &value;
    if ( m_choice != e_Maploc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Maploc;
    }
}

const CSeqdesc_Base::TPir& CSeqdesc_Base::GetPir(void) const
{
    CheckSelected(e_Pir);
    return *static_cast<const TPir*>(m_object);
}

CSeqdesc_Base::TPir& CSeqdesc_Base::SetPir(void)
{
    Select(e_Pir, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPir*>(m_object);
}

void CSeqdesc_Base::SetPir(CSeqdesc_Base::TPir& value)
{
    TPir* ptr = &value;
    if ( m_choice != e_Pir || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pir;
    }
}

const CSeqdesc_Base::TGenbank& CSeqdesc_Base::GetGenbank(void) const
{
    CheckSelected(e_Genbank);
    return *static_cast<const TGenbank*>(m_object);
}

CSeqdesc_Base::TGenbank& CSeqdesc_Base::SetGenbank(void)
{
    Select(e_Genbank, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGenbank*>(m_object);
}

void CSeqdesc_Base::SetGenbank(CSeqdesc_Base::TGenbank& value)
{
    TGenbank* ptr = &value;
    if ( m_choice != e_Genbank || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Genbank;
    }
}

const CSeqdesc_Base::TPub& CSeqdesc_Base::GetPub(void) const
{
    CheckSelected(e_Pub);
    return *static_cast<const TPub*>(m_object);
}

CSeqdesc_Base::TPub& CSeqdesc_Base::SetPub(void)
{
    Select(e_Pub, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPub*>(m_object);
}

void CSeqdesc_Base::SetPub(CSeqdesc_Base::TPub& value)
{
    TPub* ptr = &value;
    if ( m_choice != e_Pub || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pub;
    }
}

void CSeqdesc_Base::SetRegion(const CSeqdesc_Base::TRegion& value)
{
    Select(e_Region, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CSeqdesc_Base::TUser& CSeqdesc_Base::GetUser(void) const
{
    CheckSelected(e_User);
    return *static_cast<const TUser*>(m_object);
}

CSeqdesc_Base::TUser& CSeqdesc_Base::SetUser(void)
{
    Select(e_User, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TUser*>(m_object);
}

void CSeqdesc_Base::SetUser(CSeqdesc_Base::TUser& value)
{
    TUser* ptr = &value;
    if ( m_choice != e_User || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_User;
    }
}

const CSeqdesc_Base::TSp& CSeqdesc_Base::GetSp(void) const
{
    CheckSelected(e_Sp);
    return *static_cast<const TSp*>(m_object);
}

CSeqdesc_Base::TSp& CSeqdesc_Base::SetSp(void)
{
    Select(e_Sp, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSp*>(m_object);
}

void CSeqdesc_Base::SetSp(CSeqdesc_Base::TSp& value)
{
    TSp* ptr = &value;
    if ( m_choice != e_Sp || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Sp;
    }
}

const CSeqdesc_Base::TDbxref& CSeqdesc_Base::GetDbxref(void) const
{
    CheckSelected(e_Dbxref);
    return *static_cast<const TDbxref*>(m_object);
}

CSeqdesc_Base::TDbxref& CSeqdesc_Base::SetDbxref(void)
{
    Select(e_Dbxref, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TDbxref*>(m_object);
}

void CSeqdesc_Base::SetDbxref(CSeqdesc_Base::TDbxref& value)
{
    TDbxref* ptr = &value;
    if ( m_choice != e_Dbxref || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Dbxref;
    }
}

const CSeqdesc_Base::TEmbl& CSeqdesc_Base::GetEmbl(void) const
{
    CheckSelected(e_Embl);
    return *static_cast<const TEmbl*>(m_object);
}

CSeqdesc_Base::TEmbl& CSeqdesc_Base::SetEmbl(void)
{
    Select(e_Embl, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TEmbl*>(m_object);
}

void CSeqdesc_Base::SetEmbl(CSeqdesc_Base::TEmbl& value)
{
    TEmbl* ptr = &value;
    if ( m_choice != e_Embl || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Embl;
    }
}

const CSeqdesc_Base::TCreate_date& CSeqdesc_Base::GetCreate_date(void) const
{
    CheckSelected(e_Create_date);
    return *static_cast<const TCreate_date*>(m_object);
}

CSeqdesc_Base::TCreate_date& CSeqdesc_Base::SetCreate_date(void)
{
    Select(e_Create_date, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCreate_date*>(m_object);
}

void CSeqdesc_Base::SetCreate_date(CSeqdesc_Base::TCreate_date& value)
{
    TCreate_date* ptr = &value;
    if ( m_choice != e_Create_date || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Create_date;
    }
}

const CSeqdesc_Base::TUpdate_date& CSeqdesc_Base::GetUpdate_date(void) const
{
    CheckSelected(e_Update_date);
    return *static_cast<const TUpdate_date*>(m_object);
}

CSeqdesc_Base::TUpdate_date& CSeqdesc_Base::SetUpdate_date(void)
{
    Select(e_Update_date, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TUpdate_date*>(m_object);
}

void CSeqdesc_Base::SetUpdate_date(CSeqdesc_Base::TUpdate_date& value)
{
    TUpdate_date* ptr = &value;
    if ( m_choice != e_Update_date || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Update_date;
    }
}

const CSeqdesc_Base::TPrf& CSeqdesc_Base::GetPrf(void) const
{
    CheckSelected(e_Prf);
    return *static_cast<const TPrf*>(m_object);
}

CSeqdesc_Base::TPrf& CSeqdesc_Base::SetPrf(void)
{
    Select(e_Prf, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPrf*>(m_object);
}

void CSeqdesc_Base::SetPrf(CSeqdesc_Base::TPrf& value)
{
    TPrf* ptr = &value;
    if ( m_choice != e_Prf || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Prf;
    }
}

const CSeqdesc_Base::TPdb& CSeqdesc_Base::GetPdb(void) const
{
    CheckSelected(e_Pdb);
    return *static_cast<const TPdb*>(m_object);
}

CSeqdesc_Base::TPdb& CSeqdesc_Base::SetPdb(void)
{
    Select(e_Pdb, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPdb*>(m_object);
}

void CSeqdesc_Base::SetPdb(CSeqdesc_Base::TPdb& value)
{
    TPdb* ptr = &value;
    if ( m_choice != e_Pdb || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pdb;
    }
}

void CSeqdesc_Base::SetHet(const CSeqdesc_Base::THet& value)
{
    Select(e_Het, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_Het = value;
}

const CSeqdesc_Base::TSource& CSeqdesc_Base::GetSource(void) const
{
    CheckSelected(e_Source);
    return *static_cast<const TSource*>(m_object);
}

CSeqdesc_Base::TSource& CSeqdesc_Base::SetSource(void)
{
    Select(e_Source, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSource*>(m_object);
}

void CSeqdesc_Base::SetSource(CSeqdesc_Base::TSource& value)
{
    TSource* ptr = &value;
    if ( m_choice != e_Source || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Source;
    }
}

const CSeqdesc_Base::TMolinfo& CSeqdesc_Base::GetMolinfo(void) const
{
    CheckSelected(e_Molinfo);
    return *static_cast<const TMolinfo*>(m_object);
}

CSeqdesc_Base::TMolinfo& CSeqdesc_Base::SetMolinfo(void)
{
    Select(e_Molinfo, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TMolinfo*>(m_object);
}

void CSeqdesc_Base::SetMolinfo(CSeqdesc_Base::TMolinfo& value)
{
    TMolinfo* ptr = &value;
    if ( m_choice != e_Molinfo || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Molinfo;
    }
}

const CSeqdesc_Base::TModelev& CSeqdesc_Base::GetModelev(void) const
{
    CheckSelected(e_Modelev);
    return *static_cast<const TModelev*>(m_object);
}

CSeqdesc_Base::TModelev& CSeqdesc_Base::SetModelev(void)
{
    Select(e_Modelev, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TModelev*>(m_object);
}

void CSeqdesc_Base::SetModelev(CSeqdesc_Base::TModelev& value)
{
    TModelev* ptr = &value;
    if ( m_choice != e_Modelev || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Modelev;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Seqdesc", CSeqdesc)
{
    SET_CHOICE_MODULE("NCBI-Sequence");
    ADD_NAMED_ENUM_CHOICE_VARIANT("mol-type", m_Mol_type, EGIBB_mol);
    ADD_NAMED_BUF_CHOICE_VARIANT("modif", m_Modif, STL_list_set, (ENUM, (EGIBB_mod, EGIBB_mod)));
    ADD_NAMED_ENUM_CHOICE_VARIANT("method", m_Method, EGIBB_method);
    ADD_NAMED_BUF_CHOICE_VARIANT("name", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("title", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("org", m_object, COrg_ref);
    ADD_NAMED_BUF_CHOICE_VARIANT("comment", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("num", m_object, CNumbering);
    ADD_NAMED_REF_CHOICE_VARIANT("maploc", m_object, CDbtag);
    ADD_NAMED_REF_CHOICE_VARIANT("pir", m_object, CPIR_block);
    ADD_NAMED_REF_CHOICE_VARIANT("genbank", m_object, CGB_block);
    ADD_NAMED_REF_CHOICE_VARIANT("pub", m_object, CPubdesc);
    ADD_NAMED_BUF_CHOICE_VARIANT("region", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("user", m_object, CUser_object);
    ADD_NAMED_REF_CHOICE_VARIANT("sp", m_object, CSP_block);
    ADD_NAMED_REF_CHOICE_VARIANT("dbxref", m_object, CDbtag);
    ADD_NAMED_REF_CHOICE_VARIANT("embl", m_object, CEMBL_block);
    ADD_NAMED_REF_CHOICE_VARIANT("create-date", m_object, CDate);
    ADD_NAMED_REF_CHOICE_VARIANT("update-date", m_object, CDate);
    ADD_NAMED_REF_CHOICE_VARIANT("prf", m_object, CPRF_block);
    ADD_NAMED_REF_CHOICE_VARIANT("pdb", m_object, CPDB_block);
    ADD_NAMED_BUF_CHOICE_VARIANT("het", m_Het, CLASS, (CHeterogen));
    ADD_NAMED_REF_CHOICE_VARIANT("source", m_object, CBioSource);
    ADD_NAMED_REF_CHOICE_VARIANT("molinfo", m_object, CMolInfo);
    ADD_NAMED_REF_CHOICE_VARIANT("modelev", m_object, CModelEvidenceSupport);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqdesc_Base::CSeqdesc_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqdesc_Base::~CSeqdesc_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

