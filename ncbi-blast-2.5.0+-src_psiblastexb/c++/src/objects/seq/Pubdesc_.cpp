/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seq.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seq/Pubdesc.hpp>
#include <objects/pub/Pub_equiv.hpp>
#include <objects/seq/Numbering.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CPubdesc_Base::, EReftype, true)
{
    SET_ENUM_INTERNAL_NAME("Pubdesc", "reftype");
    SET_ENUM_MODULE("NCBI-Sequence");
    ADD_ENUM_VALUE("seq", eReftype_seq);
    ADD_ENUM_VALUE("sites", eReftype_sites);
    ADD_ENUM_VALUE("feats", eReftype_feats);
    ADD_ENUM_VALUE("no-target", eReftype_no_target);
}
END_ENUM_INFO

void CPubdesc_Base::ResetPub(void)
{
    if ( !m_Pub ) {
        m_Pub.Reset(new TPub());
        return;
    }
    (*m_Pub).Reset();
}

void CPubdesc_Base::SetPub(CPubdesc_Base::TPub& value)
{
    m_Pub.Reset(&value);
}

void CPubdesc_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0xc;
}

void CPubdesc_Base::ResetFig(void)
{
    m_Fig.erase();
    m_set_State[0] &= ~0x30;
}

void CPubdesc_Base::ResetNum(void)
{
    m_Num.Reset();
}

void CPubdesc_Base::SetNum(CPubdesc_Base::TNum& value)
{
    m_Num.Reset(&value);
}

CPubdesc_Base::TNum& CPubdesc_Base::SetNum(void)
{
    if ( !m_Num )
        m_Num.Reset(new ncbi::objects::CNumbering());
    return (*m_Num);
}

void CPubdesc_Base::ResetMaploc(void)
{
    m_Maploc.erase();
    m_set_State[0] &= ~0x3000;
}

void CPubdesc_Base::ResetSeq_raw(void)
{
    m_Seq_raw.erase();
    m_set_State[0] &= ~0xc000;
}

void CPubdesc_Base::ResetComment(void)
{
    m_Comment.erase();
    m_set_State[0] &= ~0xc0000;
}

void CPubdesc_Base::Reset(void)
{
    ResetPub();
    ResetName();
    ResetFig();
    ResetNum();
    ResetNumexc();
    ResetPoly_a();
    ResetMaploc();
    ResetSeq_raw();
    ResetAlign_group();
    ResetComment();
    ResetReftype();
}

BEGIN_NAMED_BASE_CLASS_INFO("Pubdesc", CPubdesc)
{
    SET_CLASS_MODULE("NCBI-Sequence");
    ADD_NAMED_REF_MEMBER("pub", m_Pub, CPub_equiv);
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("fig", m_Fig)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("num", m_Num, CNumbering)->SetOptional();
    ADD_NAMED_STD_MEMBER("numexc", m_Numexc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("poly-a", m_Poly_a)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("maploc", m_Maploc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("seq-raw", m_Seq_raw, StringStore, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("align-group", m_Align_group)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("comment", m_Comment)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("reftype", m_Reftype, EReftype)->SetDefault(new TReftype(eReftype_seq))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPubdesc_Base::CPubdesc_Base(void)
    : m_Numexc(0), m_Poly_a(0), m_Align_group(0), m_Reftype(eReftype_seq)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetPub();
    }
}

// destructor
CPubdesc_Base::~CPubdesc_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

