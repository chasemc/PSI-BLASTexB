/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Gene_ref.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/seqfeat/Gene_nomenclature.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGene_ref_Base::ResetLocus(void)
{
    m_Locus.erase();
    m_set_State[0] &= ~0x3;
}

void CGene_ref_Base::ResetAllele(void)
{
    m_Allele.erase();
    m_set_State[0] &= ~0xc;
}

void CGene_ref_Base::ResetDesc(void)
{
    m_Desc.erase();
    m_set_State[0] &= ~0x30;
}

void CGene_ref_Base::ResetMaploc(void)
{
    m_Maploc.erase();
    m_set_State[0] &= ~0xc0;
}

void CGene_ref_Base::ResetDb(void)
{
    m_Db.clear();
    m_set_State[0] &= ~0xc00;
}

void CGene_ref_Base::ResetSyn(void)
{
    m_Syn.clear();
    m_set_State[0] &= ~0x3000;
}

void CGene_ref_Base::ResetLocus_tag(void)
{
    m_Locus_tag.erase();
    m_set_State[0] &= ~0xc000;
}

void CGene_ref_Base::ResetFormal_name(void)
{
    m_Formal_name.Reset();
}

void CGene_ref_Base::SetFormal_name(CGene_ref_Base::TFormal_name& value)
{
    m_Formal_name.Reset(&value);
}

CGene_ref_Base::TFormal_name& CGene_ref_Base::SetFormal_name(void)
{
    if ( !m_Formal_name )
        m_Formal_name.Reset(new ncbi::objects::CGene_nomenclature());
    return (*m_Formal_name);
}

void CGene_ref_Base::Reset(void)
{
    ResetLocus();
    ResetAllele();
    ResetDesc();
    ResetMaploc();
    ResetPseudo();
    ResetDb();
    ResetSyn();
    ResetLocus_tag();
    ResetFormal_name();
}

BEGIN_NAMED_BASE_CLASS_INFO("Gene-ref", CGene_ref)
{
    SET_CLASS_MODULE("NCBI-Gene");
    ADD_NAMED_STD_MEMBER("locus", m_Locus)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("allele", m_Allele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("desc", m_Desc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("maploc", m_Maploc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pseudo", m_Pseudo)->SetDefault(new TPseudo(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("db", m_Db, STL_vector_set, (STL_CRef, (CLASS, (CDbtag))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("syn", m_Syn, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("locus-tag", m_Locus_tag)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("formal-name", m_Formal_name, CGene_nomenclature)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CGene_ref_Base::CGene_ref_Base(void)
    : m_Pseudo(false)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CGene_ref_Base::~CGene_ref_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

