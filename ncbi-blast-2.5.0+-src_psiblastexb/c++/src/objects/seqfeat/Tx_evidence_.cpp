/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Tx_evidence.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CTx_evidence_Base::, EExp_code, false)
{
    SET_ENUM_INTERNAL_NAME("Tx-evidence", "exp-code");
    SET_ENUM_MODULE("NCBI-TxInit");
    ADD_ENUM_VALUE("unknown", eExp_code_unknown);
    ADD_ENUM_VALUE("rna-seq", eExp_code_rna_seq);
    ADD_ENUM_VALUE("rna-size", eExp_code_rna_size);
    ADD_ENUM_VALUE("np-map", eExp_code_np_map);
    ADD_ENUM_VALUE("np-size", eExp_code_np_size);
    ADD_ENUM_VALUE("pe-seq", eExp_code_pe_seq);
    ADD_ENUM_VALUE("cDNA-seq", eExp_code_cDNA_seq);
    ADD_ENUM_VALUE("pe-map", eExp_code_pe_map);
    ADD_ENUM_VALUE("pe-size", eExp_code_pe_size);
    ADD_ENUM_VALUE("pseudo-seq", eExp_code_pseudo_seq);
    ADD_ENUM_VALUE("rev-pe-map", eExp_code_rev_pe_map);
    ADD_ENUM_VALUE("other", eExp_code_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CTx_evidence_Base::, EExpression_system, false)
{
    SET_ENUM_INTERNAL_NAME("Tx-evidence", "expression-system");
    SET_ENUM_MODULE("NCBI-TxInit");
    ADD_ENUM_VALUE("unknown", eExpression_system_unknown);
    ADD_ENUM_VALUE("physiological", eExpression_system_physiological);
    ADD_ENUM_VALUE("in-vitro", eExpression_system_in_vitro);
    ADD_ENUM_VALUE("oocyte", eExpression_system_oocyte);
    ADD_ENUM_VALUE("transfection", eExpression_system_transfection);
    ADD_ENUM_VALUE("transgenic", eExpression_system_transgenic);
    ADD_ENUM_VALUE("other", eExpression_system_other);
}
END_ENUM_INFO

void CTx_evidence_Base::Reset(void)
{
    ResetExp_code();
    ResetExpression_system();
    ResetLow_prec_data();
    ResetFrom_homolog();
}

BEGIN_NAMED_BASE_CLASS_INFO("Tx-evidence", CTx_evidence)
{
    SET_CLASS_MODULE("NCBI-TxInit");
    ADD_NAMED_ENUM_MEMBER("exp-code", m_Exp_code, EExp_code)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("expression-system", m_Expression_system, EExpression_system)->SetDefault(new TExpression_system(eExpression_system_physiological))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("low-prec-data", m_Low_prec_data)->SetDefault(new TLow_prec_data(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("from-homolog", m_From_homolog)->SetDefault(new TFrom_homolog(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CTx_evidence_Base::CTx_evidence_Base(void)
    : m_Exp_code((EExp_code)(0)), m_Expression_system(eExpression_system_physiological), m_Low_prec_data(false), m_From_homolog(false)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CTx_evidence_Base::~CTx_evidence_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

