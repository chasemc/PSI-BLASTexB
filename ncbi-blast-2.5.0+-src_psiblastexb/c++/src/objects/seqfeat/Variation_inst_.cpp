/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Variation_inst.hpp>
#include <objects/seqfeat/Delta_item.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CVariation_inst_Base::, EType, true)
{
    SET_ENUM_INTERNAL_NAME("Variation-inst", "type");
    SET_ENUM_MODULE("NCBI-Variation");
    ADD_ENUM_VALUE("unknown", eType_unknown);
    ADD_ENUM_VALUE("identity", eType_identity);
    ADD_ENUM_VALUE("inv", eType_inv);
    ADD_ENUM_VALUE("snv", eType_snv);
    ADD_ENUM_VALUE("mnp", eType_mnp);
    ADD_ENUM_VALUE("delins", eType_delins);
    ADD_ENUM_VALUE("del", eType_del);
    ADD_ENUM_VALUE("ins", eType_ins);
    ADD_ENUM_VALUE("microsatellite", eType_microsatellite);
    ADD_ENUM_VALUE("transposon", eType_transposon);
    ADD_ENUM_VALUE("cnv", eType_cnv);
    ADD_ENUM_VALUE("direct-copy", eType_direct_copy);
    ADD_ENUM_VALUE("rev-direct-copy", eType_rev_direct_copy);
    ADD_ENUM_VALUE("inverted-copy", eType_inverted_copy);
    ADD_ENUM_VALUE("everted-copy", eType_everted_copy);
    ADD_ENUM_VALUE("translocation", eType_translocation);
    ADD_ENUM_VALUE("prot-missense", eType_prot_missense);
    ADD_ENUM_VALUE("prot-nonsense", eType_prot_nonsense);
    ADD_ENUM_VALUE("prot-neutral", eType_prot_neutral);
    ADD_ENUM_VALUE("prot-silent", eType_prot_silent);
    ADD_ENUM_VALUE("prot-other", eType_prot_other);
    ADD_ENUM_VALUE("other", eType_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CVariation_inst_Base::, EObservation, true)
{
    SET_ENUM_INTERNAL_NAME("Variation-inst", "observation");
    SET_ENUM_MODULE("NCBI-Variation");
    ADD_ENUM_VALUE("asserted", eObservation_asserted);
    ADD_ENUM_VALUE("reference", eObservation_reference);
    ADD_ENUM_VALUE("variant", eObservation_variant);
}
END_ENUM_INFO

void CVariation_inst_Base::ResetDelta(void)
{
    m_Delta.clear();
    m_set_State[0] &= ~0xc;
}

void CVariation_inst_Base::Reset(void)
{
    ResetType();
    ResetDelta();
    ResetObservation();
}

BEGIN_NAMED_BASE_CLASS_INFO("Variation-inst", CVariation_inst)
{
    SET_CLASS_MODULE("NCBI-Variation");
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("delta", m_Delta, STL_list, (STL_CRef, (CLASS, (CDelta_item))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("observation", m_Observation, EObservation)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CVariation_inst_Base::CVariation_inst_Base(void)
    : m_Type((EType)(0)), m_Observation((EObservation)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CVariation_inst_Base::~CVariation_inst_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

