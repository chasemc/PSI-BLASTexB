/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Txinit.hpp>
#include <objects/seqfeat/Gene_ref.hpp>
#include <objects/seqfeat/Org_ref.hpp>
#include <objects/seqfeat/Prot_ref.hpp>
#include <objects/seqfeat/Tx_evidence.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CTxinit_Base::, ETxsystem, false)
{
    SET_ENUM_INTERNAL_NAME("Txinit", "txsystem");
    SET_ENUM_MODULE("NCBI-TxInit");
    ADD_ENUM_VALUE("unknown", eTxsystem_unknown);
    ADD_ENUM_VALUE("pol1", eTxsystem_pol1);
    ADD_ENUM_VALUE("pol2", eTxsystem_pol2);
    ADD_ENUM_VALUE("pol3", eTxsystem_pol3);
    ADD_ENUM_VALUE("bacterial", eTxsystem_bacterial);
    ADD_ENUM_VALUE("viral", eTxsystem_viral);
    ADD_ENUM_VALUE("rna", eTxsystem_rna);
    ADD_ENUM_VALUE("organelle", eTxsystem_organelle);
    ADD_ENUM_VALUE("other", eTxsystem_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CTxinit_Base::, EInittype, false)
{
    SET_ENUM_INTERNAL_NAME("Txinit", "inittype");
    SET_ENUM_MODULE("NCBI-TxInit");
    ADD_ENUM_VALUE("unknown", eInittype_unknown);
    ADD_ENUM_VALUE("single", eInittype_single);
    ADD_ENUM_VALUE("multiple", eInittype_multiple);
    ADD_ENUM_VALUE("region", eInittype_region);
}
END_ENUM_INFO

void CTxinit_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CTxinit_Base::ResetSyn(void)
{
    m_Syn.clear();
    m_set_State[0] &= ~0xc;
}

void CTxinit_Base::ResetGene(void)
{
    m_Gene.clear();
    m_set_State[0] &= ~0x30;
}

void CTxinit_Base::ResetProtein(void)
{
    m_Protein.clear();
    m_set_State[0] &= ~0xc0;
}

void CTxinit_Base::ResetRna(void)
{
    m_Rna.clear();
    m_set_State[0] &= ~0x300;
}

void CTxinit_Base::ResetExpression(void)
{
    m_Expression.erase();
    m_set_State[0] &= ~0xc00;
}

void CTxinit_Base::ResetTxdescr(void)
{
    m_Txdescr.erase();
    m_set_State[0] &= ~0xc000;
}

void CTxinit_Base::ResetTxorg(void)
{
    m_Txorg.Reset();
}

void CTxinit_Base::SetTxorg(CTxinit_Base::TTxorg& value)
{
    m_Txorg.Reset(&value);
}

CTxinit_Base::TTxorg& CTxinit_Base::SetTxorg(void)
{
    if ( !m_Txorg )
        m_Txorg.Reset(new ncbi::objects::COrg_ref());
    return (*m_Txorg);
}

void CTxinit_Base::ResetEvidence(void)
{
    m_Evidence.clear();
    m_set_State[0] &= ~0x3000000;
}

void CTxinit_Base::Reset(void)
{
    ResetName();
    ResetSyn();
    ResetGene();
    ResetProtein();
    ResetRna();
    ResetExpression();
    ResetTxsystem();
    ResetTxdescr();
    ResetTxorg();
    ResetMapping_precise();
    ResetLocation_accurate();
    ResetInittype();
    ResetEvidence();
}

BEGIN_NAMED_BASE_CLASS_INFO("Txinit", CTxinit)
{
    SET_CLASS_MODULE("NCBI-TxInit");
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("syn", m_Syn, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("gene", m_Gene, STL_list, (STL_CRef, (CLASS, (CGene_ref))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("protein", m_Protein, STL_list, (STL_CRef, (CLASS, (CProt_ref))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("rna", m_Rna, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("expression", m_Expression)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("txsystem", m_Txsystem, ETxsystem)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("txdescr", m_Txdescr)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("txorg", m_Txorg, COrg_ref)->SetOptional();
    ADD_NAMED_STD_MEMBER("mapping-precise", m_Mapping_precise)->SetDefault(new TMapping_precise(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("location-accurate", m_Location_accurate)->SetDefault(new TLocation_accurate(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("inittype", m_Inittype, EInittype)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("evidence", m_Evidence, STL_list_set, (STL_CRef, (CLASS, (CTx_evidence))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CTxinit_Base::CTxinit_Base(void)
    : m_Txsystem((ETxsystem)(0)), m_Mapping_precise(false), m_Location_accurate(false), m_Inittype((EInittype)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CTxinit_Base::~CTxinit_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

