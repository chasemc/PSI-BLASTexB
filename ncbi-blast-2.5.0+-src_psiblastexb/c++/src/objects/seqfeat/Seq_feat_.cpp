/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Seq_feat.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/general/User_object.hpp>
#include <objects/pub/Pub_set.hpp>
#include <objects/seqfeat/Feat_id.hpp>
#include <objects/seqfeat/Gb_qual.hpp>
#include <objects/seqfeat/SeqFeatData.hpp>
#include <objects/seqfeat/SeqFeatSupport.hpp>
#include <objects/seqfeat/SeqFeatXref.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSeq_feat_Base::, EExp_ev, false)
{
    SET_ENUM_INTERNAL_NAME("Seq-feat", "exp-ev");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("experimental", eExp_ev_experimental);
    ADD_ENUM_VALUE("not-experimental", eExp_ev_not_experimental);
}
END_ENUM_INFO

void CSeq_feat_Base::ResetId(void)
{
    m_Id.Reset();
}

void CSeq_feat_Base::SetId(CSeq_feat_Base::TId& value)
{
    m_Id.Reset(&value);
}

CSeq_feat_Base::TId& CSeq_feat_Base::SetId(void)
{
    if ( !m_Id )
        m_Id.Reset(new ncbi::objects::CFeat_id());
    return (*m_Id);
}

void CSeq_feat_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CSeq_feat_Base::SetData(CSeq_feat_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CSeq_feat_Base::ResetComment(void)
{
    m_Comment.erase();
    m_set_State[0] &= ~0x300;
}

void CSeq_feat_Base::ResetProduct(void)
{
    m_Product.Reset();
}

void CSeq_feat_Base::SetProduct(CSeq_feat_Base::TProduct& value)
{
    m_Product.Reset(&value);
}

CSeq_feat_Base::TProduct& CSeq_feat_Base::SetProduct(void)
{
    if ( !m_Product )
        m_Product.Reset(new ncbi::objects::CSeq_loc());
    return (*m_Product);
}

void CSeq_feat_Base::ResetLocation(void)
{
    if ( !m_Location ) {
        m_Location.Reset(new TLocation());
        return;
    }
    (*m_Location).Reset();
}

void CSeq_feat_Base::SetLocation(CSeq_feat_Base::TLocation& value)
{
    m_Location.Reset(&value);
}

void CSeq_feat_Base::ResetQual(void)
{
    m_Qual.clear();
    m_set_State[0] &= ~0xc000;
}

void CSeq_feat_Base::ResetTitle(void)
{
    m_Title.erase();
    m_set_State[0] &= ~0x30000;
}

void CSeq_feat_Base::ResetExt(void)
{
    m_Ext.Reset();
}

void CSeq_feat_Base::SetExt(CSeq_feat_Base::TExt& value)
{
    m_Ext.Reset(&value);
}

CSeq_feat_Base::TExt& CSeq_feat_Base::SetExt(void)
{
    if ( !m_Ext )
        m_Ext.Reset(new ncbi::objects::CUser_object());
    return (*m_Ext);
}

void CSeq_feat_Base::ResetCit(void)
{
    m_Cit.Reset();
}

void CSeq_feat_Base::SetCit(CSeq_feat_Base::TCit& value)
{
    m_Cit.Reset(&value);
}

CSeq_feat_Base::TCit& CSeq_feat_Base::SetCit(void)
{
    if ( !m_Cit )
        m_Cit.Reset(new ncbi::objects::CPub_set());
    return (*m_Cit);
}

void CSeq_feat_Base::ResetXref(void)
{
    m_Xref.clear();
    m_set_State[0] &= ~0x3000000;
}

void CSeq_feat_Base::ResetDbxref(void)
{
    m_Dbxref.clear();
    m_set_State[0] &= ~0xc000000;
}

void CSeq_feat_Base::ResetExcept_text(void)
{
    m_Except_text.erase();
    m_set_State[0] &= ~0xc0000000;
}

void CSeq_feat_Base::ResetIds(void)
{
    m_Ids.clear();
    m_set_State[1] &= ~0x3;
}

void CSeq_feat_Base::ResetExts(void)
{
    m_Exts.clear();
    m_set_State[1] &= ~0xc;
}

void CSeq_feat_Base::ResetSupport(void)
{
    m_Support.Reset();
}

void CSeq_feat_Base::SetSupport(CSeq_feat_Base::TSupport& value)
{
    m_Support.Reset(&value);
}

CSeq_feat_Base::TSupport& CSeq_feat_Base::SetSupport(void)
{
    if ( !m_Support )
        m_Support.Reset(new ncbi::objects::CSeqFeatSupport());
    return (*m_Support);
}

void CSeq_feat_Base::Reset(void)
{
    ResetId();
    ResetData();
    ResetPartial();
    ResetExcept();
    ResetComment();
    ResetProduct();
    ResetLocation();
    ResetQual();
    ResetTitle();
    ResetExt();
    ResetCit();
    ResetExp_ev();
    ResetXref();
    ResetDbxref();
    ResetPseudo();
    ResetExcept_text();
    ResetIds();
    ResetExts();
    ResetSupport();
}

BEGIN_NAMED_BASE_CLASS_INFO("Seq-feat", CSeq_feat)
{
    SET_CLASS_MODULE("NCBI-Seqfeat");
    ADD_NAMED_REF_MEMBER("id", m_Id, CFeat_id)->SetOptional();
    ADD_NAMED_REF_MEMBER("data", m_Data, CSeqFeatData);
    ADD_NAMED_STD_MEMBER("partial", m_Partial)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("except", m_Except)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("comment", m_Comment)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("product", m_Product, CSeq_loc)->SetOptional();
    ADD_NAMED_REF_MEMBER("location", m_Location, CSeq_loc);
    ADD_NAMED_MEMBER("qual", m_Qual, STL_vector, (STL_CRef, (CLASS, (CGb_qual))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("title", m_Title)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("ext", m_Ext, CUser_object)->SetOptional();
    ADD_NAMED_REF_MEMBER("cit", m_Cit, CPub_set)->SetOptional();
    ADD_NAMED_ENUM_MEMBER("exp-ev", m_Exp_ev, EExp_ev)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("xref", m_Xref, STL_vector_set, (STL_CRef, (CLASS, (CSeqFeatXref))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("dbxref", m_Dbxref, STL_vector_set, (STL_CRef, (CLASS, (CDbtag))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pseudo", m_Pseudo)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("except-text", m_Except_text)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("ids", m_Ids, STL_list_set, (STL_CRef, (CLASS, (CFeat_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("exts", m_Exts, STL_list_set, (STL_CRef, (CLASS, (CUser_object))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("support", m_Support, CSeqFeatSupport)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeq_feat_Base::CSeq_feat_Base(void)
    : m_Partial(0), m_Except(0), m_Exp_ev((EExp_ev)(0)), m_Pseudo(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetData();
        ResetLocation();
    }
}

// destructor
CSeq_feat_Base::~CSeq_feat_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

