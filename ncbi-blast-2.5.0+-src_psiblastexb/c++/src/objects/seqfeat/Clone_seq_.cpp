/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Clone_seq.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CClone_seq_Base::, EType, true)
{
    SET_ENUM_INTERNAL_NAME("Clone-seq", "type");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("insert", eType_insert);
    ADD_ENUM_VALUE("end", eType_end);
    ADD_ENUM_VALUE("other", eType_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CClone_seq_Base::, EConfidence, true)
{
    SET_ENUM_INTERNAL_NAME("Clone-seq", "confidence");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("multiple", eConfidence_multiple);
    ADD_ENUM_VALUE("na", eConfidence_na);
    ADD_ENUM_VALUE("nohit-rep", eConfidence_nohit_rep);
    ADD_ENUM_VALUE("nohitnorep", eConfidence_nohitnorep);
    ADD_ENUM_VALUE("other-chrm", eConfidence_other_chrm);
    ADD_ENUM_VALUE("unique", eConfidence_unique);
    ADD_ENUM_VALUE("virtual", eConfidence_virtual);
    ADD_ENUM_VALUE("multiple-rep", eConfidence_multiple_rep);
    ADD_ENUM_VALUE("multiplenorep", eConfidence_multiplenorep);
    ADD_ENUM_VALUE("no-hit", eConfidence_no_hit);
    ADD_ENUM_VALUE("other", eConfidence_other);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CClone_seq_Base::, ESupport, true)
{
    SET_ENUM_INTERNAL_NAME("Clone-seq", "support");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("prototype", eSupport_prototype);
    ADD_ENUM_VALUE("supporting", eSupport_supporting);
    ADD_ENUM_VALUE("supports-other", eSupport_supports_other);
    ADD_ENUM_VALUE("non-supporting", eSupport_non_supporting);
}
END_ENUM_INFO

void CClone_seq_Base::ResetLocation(void)
{
    if ( !m_Location ) {
        m_Location.Reset(new TLocation());
        return;
    }
    (*m_Location).Reset();
}

void CClone_seq_Base::SetLocation(CClone_seq_Base::TLocation& value)
{
    m_Location.Reset(&value);
}

void CClone_seq_Base::ResetSeq(void)
{
    m_Seq.Reset();
}

void CClone_seq_Base::SetSeq(CClone_seq_Base::TSeq& value)
{
    m_Seq.Reset(&value);
}

CClone_seq_Base::TSeq& CClone_seq_Base::SetSeq(void)
{
    if ( !m_Seq )
        m_Seq.Reset(new ncbi::objects::CSeq_loc());
    return (*m_Seq);
}

void CClone_seq_Base::ResetAlign_id(void)
{
    m_Align_id.Reset();
}

void CClone_seq_Base::SetAlign_id(CClone_seq_Base::TAlign_id& value)
{
    m_Align_id.Reset(&value);
}

CClone_seq_Base::TAlign_id& CClone_seq_Base::SetAlign_id(void)
{
    if ( !m_Align_id )
        m_Align_id.Reset(new ncbi::objects::CDbtag());
    return (*m_Align_id);
}

void CClone_seq_Base::Reset(void)
{
    ResetType();
    ResetConfidence();
    ResetLocation();
    ResetSeq();
    ResetAlign_id();
    ResetSupport();
}

BEGIN_NAMED_BASE_CLASS_INFO("Clone-seq", CClone_seq)
{
    SET_CLASS_MODULE("NCBI-Seqfeat");
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("confidence", m_Confidence, EConfidence)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("location", m_Location, CSeq_loc);
    ADD_NAMED_REF_MEMBER("seq", m_Seq, CSeq_loc)->SetOptional();
    ADD_NAMED_REF_MEMBER("align-id", m_Align_id, CDbtag)->SetOptional();
    ADD_NAMED_ENUM_MEMBER("support", m_Support, ESupport)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CClone_seq_Base::CClone_seq_Base(void)
    : m_Type((EType)(0)), m_Confidence((EConfidence)(0)), m_Support((ESupport)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetLocation();
    }
}

// destructor
CClone_seq_Base::~CClone_seq_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

