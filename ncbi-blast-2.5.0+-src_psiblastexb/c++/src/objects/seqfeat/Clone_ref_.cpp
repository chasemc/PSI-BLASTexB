/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Clone_ref.hpp>
#include <objects/seqfeat/Clone_seq_set.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CClone_ref_Base::, EPlacement_method, true)
{
    SET_ENUM_INTERNAL_NAME("Clone-ref", "placement-method");
    SET_ENUM_MODULE("NCBI-Seqfeat");
    ADD_ENUM_VALUE("end-seq", ePlacement_method_end_seq);
    ADD_ENUM_VALUE("insert-alignment", ePlacement_method_insert_alignment);
    ADD_ENUM_VALUE("sts", ePlacement_method_sts);
    ADD_ENUM_VALUE("fish", ePlacement_method_fish);
    ADD_ENUM_VALUE("fingerprint", ePlacement_method_fingerprint);
    ADD_ENUM_VALUE("end-seq-insert-alignment", ePlacement_method_end_seq_insert_alignment);
    ADD_ENUM_VALUE("external", ePlacement_method_external);
    ADD_ENUM_VALUE("curated", ePlacement_method_curated);
    ADD_ENUM_VALUE("other", ePlacement_method_other);
}
END_ENUM_INFO

void CClone_ref_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x3;
}

void CClone_ref_Base::ResetLibrary(void)
{
    m_Library.erase();
    m_set_State[0] &= ~0xc;
}

void CClone_ref_Base::ResetClone_seq(void)
{
    m_Clone_seq.Reset();
}

void CClone_ref_Base::SetClone_seq(CClone_ref_Base::TClone_seq& value)
{
    m_Clone_seq.Reset(&value);
}

CClone_ref_Base::TClone_seq& CClone_ref_Base::SetClone_seq(void)
{
    if ( !m_Clone_seq )
        m_Clone_seq.Reset(new ncbi::objects::CClone_seq_set());
    return (*m_Clone_seq);
}

void CClone_ref_Base::Reset(void)
{
    ResetName();
    ResetLibrary();
    ResetConcordant();
    ResetUnique();
    ResetPlacement_method();
    ResetClone_seq();
}

BEGIN_NAMED_BASE_CLASS_INFO("Clone-ref", CClone_ref)
{
    SET_CLASS_MODULE("NCBI-Seqfeat");
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("library", m_Library)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("concordant", m_Concordant)->SetDefault(new TConcordant(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("unique", m_Unique)->SetDefault(new TUnique(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("placement-method", m_Placement_method, EPlacement_method)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("clone-seq", m_Clone_seq, CClone_seq_set)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CClone_ref_Base::CClone_ref_Base(void)
    : m_Concordant(false), m_Unique(false), m_Placement_method((EPlacement_method)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CClone_ref_Base::~CClone_ref_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

