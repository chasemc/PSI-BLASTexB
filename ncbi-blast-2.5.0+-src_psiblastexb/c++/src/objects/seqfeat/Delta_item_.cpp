/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqfeat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqfeat/Delta_item.hpp>
#include <objects/general/Int_fuzz.hpp>
#include <objects/seq/Seq_literal.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CDelta_item_Base::C_Seq::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CDelta_item_Base::C_Seq::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Literal:
    case e_Loc:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CDelta_item_Base::C_Seq::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Literal:
        (m_object = new(pool) ncbi::objects::CSeq_literal())->AddReference();
        break;
    case e_Loc:
        (m_object = new(pool) ncbi::objects::CSeq_loc())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CDelta_item_Base::C_Seq::sm_SelectionNames[] = {
    "not set",
    "literal",
    "loc",
    "this"
};

NCBI_NS_STD::string CDelta_item_Base::C_Seq::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CDelta_item_Base::C_Seq::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CDelta_item_Base::C_Seq::TLiteral& CDelta_item_Base::C_Seq::GetLiteral(void) const
{
    CheckSelected(e_Literal);
    return *static_cast<const TLiteral*>(m_object);
}

CDelta_item_Base::C_Seq::TLiteral& CDelta_item_Base::C_Seq::SetLiteral(void)
{
    Select(e_Literal, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TLiteral*>(m_object);
}

void CDelta_item_Base::C_Seq::SetLiteral(CDelta_item_Base::C_Seq::TLiteral& value)
{
    TLiteral* ptr = &value;
    if ( m_choice != e_Literal || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Literal;
    }
}

const CDelta_item_Base::C_Seq::TLoc& CDelta_item_Base::C_Seq::GetLoc(void) const
{
    CheckSelected(e_Loc);
    return *static_cast<const TLoc*>(m_object);
}

CDelta_item_Base::C_Seq::TLoc& CDelta_item_Base::C_Seq::SetLoc(void)
{
    Select(e_Loc, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TLoc*>(m_object);
}

void CDelta_item_Base::C_Seq::SetLoc(CDelta_item_Base::C_Seq::TLoc& value)
{
    TLoc* ptr = &value;
    if ( m_choice != e_Loc || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Loc;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CDelta_item_Base::C_Seq)
{
    SET_INTERNAL_NAME("Delta-item", "seq");
    SET_CHOICE_MODULE("NCBI-Variation");
    ADD_NAMED_REF_CHOICE_VARIANT("literal", m_object, CSeq_literal);
    ADD_NAMED_REF_CHOICE_VARIANT("loc", m_object, CSeq_loc);
    ADD_NAMED_NULL_CHOICE_VARIANT("this", null, ());
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CDelta_item_Base::C_Seq::C_Seq(void)
    : m_choice(e_not_set)
{
}

// destructor
CDelta_item_Base::C_Seq::~C_Seq(void)
{
    Reset();
}


BEGIN_NAMED_ENUM_IN_INFO("", CDelta_item_Base::, EAction, true)
{
    SET_ENUM_INTERNAL_NAME("Delta-item", "action");
    SET_ENUM_MODULE("NCBI-Variation");
    ADD_ENUM_VALUE("morph", eAction_morph);
    ADD_ENUM_VALUE("offset", eAction_offset);
    ADD_ENUM_VALUE("del-at", eAction_del_at);
    ADD_ENUM_VALUE("ins-before", eAction_ins_before);
}
END_ENUM_INFO

void CDelta_item_Base::ResetSeq(void)
{
    m_Seq.Reset();
}

void CDelta_item_Base::SetSeq(CDelta_item_Base::TSeq& value)
{
    m_Seq.Reset(&value);
}

CDelta_item_Base::TSeq& CDelta_item_Base::SetSeq(void)
{
    if ( !m_Seq )
        m_Seq.Reset(new C_Seq());
    return (*m_Seq);
}

void CDelta_item_Base::ResetMultiplier_fuzz(void)
{
    m_Multiplier_fuzz.Reset();
}

void CDelta_item_Base::SetMultiplier_fuzz(CDelta_item_Base::TMultiplier_fuzz& value)
{
    m_Multiplier_fuzz.Reset(&value);
}

CDelta_item_Base::TMultiplier_fuzz& CDelta_item_Base::SetMultiplier_fuzz(void)
{
    if ( !m_Multiplier_fuzz )
        m_Multiplier_fuzz.Reset(new ncbi::objects::CInt_fuzz());
    return (*m_Multiplier_fuzz);
}

void CDelta_item_Base::Reset(void)
{
    ResetSeq();
    ResetMultiplier();
    ResetMultiplier_fuzz();
    ResetAction();
}

BEGIN_NAMED_BASE_CLASS_INFO("Delta-item", CDelta_item)
{
    SET_CLASS_MODULE("NCBI-Variation");
    ADD_NAMED_REF_MEMBER("seq", m_Seq, C_Seq)->SetOptional();
    ADD_NAMED_STD_MEMBER("multiplier", m_Multiplier)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("multiplier-fuzz", m_Multiplier_fuzz, CInt_fuzz)->SetOptional();
    ADD_NAMED_ENUM_MEMBER("action", m_Action, EAction)->SetDefault(new TAction(eAction_morph))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CDelta_item_Base::CDelta_item_Base(void)
    : m_Multiplier(0), m_Action(eAction_morph)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CDelta_item_Base::~CDelta_item_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

