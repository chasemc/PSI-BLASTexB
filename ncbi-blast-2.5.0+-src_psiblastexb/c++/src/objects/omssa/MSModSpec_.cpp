/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'omssa.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/omssa/MSModSpec.hpp>
#include <objects/omssa/MSMassSet.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CMSModSpec_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0x30;
}

void CMSModSpec_Base::ResetResidues(void)
{
    m_Residues.clear();
    m_set_State[0] &= ~0x3000;
}

void CMSModSpec_Base::ResetNeutralloss(void)
{
    m_Neutralloss.Reset();
}

void CMSModSpec_Base::SetNeutralloss(CMSModSpec_Base::TNeutralloss& value)
{
    m_Neutralloss.Reset(&value);
}

CMSModSpec_Base::TNeutralloss& CMSModSpec_Base::SetNeutralloss(void)
{
    if ( !m_Neutralloss )
        m_Neutralloss.Reset(new ncbi::objects::CMSMassSet());
    return (*m_Neutralloss);
}

void CMSModSpec_Base::ResetPsi_ms(void)
{
    m_Psi_ms.erase();
    m_set_State[0] &= ~0xc0000;
}

void CMSModSpec_Base::Reset(void)
{
    ResetMod();
    ResetType();
    ResetName();
    ResetMonomass();
    ResetAveragemass();
    ResetN15mass();
    ResetResidues();
    ResetNeutralloss();
    ResetUnimod();
    ResetPsi_ms();
}

BEGIN_NAMED_BASE_CLASS_INFO("MSModSpec", CMSModSpec)
{
    SET_CLASS_MODULE("OMSSA");
    ADD_NAMED_ENUM_MEMBER("mod", m_Mod, EMSMod)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EMSModType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("monomass", m_Monomass)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("averagemass", m_Averagemass)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("n15mass", m_N15mass)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("residues", m_Residues, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("neutralloss", m_Neutralloss, CMSMassSet)->SetOptional();
    ADD_NAMED_STD_MEMBER("unimod", m_Unimod)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("psi-ms", m_Psi_ms)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CMSModSpec_Base::CMSModSpec_Base(void)
    : m_Mod((int)(0)), m_Type((int)(0)), m_Monomass(0), m_Averagemass(0), m_N15mass(0), m_Unimod(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CMSModSpec_Base::~CMSModSpec_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

