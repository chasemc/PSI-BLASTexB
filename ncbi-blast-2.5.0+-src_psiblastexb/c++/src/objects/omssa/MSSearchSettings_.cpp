/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'omssa.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/omssa/MSSearchSettings.hpp>
#include <objects/omssa/MSChargeHandle.hpp>
#include <objects/omssa/MSInFile.hpp>
#include <objects/omssa/MSIterativeSettings.hpp>
#include <objects/omssa/MSLibrarySettings.hpp>
#include <objects/omssa/MSModSpecSet.hpp>
#include <objects/omssa/MSOutFile.hpp>
#include <objects/omssa/NameValue.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CMSSearchSettings_Base::ResetIonstosearch(void)
{
    m_Ionstosearch.clear();
    m_set_State[0] &= ~0x30;
}

void CMSSearchSettings_Base::ResetFixed(void)
{
    m_Fixed.clear();
    m_set_State[0] &= ~0x30000000;
}

void CMSSearchSettings_Base::ResetVariable(void)
{
    m_Variable.clear();
    m_set_State[0] &= ~0xc0000000;
}

void CMSSearchSettings_Base::ResetDb(void)
{
    m_Db.erase();
    m_set_State[1] &= ~0xc0;
}

void CMSSearchSettings_Base::ResetTaxids(void)
{
    m_Taxids.clear();
    m_set_State[1] &= ~0xc0000;
}

void CMSSearchSettings_Base::ResetChargehandling(void)
{
    m_Chargehandling.Reset();
}

void CMSSearchSettings_Base::SetChargehandling(CMSSearchSettings_Base::TChargehandling& value)
{
    m_Chargehandling.Reset(&value);
}

CMSSearchSettings_Base::TChargehandling& CMSSearchSettings_Base::SetChargehandling(void)
{
    if ( !m_Chargehandling )
        m_Chargehandling.Reset(new ncbi::objects::CMSChargeHandle());
    return (*m_Chargehandling);
}

void CMSSearchSettings_Base::ResetUsermods(void)
{
    m_Usermods.Reset();
}

void CMSSearchSettings_Base::SetUsermods(CMSSearchSettings_Base::TUsermods& value)
{
    m_Usermods.Reset(&value);
}

CMSSearchSettings_Base::TUsermods& CMSSearchSettings_Base::SetUsermods(void)
{
    if ( !m_Usermods )
        m_Usermods.Reset(new ncbi::objects::CMSModSpecSet());
    return (*m_Usermods);
}

void CMSSearchSettings_Base::ResetIterativesettings(void)
{
    m_Iterativesettings.Reset();
}

void CMSSearchSettings_Base::SetIterativesettings(CMSSearchSettings_Base::TIterativesettings& value)
{
    m_Iterativesettings.Reset(&value);
}

CMSSearchSettings_Base::TIterativesettings& CMSSearchSettings_Base::SetIterativesettings(void)
{
    if ( !m_Iterativesettings )
        m_Iterativesettings.Reset(new ncbi::objects::CMSIterativeSettings());
    return (*m_Iterativesettings);
}

void CMSSearchSettings_Base::ResetInfiles(void)
{
    m_Infiles.clear();
    m_set_State[2] &= ~0x3000;
}

void CMSSearchSettings_Base::ResetOutfiles(void)
{
    m_Outfiles.clear();
    m_set_State[2] &= ~0xc000;
}

void CMSSearchSettings_Base::ResetLibsearchsettings(void)
{
    m_Libsearchsettings.Reset();
}

void CMSSearchSettings_Base::SetLibsearchsettings(CMSSearchSettings_Base::TLibsearchsettings& value)
{
    m_Libsearchsettings.Reset(&value);
}

CMSSearchSettings_Base::TLibsearchsettings& CMSSearchSettings_Base::SetLibsearchsettings(void)
{
    if ( !m_Libsearchsettings )
        m_Libsearchsettings.Reset(new ncbi::objects::CMSLibrarySettings());
    return (*m_Libsearchsettings);
}

void CMSSearchSettings_Base::ResetNoprolineions(void)
{
    m_Noprolineions.clear();
    m_set_State[2] &= ~0x30000000;
}

void CMSSearchSettings_Base::ResetOthersettings(void)
{
    m_Othersettings.clear();
    m_set_State[3] &= ~0x3;
}

void CMSSearchSettings_Base::Reset(void)
{
    ResetPrecursorsearchtype();
    ResetProductsearchtype();
    ResetIonstosearch();
    ResetPeptol();
    ResetMsmstol();
    ResetZdep();
    ResetCutoff();
    ResetCutlo();
    ResetCuthi();
    ResetCutinc();
    ResetSinglewin();
    ResetDoublewin();
    ResetSinglenum();
    ResetDoublenum();
    ResetFixed();
    ResetVariable();
    ResetEnzyme();
    ResetMissedcleave();
    ResetHitlistlen();
    ResetDb();
    ResetTophitnum();
    ResetMinhit();
    ResetMinspectra();
    ResetScale();
    ResetMaxmods();
    ResetTaxids();
    ResetChargehandling();
    ResetUsermods();
    ResetPseudocount();
    ResetSearchb1();
    ResetSearchctermproduct();
    ResetMaxproductions();
    ResetMinnoenzyme();
    ResetMaxnoenzyme();
    ResetExactmass();
    ResetSettingid();
    ResetIterativesettings();
    ResetPrecursorcull();
    ResetInfiles();
    ResetOutfiles();
    ResetNocorrelationscore();
    ResetProbfollowingion();
    ResetNmethionine();
    ResetAutomassadjust();
    ResetLomasscutoff();
    ResetLibsearchsettings();
    ResetNoprolineions();
    ResetReversesearch();
    ResetOthersettings();
    ResetNumisotopes();
    ResetPepppm();
    ResetMsmsppm();
    ResetReportedhitcount();
}

BEGIN_NAMED_BASE_CLASS_INFO("MSSearchSettings", CMSSearchSettings)
{
    SET_CLASS_MODULE("OMSSA");
    ADD_NAMED_ENUM_MEMBER("precursorsearchtype", m_Precursorsearchtype, EMSSearchType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("productsearchtype", m_Productsearchtype, EMSSearchType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("ionstosearch", m_Ionstosearch, STL_list, (ENUM, (int, EMSIonType)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("peptol", m_Peptol)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("msmstol", m_Msmstol)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("zdep", m_Zdep, EMSZdependence)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("cutoff", m_Cutoff)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("cutlo", m_Cutlo)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("cuthi", m_Cuthi)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("cutinc", m_Cutinc)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("singlewin", m_Singlewin)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("doublewin", m_Doublewin)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("singlenum", m_Singlenum)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("doublenum", m_Doublenum)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("fixed", m_Fixed, STL_list, (ENUM, (int, EMSMod)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("variable", m_Variable, STL_list, (ENUM, (int, EMSMod)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("enzyme", m_Enzyme, EMSEnzymes)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("missedcleave", m_Missedcleave)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("hitlistlen", m_Hitlistlen)->SetDefault(new THitlistlen(25))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("db", m_Db)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("tophitnum", m_Tophitnum)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("minhit", m_Minhit)->SetDefault(new TMinhit(2))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("minspectra", m_Minspectra)->SetDefault(new TMinspectra(4))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("scale", m_Scale)->SetDefault(new TScale(100))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("maxmods", m_Maxmods)->SetDefault(new TMaxmods(64))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("taxids", m_Taxids, STL_list, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("chargehandling", m_Chargehandling, CMSChargeHandle)->SetOptional();
    ADD_NAMED_REF_MEMBER("usermods", m_Usermods, CMSModSpecSet)->SetOptional();
    ADD_NAMED_STD_MEMBER("pseudocount", m_Pseudocount)->SetDefault(new TPseudocount(1))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("searchb1", m_Searchb1)->SetDefault(new TSearchb1(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("searchctermproduct", m_Searchctermproduct)->SetDefault(new TSearchctermproduct(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("maxproductions", m_Maxproductions)->SetDefault(new TMaxproductions(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("minnoenzyme", m_Minnoenzyme)->SetDefault(new TMinnoenzyme(4))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("maxnoenzyme", m_Maxnoenzyme)->SetDefault(new TMaxnoenzyme(0))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("exactmass", m_Exactmass)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("settingid", m_Settingid)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("iterativesettings", m_Iterativesettings, CMSIterativeSettings)->SetOptional();
    ADD_NAMED_STD_MEMBER("precursorcull", m_Precursorcull)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("infiles", m_Infiles, STL_list, (STL_CRef, (CLASS, (CMSInFile))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("outfiles", m_Outfiles, STL_list, (STL_CRef, (CLASS, (CMSOutFile))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("nocorrelationscore", m_Nocorrelationscore)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("probfollowingion", m_Probfollowingion)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("nmethionine", m_Nmethionine)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("automassadjust", m_Automassadjust)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("lomasscutoff", m_Lomasscutoff)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("libsearchsettings", m_Libsearchsettings, CMSLibrarySettings)->SetOptional();
    ADD_NAMED_MEMBER("noprolineions", m_Noprolineions, STL_list, (ENUM, (int, EMSIonType)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("reversesearch", m_Reversesearch)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("othersettings", m_Othersettings, STL_list, (STL_CRef, (CLASS, (CNameValue))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numisotopes", m_Numisotopes)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pepppm", m_Pepppm)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("msmsppm", m_Msmsppm)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("reportedhitcount", m_Reportedhitcount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CMSSearchSettings_Base::CMSSearchSettings_Base(void)
    : m_Precursorsearchtype((int)(0)), m_Productsearchtype((int)(0)), m_Peptol(0), m_Msmstol(0), m_Zdep((int)(0)), m_Cutoff(0), m_Cutlo(0), m_Cuthi(0), m_Cutinc(0), m_Singlewin(0), m_Doublewin(0), m_Singlenum(0), m_Doublenum(0), m_Enzyme((int)(0)), m_Missedcleave(0), m_Hitlistlen(25), m_Tophitnum(0), m_Minhit(2), m_Minspectra(4), m_Scale(100), m_Maxmods(64), m_Pseudocount(1), m_Searchb1(0), m_Searchctermproduct(0), m_Maxproductions(0), m_Minnoenzyme(4), m_Maxnoenzyme(0), m_Exactmass(0), m_Settingid(0), m_Precursorcull(0), m_Nocorrelationscore(0), m_Probfollowingion(0), m_Nmethionine(0), m_Automassadjust(0), m_Lomasscutoff(0), m_Reversesearch(0), m_Numisotopes(0), m_Pepppm(0), m_Msmsppm(0), m_Reportedhitcount(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CMSSearchSettings_Base::~CMSSearchSettings_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

