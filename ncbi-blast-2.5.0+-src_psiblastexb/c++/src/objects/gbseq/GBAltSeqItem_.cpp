/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'gbseq.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/gbseq/GBAltSeqItem.hpp>
#include <objects/gbseq/GBInterval.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGBAltSeqItem_Base::ResetInterval(void)
{
    m_Interval.Reset();
}

void CGBAltSeqItem_Base::SetInterval(CGBAltSeqItem_Base::TInterval& value)
{
    m_Interval.Reset(&value);
}

CGBAltSeqItem_Base::TInterval& CGBAltSeqItem_Base::SetInterval(void)
{
    if ( !m_Interval )
        m_Interval.Reset(new ncbi::objects::CGBInterval());
    return (*m_Interval);
}

void CGBAltSeqItem_Base::ResetGap_type(void)
{
    m_Gap_type.erase();
    m_set_State[0] &= ~0xc0;
}

void CGBAltSeqItem_Base::ResetGap_linkage(void)
{
    m_Gap_linkage.erase();
    m_set_State[0] &= ~0x300;
}

void CGBAltSeqItem_Base::ResetGap_comment(void)
{
    m_Gap_comment.erase();
    m_set_State[0] &= ~0xc00;
}

void CGBAltSeqItem_Base::ResetFirst_accn(void)
{
    m_First_accn.erase();
    m_set_State[0] &= ~0x3000;
}

void CGBAltSeqItem_Base::ResetLast_accn(void)
{
    m_Last_accn.erase();
    m_set_State[0] &= ~0xc000;
}

void CGBAltSeqItem_Base::ResetValue(void)
{
    m_Value.erase();
    m_set_State[0] &= ~0x30000;
}

void CGBAltSeqItem_Base::Reset(void)
{
    ResetInterval();
    ResetIsgap();
    ResetGap_length();
    ResetGap_type();
    ResetGap_linkage();
    ResetGap_comment();
    ResetFirst_accn();
    ResetLast_accn();
    ResetValue();
}

BEGIN_NAMED_BASE_CLASS_INFO("GBAltSeqItem", CGBAltSeqItem)
{
    SET_CLASS_MODULE("NCBI-GBSeq");
    ADD_NAMED_REF_MEMBER("interval", m_Interval, CGBInterval)->SetOptional();
    ADD_NAMED_STD_MEMBER("isgap", m_Isgap)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gap-length", m_Gap_length)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gap-type", m_Gap_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gap-linkage", m_Gap_linkage)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gap-comment", m_Gap_comment)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("first-accn", m_First_accn)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("last-accn", m_Last_accn)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("value", m_Value)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CGBAltSeqItem_Base::CGBAltSeqItem_Base(void)
    : m_Isgap(0), m_Gap_length(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CGBAltSeqItem_Base::~CGBAltSeqItem_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

