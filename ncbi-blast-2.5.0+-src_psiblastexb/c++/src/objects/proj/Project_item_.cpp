/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'proj.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/proj/Project_item.hpp>
#include <objects/proj/Project.hpp>
#include <objects/pubmed/Pubmed_entry.hpp>
#include <objects/seq/Seq_annot.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqloc/Seq_loc.hpp>
#include <objects/seqset/Seq_entry.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CProject_item_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CProject_item_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Pmuid:
        m_Pmuid.Destruct();
        break;
    case e_Protuid:
        m_Protuid.Destruct();
        break;
    case e_Nucuid:
        m_Nucuid.Destruct();
        break;
    case e_Sequid:
        m_Sequid.Destruct();
        break;
    case e_Genomeuid:
        m_Genomeuid.Destruct();
        break;
    case e_Structuid:
        m_Structuid.Destruct();
        break;
    case e_Pmid:
        m_Pmid.Destruct();
        break;
    case e_Protid:
        m_Protid.Destruct();
        break;
    case e_Nucid:
        m_Nucid.Destruct();
        break;
    case e_Seqid:
        m_Seqid.Destruct();
        break;
    case e_Genomeid:
        m_Genomeid.Destruct();
        break;
    case e_Pment:
        m_Pment.Destruct();
        break;
    case e_Protent:
        m_Protent.Destruct();
        break;
    case e_Nucent:
        m_Nucent.Destruct();
        break;
    case e_Seqent:
        m_Seqent.Destruct();
        break;
    case e_Genomeent:
        m_Genomeent.Destruct();
        break;
    case e_Seqannot:
        m_Seqannot.Destruct();
        break;
    case e_Loc:
        m_Loc.Destruct();
        break;
    case e_Proj:
        m_Proj.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CProject_item_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Pmuid:
        m_Pmuid.Construct();
        break;
    case e_Protuid:
        m_Protuid.Construct();
        break;
    case e_Nucuid:
        m_Nucuid.Construct();
        break;
    case e_Sequid:
        m_Sequid.Construct();
        break;
    case e_Genomeuid:
        m_Genomeuid.Construct();
        break;
    case e_Structuid:
        m_Structuid.Construct();
        break;
    case e_Pmid:
        m_Pmid.Construct();
        break;
    case e_Protid:
        m_Protid.Construct();
        break;
    case e_Nucid:
        m_Nucid.Construct();
        break;
    case e_Seqid:
        m_Seqid.Construct();
        break;
    case e_Genomeid:
        m_Genomeid.Construct();
        break;
    case e_Pment:
        m_Pment.Construct();
        break;
    case e_Protent:
        m_Protent.Construct();
        break;
    case e_Nucent:
        m_Nucent.Construct();
        break;
    case e_Seqent:
        m_Seqent.Construct();
        break;
    case e_Genomeent:
        m_Genomeent.Construct();
        break;
    case e_Seqannot:
        m_Seqannot.Construct();
        break;
    case e_Loc:
        m_Loc.Construct();
        break;
    case e_Proj:
        m_Proj.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CProject_item_Base::sm_SelectionNames[] = {
    "not set",
    "pmuid",
    "protuid",
    "nucuid",
    "sequid",
    "genomeuid",
    "structuid",
    "pmid",
    "protid",
    "nucid",
    "seqid",
    "genomeid",
    "structid",
    "pment",
    "protent",
    "nucent",
    "seqent",
    "genomeent",
    "structent",
    "seqannot",
    "loc",
    "proj"
};

NCBI_NS_STD::string CProject_item_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CProject_item_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Project-item", CProject_item)
{
    SET_CHOICE_MODULE("NCBI-Project");
    ADD_NAMED_BUF_CHOICE_VARIANT("pmuid", m_Pmuid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("protuid", m_Protuid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("nucuid", m_Nucuid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("sequid", m_Sequid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("genomeuid", m_Genomeuid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("structuid", m_Structuid, STL_list_set, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("pmid", m_Pmid, STL_list_set, (CLASS, (CPubMedId)));
    ADD_NAMED_BUF_CHOICE_VARIANT("protid", m_Protid, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))));
    ADD_NAMED_BUF_CHOICE_VARIANT("nucid", m_Nucid, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))));
    ADD_NAMED_BUF_CHOICE_VARIANT("seqid", m_Seqid, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))));
    ADD_NAMED_BUF_CHOICE_VARIANT("genomeid", m_Genomeid, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))));
    ADD_NAMED_NULL_CHOICE_VARIANT("structid", null, ());
    ADD_NAMED_BUF_CHOICE_VARIANT("pment", m_Pment, STL_list_set, (STL_CRef, (CLASS, (CPubmed_entry))));
    ADD_NAMED_BUF_CHOICE_VARIANT("protent", m_Protent, STL_list_set, (STL_CRef, (CLASS, (CSeq_entry))));
    ADD_NAMED_BUF_CHOICE_VARIANT("nucent", m_Nucent, STL_list_set, (STL_CRef, (CLASS, (CSeq_entry))));
    ADD_NAMED_BUF_CHOICE_VARIANT("seqent", m_Seqent, STL_list_set, (STL_CRef, (CLASS, (CSeq_entry))));
    ADD_NAMED_BUF_CHOICE_VARIANT("genomeent", m_Genomeent, STL_list_set, (STL_CRef, (CLASS, (CSeq_entry))));
    ADD_NAMED_NULL_CHOICE_VARIANT("structent", null, ());
    ADD_NAMED_BUF_CHOICE_VARIANT("seqannot", m_Seqannot, STL_list_set, (STL_CRef, (CLASS, (CSeq_annot))));
    ADD_NAMED_BUF_CHOICE_VARIANT("loc", m_Loc, STL_list_set, (STL_CRef, (CLASS, (CSeq_loc))));
    ADD_NAMED_BUF_CHOICE_VARIANT("proj", m_Proj, STL_list_set, (STL_CRef, (CLASS, (CProject))));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CProject_item_Base::CProject_item_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CProject_item_Base::~CProject_item_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

