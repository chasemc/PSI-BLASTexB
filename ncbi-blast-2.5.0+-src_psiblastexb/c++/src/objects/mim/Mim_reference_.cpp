/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mim.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mim/Mim_reference.hpp>
#include <objects/mim/Mim_author.hpp>
#include <objects/mim/Mim_date.hpp>
#include <objects/mim/Mim_page.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CMim_reference_Base::, EType, false)
{
    SET_ENUM_INTERNAL_NAME("Mim-reference", "type");
    SET_ENUM_MODULE("NCBI-Mim");
    ADD_ENUM_VALUE("not-set", eType_not_set);
    ADD_ENUM_VALUE("citation", eType_citation);
    ADD_ENUM_VALUE("book", eType_book);
    ADD_ENUM_VALUE("personal-communication", eType_personal_communication);
    ADD_ENUM_VALUE("book-citation", eType_book_citation);
}
END_ENUM_INFO

void CMim_reference_Base::ResetAuthors(void)
{
    m_Authors.clear();
    m_set_State[0] &= ~0xc0;
}

void CMim_reference_Base::ResetPrimaryAuthor(void)
{
    m_PrimaryAuthor.erase();
    m_set_State[0] &= ~0x300;
}

void CMim_reference_Base::ResetOtherAuthors(void)
{
    m_OtherAuthors.erase();
    m_set_State[0] &= ~0xc00;
}

void CMim_reference_Base::ResetCitationTitle(void)
{
    m_CitationTitle.erase();
    m_set_State[0] &= ~0x3000;
}

void CMim_reference_Base::ResetBookTitle(void)
{
    m_BookTitle.erase();
    m_set_State[0] &= ~0x30000;
}

void CMim_reference_Base::ResetEditors(void)
{
    m_Editors.clear();
    m_set_State[0] &= ~0xc0000;
}

void CMim_reference_Base::ResetVolume(void)
{
    m_Volume.erase();
    m_set_State[0] &= ~0x300000;
}

void CMim_reference_Base::ResetEdition(void)
{
    m_Edition.erase();
    m_set_State[0] &= ~0xc00000;
}

void CMim_reference_Base::ResetJournal(void)
{
    m_Journal.erase();
    m_set_State[0] &= ~0x3000000;
}

void CMim_reference_Base::ResetSeries(void)
{
    m_Series.erase();
    m_set_State[0] &= ~0xc000000;
}

void CMim_reference_Base::ResetPublisher(void)
{
    m_Publisher.erase();
    m_set_State[0] &= ~0x30000000;
}

void CMim_reference_Base::ResetPlace(void)
{
    m_Place.erase();
    m_set_State[0] &= ~0xc0000000;
}

void CMim_reference_Base::ResetCommNote(void)
{
    m_CommNote.erase();
    m_set_State[1] &= ~0x3;
}

void CMim_reference_Base::ResetPubDate(void)
{
    if ( !m_PubDate ) {
        m_PubDate.Reset(new TPubDate());
        return;
    }
    (*m_PubDate).Reset();
}

void CMim_reference_Base::SetPubDate(CMim_reference_Base::TPubDate& value)
{
    m_PubDate.Reset(&value);
}

void CMim_reference_Base::ResetPages(void)
{
    m_Pages.clear();
    m_set_State[1] &= ~0x30;
}

void CMim_reference_Base::ResetMiscInfo(void)
{
    m_MiscInfo.erase();
    m_set_State[1] &= ~0xc0;
}

void CMim_reference_Base::Reset(void)
{
    ResetNumber();
    ResetOrigNumber();
    ResetType();
    ResetAuthors();
    ResetPrimaryAuthor();
    ResetOtherAuthors();
    ResetCitationTitle();
    ResetCitationType();
    ResetBookTitle();
    ResetEditors();
    ResetVolume();
    ResetEdition();
    ResetJournal();
    ResetSeries();
    ResetPublisher();
    ResetPlace();
    ResetCommNote();
    ResetPubDate();
    ResetPages();
    ResetMiscInfo();
    ResetPubmedUID();
    ResetAmbiguous();
    ResetNoLink();
}

BEGIN_NAMED_BASE_CLASS_INFO("Mim-reference", CMim_reference)
{
    SET_CLASS_MODULE("NCBI-Mim");
    ADD_NAMED_STD_MEMBER("number", m_Number)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("origNumber", m_OrigNumber)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("authors", m_Authors, STL_list, (STL_CRef, (CLASS, (CMim_author))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("primaryAuthor", m_PrimaryAuthor)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("otherAuthors", m_OtherAuthors)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("citationTitle", m_CitationTitle)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("citationType", m_CitationType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("bookTitle", m_BookTitle)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("editors", m_Editors, STL_list, (STL_CRef, (CLASS, (CMim_author))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("volume", m_Volume)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("edition", m_Edition)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("journal", m_Journal)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("series", m_Series)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("publisher", m_Publisher)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("place", m_Place)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("commNote", m_CommNote)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("pubDate", m_PubDate, CMim_date);
    ADD_NAMED_MEMBER("pages", m_Pages, STL_list, (STL_CRef, (CLASS, (CMim_page))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("miscInfo", m_MiscInfo)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pubmedUID", m_PubmedUID)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("ambiguous", m_Ambiguous)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("noLink", m_NoLink)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CMim_reference_Base::CMim_reference_Base(void)
    : m_Number(0), m_OrigNumber(0), m_Type((EType)(0)), m_CitationType(0), m_PubmedUID(0), m_Ambiguous(0), m_NoLink(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetPubDate();
    }
}

// destructor
CMim_reference_Base::~CMim_reference_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

