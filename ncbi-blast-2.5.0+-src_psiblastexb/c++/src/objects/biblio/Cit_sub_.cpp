/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'biblio.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/biblio/Cit_sub.hpp>
#include <objects/biblio/Auth_list.hpp>
#include <objects/biblio/Imprint.hpp>
#include <objects/general/Date.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CCit_sub_Base::, EMedium, false)
{
    SET_ENUM_INTERNAL_NAME("Cit-sub", "medium");
    SET_ENUM_MODULE("NCBI-Biblio");
    ADD_ENUM_VALUE("paper", eMedium_paper);
    ADD_ENUM_VALUE("tape", eMedium_tape);
    ADD_ENUM_VALUE("floppy", eMedium_floppy);
    ADD_ENUM_VALUE("email", eMedium_email);
    ADD_ENUM_VALUE("other", eMedium_other);
}
END_ENUM_INFO

void CCit_sub_Base::ResetAuthors(void)
{
    if ( !m_Authors ) {
        m_Authors.Reset(new TAuthors());
        return;
    }
    (*m_Authors).Reset();
}

void CCit_sub_Base::SetAuthors(CCit_sub_Base::TAuthors& value)
{
    m_Authors.Reset(&value);
}

void CCit_sub_Base::ResetImp(void)
{
    m_Imp.Reset();
}

void CCit_sub_Base::SetImp(CCit_sub_Base::TImp& value)
{
    m_Imp.Reset(&value);
}

CCit_sub_Base::TImp& CCit_sub_Base::SetImp(void)
{
    if ( !m_Imp )
        m_Imp.Reset(new ncbi::objects::CImprint());
    return (*m_Imp);
}

void CCit_sub_Base::ResetDate(void)
{
    m_Date.Reset();
}

void CCit_sub_Base::SetDate(CCit_sub_Base::TDate& value)
{
    m_Date.Reset(&value);
}

CCit_sub_Base::TDate& CCit_sub_Base::SetDate(void)
{
    if ( !m_Date )
        m_Date.Reset(new ncbi::objects::CDate());
    return (*m_Date);
}

void CCit_sub_Base::ResetDescr(void)
{
    m_Descr.erase();
    m_set_State[0] &= ~0x300;
}

void CCit_sub_Base::Reset(void)
{
    ResetAuthors();
    ResetImp();
    ResetMedium();
    ResetDate();
    ResetDescr();
}

BEGIN_NAMED_BASE_CLASS_INFO("Cit-sub", CCit_sub)
{
    SET_CLASS_MODULE("NCBI-Biblio");
    ADD_NAMED_REF_MEMBER("authors", m_Authors, CAuth_list);
    ADD_NAMED_REF_MEMBER("imp", m_Imp, CImprint)->SetOptional();
    ADD_NAMED_ENUM_MEMBER("medium", m_Medium, EMedium)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("date", m_Date, CDate)->SetOptional();
    ADD_NAMED_STD_MEMBER("descr", m_Descr)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCit_sub_Base::CCit_sub_Base(void)
    : m_Medium((EMedium)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAuthors();
    }
}

// destructor
CCit_sub_Base::~CCit_sub_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

