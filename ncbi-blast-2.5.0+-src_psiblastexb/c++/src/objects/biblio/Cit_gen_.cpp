/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'biblio.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/biblio/Cit_gen.hpp>
#include <objects/biblio/Auth_list.hpp>
#include <objects/biblio/Title.hpp>
#include <objects/general/Date.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CCit_gen_Base::ResetCit(void)
{
    m_Cit.erase();
    m_set_State[0] &= ~0x3;
}

void CCit_gen_Base::ResetAuthors(void)
{
    m_Authors.Reset();
}

void CCit_gen_Base::SetAuthors(CCit_gen_Base::TAuthors& value)
{
    m_Authors.Reset(&value);
}

CCit_gen_Base::TAuthors& CCit_gen_Base::SetAuthors(void)
{
    if ( !m_Authors )
        m_Authors.Reset(new ncbi::objects::CAuth_list());
    return (*m_Authors);
}

void CCit_gen_Base::ResetJournal(void)
{
    m_Journal.Reset();
}

void CCit_gen_Base::SetJournal(CCit_gen_Base::TJournal& value)
{
    m_Journal.Reset(&value);
}

CCit_gen_Base::TJournal& CCit_gen_Base::SetJournal(void)
{
    if ( !m_Journal )
        m_Journal.Reset(new ncbi::objects::CTitle());
    return (*m_Journal);
}

void CCit_gen_Base::ResetVolume(void)
{
    m_Volume.erase();
    m_set_State[0] &= ~0x300;
}

void CCit_gen_Base::ResetIssue(void)
{
    m_Issue.erase();
    m_set_State[0] &= ~0xc00;
}

void CCit_gen_Base::ResetPages(void)
{
    m_Pages.erase();
    m_set_State[0] &= ~0x3000;
}

void CCit_gen_Base::ResetDate(void)
{
    m_Date.Reset();
}

void CCit_gen_Base::SetDate(CCit_gen_Base::TDate& value)
{
    m_Date.Reset(&value);
}

CCit_gen_Base::TDate& CCit_gen_Base::SetDate(void)
{
    if ( !m_Date )
        m_Date.Reset(new ncbi::objects::CDate());
    return (*m_Date);
}

void CCit_gen_Base::ResetTitle(void)
{
    m_Title.erase();
    m_set_State[0] &= ~0xc0000;
}

void CCit_gen_Base::Reset(void)
{
    ResetCit();
    ResetAuthors();
    ResetMuid();
    ResetJournal();
    ResetVolume();
    ResetIssue();
    ResetPages();
    ResetDate();
    ResetSerial_number();
    ResetTitle();
    ResetPmid();
}

BEGIN_NAMED_BASE_CLASS_INFO("Cit-gen", CCit_gen)
{
    SET_CLASS_MODULE("NCBI-Biblio");
    ADD_NAMED_STD_MEMBER("cit", m_Cit)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("authors", m_Authors, CAuth_list)->SetOptional();
    ADD_NAMED_STD_MEMBER("muid", m_Muid)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("journal", m_Journal, CTitle)->SetOptional();
    ADD_NAMED_STD_MEMBER("volume", m_Volume)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("issue", m_Issue)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("pages", m_Pages)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("date", m_Date, CDate)->SetOptional();
    ADD_NAMED_STD_MEMBER("serial-number", m_Serial_number)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("title", m_Title)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("pmid", m_Pmid, CLASS, (CPubMedId))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCit_gen_Base::CCit_gen_Base(void)
    : m_Muid(0), m_Serial_number(0), m_Pmid(CPubMedId(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CCit_gen_Base::~CCit_gen_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

