/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pcsubstance.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/pcsubstance/PC_CompoundType.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CPC_CompoundType_Base::, EType, true)
{
    SET_ENUM_INTERNAL_NAME("PC-CompoundType", "type");
    SET_ENUM_MODULE("NCBI-PCSubstance");
    ADD_ENUM_VALUE("deposited", eType_deposited);
    ADD_ENUM_VALUE("standardized", eType_standardized);
    ADD_ENUM_VALUE("component", eType_component);
    ADD_ENUM_VALUE("neutralized", eType_neutralized);
    ADD_ENUM_VALUE("mixture", eType_mixture);
    ADD_ENUM_VALUE("tautomer", eType_tautomer);
    ADD_ENUM_VALUE("pka-state", eType_pka_state);
    ADD_ENUM_VALUE("unknown", eType_unknown);
}
END_ENUM_INFO

void CPC_CompoundType_Base::C_Id::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CPC_CompoundType_Base::C_Id::ResetSelection(void)
{
    m_choice = e_not_set;
}

void CPC_CompoundType_Base::C_Id::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Cid:
        m_Cid = 0;
        break;
    case e_Sid:
        m_Sid = 0;
        break;
    case e_Xid:
        m_Xid = 0;
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CPC_CompoundType_Base::C_Id::sm_SelectionNames[] = {
    "not set",
    "cid",
    "sid",
    "xid"
};

NCBI_NS_STD::string CPC_CompoundType_Base::C_Id::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CPC_CompoundType_Base::C_Id::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CPC_CompoundType_Base::C_Id)
{
    SET_INTERNAL_NAME("PC-CompoundType", "id");
    SET_CHOICE_MODULE("NCBI-PCSubstance");
    ADD_NAMED_STD_CHOICE_VARIANT("cid", m_Cid);
    ADD_NAMED_STD_CHOICE_VARIANT("sid", m_Sid);
    ADD_NAMED_STD_CHOICE_VARIANT("xid", m_Xid);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CPC_CompoundType_Base::C_Id::C_Id(void)
    : m_choice(e_not_set)
{
}

// destructor
CPC_CompoundType_Base::C_Id::~C_Id(void)
{
    Reset();
}


void CPC_CompoundType_Base::ResetId(void)
{
    m_Id.Reset();
}

void CPC_CompoundType_Base::SetId(CPC_CompoundType_Base::TId& value)
{
    m_Id.Reset(&value);
}

CPC_CompoundType_Base::TId& CPC_CompoundType_Base::SetId(void)
{
    if ( !m_Id )
        m_Id.Reset(new C_Id());
    return (*m_Id);
}

void CPC_CompoundType_Base::Reset(void)
{
    ResetType();
    ResetId();
}

BEGIN_NAMED_BASE_CLASS_INFO("PC-CompoundType", CPC_CompoundType)
{
    SET_CLASS_MODULE("NCBI-PCSubstance");
    ADD_NAMED_ENUM_MEMBER("type", m_Type, EType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("id", m_Id, C_Id)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPC_CompoundType_Base::CPC_CompoundType_Base(void)
    : m_Type((EType)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CPC_CompoundType_Base::~CPC_CompoundType_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

