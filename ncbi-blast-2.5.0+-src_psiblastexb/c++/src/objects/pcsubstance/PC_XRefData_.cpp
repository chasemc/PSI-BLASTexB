/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pcsubstance.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/pcsubstance/PC_XRefData.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CPC_XRefData_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CPC_XRefData_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Regid:
    case e_Rn:
    case e_Mesh:
    case e_Dburl:
    case e_Sburl:
    case e_Asurl:
    case e_Patent:
        m_string.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CPC_XRefData_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Pmid:
        m_Pmid = 0;
        break;
    case e_Gi:
        m_Gi = 0;
        break;
    case e_Mmdb:
        m_Mmdb = 0;
        break;
    case e_Sid:
        m_Sid = 0;
        break;
    case e_Cid:
        m_Cid = 0;
        break;
    case e_Protein_gi:
        m_Protein_gi = 0;
        break;
    case e_Nucleotide_gi:
        m_Nucleotide_gi = 0;
        break;
    case e_Taxonomy:
        m_Taxonomy = 0;
        break;
    case e_Aid:
        m_Aid = 0;
        break;
    case e_Mim:
        m_Mim = 0;
        break;
    case e_Gene:
        m_Gene = 0;
        break;
    case e_Probe:
        m_Probe = 0;
        break;
    case e_Biosystem:
        m_Biosystem = 0;
        break;
    case e_Geogse:
        m_Geogse = 0;
        break;
    case e_Geogsm:
        m_Geogsm = 0;
        break;
    case e_Regid:
    case e_Rn:
    case e_Mesh:
    case e_Dburl:
    case e_Sburl:
    case e_Asurl:
    case e_Patent:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CPC_XRefData_Base::sm_SelectionNames[] = {
    "not set",
    "regid",
    "rn",
    "mesh",
    "pmid",
    "gi",
    "mmdb",
    "sid",
    "cid",
    "dburl",
    "sburl",
    "asurl",
    "protein-gi",
    "nucleotide-gi",
    "taxonomy",
    "aid",
    "mim",
    "gene",
    "probe",
    "biosystem",
    "geogse",
    "geogsm",
    "patent"
};

NCBI_NS_STD::string CPC_XRefData_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CPC_XRefData_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CPC_XRefData_Base::SetRegid(const CPC_XRefData_Base::TRegid& value)
{
    Select(e_Regid, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CPC_XRefData_Base::SetRn(const CPC_XRefData_Base::TRn& value)
{
    Select(e_Rn, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CPC_XRefData_Base::SetMesh(const CPC_XRefData_Base::TMesh& value)
{
    Select(e_Mesh, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CPC_XRefData_Base::SetDburl(const CPC_XRefData_Base::TDburl& value)
{
    Select(e_Dburl, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CPC_XRefData_Base::SetSburl(const CPC_XRefData_Base::TSburl& value)
{
    Select(e_Sburl, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CPC_XRefData_Base::SetAsurl(const CPC_XRefData_Base::TAsurl& value)
{
    Select(e_Asurl, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CPC_XRefData_Base::SetPatent(const CPC_XRefData_Base::TPatent& value)
{
    Select(e_Patent, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("PC-XRefData", CPC_XRefData)
{
    SET_CHOICE_MODULE("NCBI-PCSubstance");
    ADD_NAMED_BUF_CHOICE_VARIANT("regid", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("rn", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("mesh", m_string, STD, (string));
    ADD_NAMED_STD_CHOICE_VARIANT("pmid", m_Pmid);
    ADD_NAMED_STD_CHOICE_VARIANT("gi", m_Gi);
    ADD_NAMED_STD_CHOICE_VARIANT("mmdb", m_Mmdb);
    ADD_NAMED_STD_CHOICE_VARIANT("sid", m_Sid);
    ADD_NAMED_STD_CHOICE_VARIANT("cid", m_Cid);
    ADD_NAMED_BUF_CHOICE_VARIANT("dburl", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("sburl", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("asurl", m_string, STD, (string));
    ADD_NAMED_STD_CHOICE_VARIANT("protein-gi", m_Protein_gi);
    ADD_NAMED_STD_CHOICE_VARIANT("nucleotide-gi", m_Nucleotide_gi);
    ADD_NAMED_STD_CHOICE_VARIANT("taxonomy", m_Taxonomy);
    ADD_NAMED_STD_CHOICE_VARIANT("aid", m_Aid);
    ADD_NAMED_STD_CHOICE_VARIANT("mim", m_Mim);
    ADD_NAMED_STD_CHOICE_VARIANT("gene", m_Gene);
    ADD_NAMED_STD_CHOICE_VARIANT("probe", m_Probe);
    ADD_NAMED_STD_CHOICE_VARIANT("biosystem", m_Biosystem);
    ADD_NAMED_STD_CHOICE_VARIANT("geogse", m_Geogse);
    ADD_NAMED_STD_CHOICE_VARIANT("geogsm", m_Geogsm);
    ADD_NAMED_BUF_CHOICE_VARIANT("patent", m_string, STD, (string));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CPC_XRefData_Base::CPC_XRefData_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CPC_XRefData_Base::~CPC_XRefData_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

