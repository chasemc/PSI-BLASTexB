/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mla.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mla/mla_client.hpp>
#include <objects/medlars/Medlars_entry.hpp>
#include <objects/medline/Medline_entry.hpp>
#include <objects/mla/Title_msg_list.hpp>
#include <objects/pub/Pub.hpp>
#include <objects/pubmed/Pubmed_entry.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CMLAClient_Base::x_Connect(void)
{
    Tparent::x_Connect();
    AskInit();
}

void CMLAClient_Base::x_Disconnect(void)
{
    AskFini();
    Tparent::x_Disconnect();
}

void CMLAClient_Base::Ask(const CMLAClient_Base::TRequest& request, CMLAClient_Base::TReply& reply, CMLAClient_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else if (rc.IsError()) {
        CNcbiOstrstream oss;
        oss << "CMLAClient: server error: " << rc.GetError();
        NCBI_THROW(CException, eUnknown, CNcbiOstrstreamToString(oss));
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

void CMLAClient_Base::AskInit(CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetInit();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Init);
}

CRef<CMedline_entry> CMLAClient_Base::AskGetmle(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmle(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getmle);
    return CRef<CMedline_entry>(&x_Choice(*reply).SetGetmle());
}

CRef<CPub> CMLAClient_Base::AskGetpub(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetpub(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpub);
    return CRef<CPub>(&x_Choice(*reply).SetGetpub());
}

CRef<CTitle_msg_list> CMLAClient_Base::AskGettitle(const CTitle_msg& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGettitle(const_cast<CTitle_msg&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gettitle);
    return CRef<CTitle_msg_list>(&x_Choice(*reply).SetGettitle());
}

int CMLAClient_Base::AskCitmatch(const CPub& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetCitmatch(const_cast<CPub&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Citmatch);
    return x_Choice(*reply).GetCitmatch();
}

void CMLAClient_Base::AskFini(CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetFini();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Fini);
}

list< int > CMLAClient_Base::AskGetmriuids(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmriuids(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getuids);
    return x_Choice(*reply).GetGetuids();
}

list< int > CMLAClient_Base::AskGetaccuids(const CMedline_si& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetaccuids(const_cast<CMedline_si&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getuids);
    return x_Choice(*reply).GetGetuids();
}

int CMLAClient_Base::AskUidtopmid(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetUidtopmid(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Outpmid);
    return x_Choice(*reply).GetOutpmid();
}

int CMLAClient_Base::AskPmidtouid(const CPubMedId& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetPmidtouid(const_cast<CPubMedId&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Outuid);
    return x_Choice(*reply).GetOutuid();
}

CRef<CPubmed_entry> CMLAClient_Base::AskGetmlepmid(const CPubMedId& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmlepmid(const_cast<CPubMedId&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpme);
    return CRef<CPubmed_entry>(&x_Choice(*reply).SetGetpme());
}

CRef<CPub> CMLAClient_Base::AskGetpubpmid(const CPubMedId& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetpubpmid(const_cast<CPubMedId&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpub);
    return CRef<CPub>(&x_Choice(*reply).SetGetpub());
}

int CMLAClient_Base::AskCitmatchpmid(const CPub& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetCitmatchpmid(const_cast<CPub&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Citmatch);
    return x_Choice(*reply).GetCitmatch();
}

list< int > CMLAClient_Base::AskGetmripmids(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmripmids(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpmids);
    return x_Choice(*reply).GetGetpmids();
}

list< int > CMLAClient_Base::AskGetaccpmids(const CMedline_si& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetaccpmids(const_cast<CMedline_si&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpmids);
    return x_Choice(*reply).GetGetpmids();
}

list< int > CMLAClient_Base::AskCitlstpmids(const CPub& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetCitlstpmids(const_cast<CPub&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpmids);
    return x_Choice(*reply).GetGetpmids();
}

CRef<CPubmed_entry> CMLAClient_Base::AskGetmleuid(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmleuid(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getpme);
    return CRef<CPubmed_entry>(&x_Choice(*reply).SetGetpme());
}

CRef<CMedlars_entry> CMLAClient_Base::AskGetmlrpmid(const CPubMedId& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmlrpmid(const_cast<CPubMedId&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getmlr);
    return CRef<CMedlars_entry>(&x_Choice(*reply).SetGetmlr());
}

CRef<CMedlars_entry> CMLAClient_Base::AskGetmlruid(const int& req, CMLAClient_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetmlruid(const_cast<int&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Getmlr);
    return CRef<CMedlars_entry>(&x_Choice(*reply).SetGetmlr());
}

// constructor
CMLAClient_Base::CMLAClient_Base(void)
    : Tparent("MedArch")
{
}

// destructor
CMLAClient_Base::~CMLAClient_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

