/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb2/Model_coordinate_set.hpp>
#include <objects/mmdb2/Coordinates.hpp>
#include <objects/mmdb2/Model_descr.hpp>
#include <objects/mmdb3/Chem_graph_alignment.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CModel_coordinate_set_Base::C_Coordinates::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CModel_coordinate_set_Base::C_Coordinates::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Literal:
    case e_Reference:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CModel_coordinate_set_Base::C_Coordinates::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Literal:
        (m_object = new(pool) ncbi::objects::CCoordinates())->AddReference();
        break;
    case e_Reference:
        (m_object = new(pool) ncbi::objects::CChem_graph_alignment())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CModel_coordinate_set_Base::C_Coordinates::sm_SelectionNames[] = {
    "not set",
    "literal",
    "reference"
};

NCBI_NS_STD::string CModel_coordinate_set_Base::C_Coordinates::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CModel_coordinate_set_Base::C_Coordinates::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CModel_coordinate_set_Base::C_Coordinates::TLiteral& CModel_coordinate_set_Base::C_Coordinates::GetLiteral(void) const
{
    CheckSelected(e_Literal);
    return *static_cast<const TLiteral*>(m_object);
}

CModel_coordinate_set_Base::C_Coordinates::TLiteral& CModel_coordinate_set_Base::C_Coordinates::SetLiteral(void)
{
    Select(e_Literal, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TLiteral*>(m_object);
}

void CModel_coordinate_set_Base::C_Coordinates::SetLiteral(CModel_coordinate_set_Base::C_Coordinates::TLiteral& value)
{
    TLiteral* ptr = &value;
    if ( m_choice != e_Literal || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Literal;
    }
}

const CModel_coordinate_set_Base::C_Coordinates::TReference& CModel_coordinate_set_Base::C_Coordinates::GetReference(void) const
{
    CheckSelected(e_Reference);
    return *static_cast<const TReference*>(m_object);
}

CModel_coordinate_set_Base::C_Coordinates::TReference& CModel_coordinate_set_Base::C_Coordinates::SetReference(void)
{
    Select(e_Reference, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReference*>(m_object);
}

void CModel_coordinate_set_Base::C_Coordinates::SetReference(CModel_coordinate_set_Base::C_Coordinates::TReference& value)
{
    TReference* ptr = &value;
    if ( m_choice != e_Reference || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Reference;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CModel_coordinate_set_Base::C_Coordinates)
{
    SET_INTERNAL_NAME("Model-coordinate-set", "coordinates");
    SET_CHOICE_MODULE("MMDB-Structural-model");
    ADD_NAMED_REF_CHOICE_VARIANT("literal", m_object, CCoordinates);
    ADD_NAMED_REF_CHOICE_VARIANT("reference", m_object, CChem_graph_alignment);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CModel_coordinate_set_Base::C_Coordinates::C_Coordinates(void)
    : m_choice(e_not_set)
{
}

// destructor
CModel_coordinate_set_Base::C_Coordinates::~C_Coordinates(void)
{
    Reset();
}


void CModel_coordinate_set_Base::ResetDescr(void)
{
    m_Descr.clear();
    m_set_State[0] &= ~0xc;
}

void CModel_coordinate_set_Base::ResetCoordinates(void)
{
    if ( !m_Coordinates ) {
        m_Coordinates.Reset(new TCoordinates());
        return;
    }
    (*m_Coordinates).Reset();
}

void CModel_coordinate_set_Base::SetCoordinates(CModel_coordinate_set_Base::TCoordinates& value)
{
    m_Coordinates.Reset(&value);
}

void CModel_coordinate_set_Base::Reset(void)
{
    ResetId();
    ResetDescr();
    ResetCoordinates();
}

BEGIN_NAMED_BASE_CLASS_INFO("Model-coordinate-set", CModel_coordinate_set)
{
    SET_CLASS_MODULE("MMDB-Structural-model");
    ADD_NAMED_MEMBER("id", m_Id, CLASS, (CModel_coordinate_set_id))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("descr", m_Descr, STL_list, (STL_CRef, (CLASS, (CModel_descr))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("coordinates", m_Coordinates, C_Coordinates);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CModel_coordinate_set_Base::CModel_coordinate_set_Base(void)
    : m_Id(CModel_coordinate_set_id(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetCoordinates();
    }
}

// destructor
CModel_coordinate_set_Base::~CModel_coordinate_set_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

