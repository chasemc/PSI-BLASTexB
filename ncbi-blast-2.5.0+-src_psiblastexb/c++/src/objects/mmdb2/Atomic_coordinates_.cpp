/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb2.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb2/Atomic_coordinates.hpp>
#include <objects/mmdb2/Alternate_conformation_ids.hpp>
#include <objects/mmdb2/Atomic_occupancies.hpp>
#include <objects/mmdb2/Atomic_temperature_factors.hpp>
#include <objects/mmdb2/Conformation_ensemble.hpp>
#include <objects/mmdb2/Model_space_points.hpp>
#include <objects/mmdb3/Atom_pntrs.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CAtomic_coordinates_Base::ResetAtoms(void)
{
    if ( !m_Atoms ) {
        m_Atoms.Reset(new TAtoms());
        return;
    }
    (*m_Atoms).Reset();
}

void CAtomic_coordinates_Base::SetAtoms(CAtomic_coordinates_Base::TAtoms& value)
{
    m_Atoms.Reset(&value);
}

void CAtomic_coordinates_Base::ResetSites(void)
{
    if ( !m_Sites ) {
        m_Sites.Reset(new TSites());
        return;
    }
    (*m_Sites).Reset();
}

void CAtomic_coordinates_Base::SetSites(CAtomic_coordinates_Base::TSites& value)
{
    m_Sites.Reset(&value);
}

void CAtomic_coordinates_Base::ResetTemperature_factors(void)
{
    m_Temperature_factors.Reset();
}

void CAtomic_coordinates_Base::SetTemperature_factors(CAtomic_coordinates_Base::TTemperature_factors& value)
{
    m_Temperature_factors.Reset(&value);
}

CAtomic_coordinates_Base::TTemperature_factors& CAtomic_coordinates_Base::SetTemperature_factors(void)
{
    if ( !m_Temperature_factors )
        m_Temperature_factors.Reset(new ncbi::objects::CAtomic_temperature_factors());
    return (*m_Temperature_factors);
}

void CAtomic_coordinates_Base::ResetOccupancies(void)
{
    m_Occupancies.Reset();
}

void CAtomic_coordinates_Base::SetOccupancies(CAtomic_coordinates_Base::TOccupancies& value)
{
    m_Occupancies.Reset(&value);
}

CAtomic_coordinates_Base::TOccupancies& CAtomic_coordinates_Base::SetOccupancies(void)
{
    if ( !m_Occupancies )
        m_Occupancies.Reset(new ncbi::objects::CAtomic_occupancies());
    return (*m_Occupancies);
}

void CAtomic_coordinates_Base::ResetAlternate_conf_ids(void)
{
    m_Alternate_conf_ids.Reset();
}

void CAtomic_coordinates_Base::SetAlternate_conf_ids(CAtomic_coordinates_Base::TAlternate_conf_ids& value)
{
    m_Alternate_conf_ids.Reset(&value);
}

CAtomic_coordinates_Base::TAlternate_conf_ids& CAtomic_coordinates_Base::SetAlternate_conf_ids(void)
{
    if ( !m_Alternate_conf_ids )
        m_Alternate_conf_ids.Reset(new ncbi::objects::CAlternate_conformation_ids());
    return (*m_Alternate_conf_ids);
}

void CAtomic_coordinates_Base::ResetConf_ensembles(void)
{
    m_Conf_ensembles.clear();
    m_set_State[0] &= ~0x3000;
}

void CAtomic_coordinates_Base::Reset(void)
{
    ResetNumber_of_points();
    ResetAtoms();
    ResetSites();
    ResetTemperature_factors();
    ResetOccupancies();
    ResetAlternate_conf_ids();
    ResetConf_ensembles();
}

BEGIN_NAMED_BASE_CLASS_INFO("Atomic-coordinates", CAtomic_coordinates)
{
    SET_CLASS_MODULE("MMDB-Structural-model");
    ADD_NAMED_STD_MEMBER("number-of-points", m_Number_of_points)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_REF_MEMBER("atoms", m_Atoms, CAtom_pntrs);
    ADD_NAMED_REF_MEMBER("sites", m_Sites, CModel_space_points);
    ADD_NAMED_REF_MEMBER("temperature-factors", m_Temperature_factors, CAtomic_temperature_factors)->SetOptional();
    ADD_NAMED_REF_MEMBER("occupancies", m_Occupancies, CAtomic_occupancies)->SetOptional();
    ADD_NAMED_REF_MEMBER("alternate-conf-ids", m_Alternate_conf_ids, CAlternate_conformation_ids)->SetOptional();
    ADD_NAMED_MEMBER("conf-ensembles", m_Conf_ensembles, STL_list, (STL_CRef, (CLASS, (CConformation_ensemble))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CAtomic_coordinates_Base::CAtomic_coordinates_Base(void)
    : m_Number_of_points(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAtoms();
        ResetSites();
    }
}

// destructor
CAtomic_coordinates_Base::~CAtomic_coordinates_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

