/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'varrep.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/varrep/Insertion.hpp>
#include <objects/varrep/Count.hpp>
#include <objects/varrep/SeqInterval.hpp>
#include <objects/varrep/Subsequence.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CInsertion_Base::C_Seqinfo::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CInsertion_Base::C_Seqinfo::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Identifier:
    case e_Raw_seq:
        m_string.Destruct();
        break;
    case e_Count:
    case e_Subseq:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CInsertion_Base::C_Seqinfo::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Count:
        (m_object = new(pool) ncbi::objects::CCount())->AddReference();
        break;
    case e_Subseq:
        (m_object = new(pool) ncbi::objects::CSubsequence())->AddReference();
        break;
    case e_Identifier:
    case e_Raw_seq:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CInsertion_Base::C_Seqinfo::sm_SelectionNames[] = {
    "not set",
    "identifier",
    "raw-seq",
    "count",
    "subseq"
};

NCBI_NS_STD::string CInsertion_Base::C_Seqinfo::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CInsertion_Base::C_Seqinfo::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CInsertion_Base::C_Seqinfo::SetIdentifier(const CInsertion_Base::C_Seqinfo::TIdentifier& value)
{
    Select(e_Identifier, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CInsertion_Base::C_Seqinfo::SetRaw_seq(const CInsertion_Base::C_Seqinfo::TRaw_seq& value)
{
    Select(e_Raw_seq, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CInsertion_Base::C_Seqinfo::TCount& CInsertion_Base::C_Seqinfo::GetCount(void) const
{
    CheckSelected(e_Count);
    return *static_cast<const TCount*>(m_object);
}

CInsertion_Base::C_Seqinfo::TCount& CInsertion_Base::C_Seqinfo::SetCount(void)
{
    Select(e_Count, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCount*>(m_object);
}

void CInsertion_Base::C_Seqinfo::SetCount(CInsertion_Base::C_Seqinfo::TCount& value)
{
    TCount* ptr = &value;
    if ( m_choice != e_Count || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Count;
    }
}

const CInsertion_Base::C_Seqinfo::TSubseq& CInsertion_Base::C_Seqinfo::GetSubseq(void) const
{
    CheckSelected(e_Subseq);
    return *static_cast<const TSubseq*>(m_object);
}

CInsertion_Base::C_Seqinfo::TSubseq& CInsertion_Base::C_Seqinfo::SetSubseq(void)
{
    Select(e_Subseq, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSubseq*>(m_object);
}

void CInsertion_Base::C_Seqinfo::SetSubseq(CInsertion_Base::C_Seqinfo::TSubseq& value)
{
    TSubseq* ptr = &value;
    if ( m_choice != e_Subseq || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Subseq;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CInsertion_Base::C_Seqinfo)
{
    SET_INTERNAL_NAME("Insertion", "seqinfo");
    SET_CHOICE_MODULE("NCBI-VariationIRep");
    ADD_NAMED_BUF_CHOICE_VARIANT("identifier", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("raw-seq", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("count", m_object, CCount);
    ADD_NAMED_REF_CHOICE_VARIANT("subseq", m_object, CSubsequence);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CInsertion_Base::C_Seqinfo::C_Seqinfo(void)
    : m_choice(e_not_set)
{
}

// destructor
CInsertion_Base::C_Seqinfo::~C_Seqinfo(void)
{
    Reset();
}


void CInsertion_Base::ResetInt(void)
{
    if ( !m_Int ) {
        m_Int.Reset(new TInt());
        return;
    }
    (*m_Int).Reset();
}

void CInsertion_Base::SetInt(CInsertion_Base::TInt& value)
{
    m_Int.Reset(&value);
}

void CInsertion_Base::ResetSeqinfo(void)
{
    if ( !m_Seqinfo ) {
        m_Seqinfo.Reset(new TSeqinfo());
        return;
    }
    (*m_Seqinfo).Reset();
}

void CInsertion_Base::SetSeqinfo(CInsertion_Base::TSeqinfo& value)
{
    m_Seqinfo.Reset(&value);
}

void CInsertion_Base::Reset(void)
{
    ResetInt();
    ResetSeqinfo();
}

BEGIN_NAMED_BASE_CLASS_INFO("Insertion", CInsertion)
{
    SET_CLASS_MODULE("NCBI-VariationIRep");
    ADD_NAMED_REF_MEMBER("int", m_Int, CSeqInterval);
    ADD_NAMED_REF_MEMBER("seqinfo", m_Seqinfo, C_Seqinfo);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CInsertion_Base::CInsertion_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetInt();
        ResetSeqinfo();
    }
}

// destructor
CInsertion_Base::~CInsertion_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

