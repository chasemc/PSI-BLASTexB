/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'varrep.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/varrep/Delins.hpp>
#include <objects/varrep/Count.hpp>
#include <objects/varrep/SeqLocation.hpp>
#include <objects/varrep/Subsequence.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CDelins_Base::C_Inserted_seq_info::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CDelins_Base::C_Inserted_seq_info::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Identifier:
    case e_Raw_seq:
        m_string.Destruct();
        break;
    case e_Count:
    case e_Subseq:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CDelins_Base::C_Inserted_seq_info::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Count:
        (m_object = new(pool) ncbi::objects::CCount())->AddReference();
        break;
    case e_Subseq:
        (m_object = new(pool) ncbi::objects::CSubsequence())->AddReference();
        break;
    case e_Identifier:
    case e_Raw_seq:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CDelins_Base::C_Inserted_seq_info::sm_SelectionNames[] = {
    "not set",
    "identifier",
    "raw-seq",
    "count",
    "subseq"
};

NCBI_NS_STD::string CDelins_Base::C_Inserted_seq_info::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CDelins_Base::C_Inserted_seq_info::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CDelins_Base::C_Inserted_seq_info::SetIdentifier(const CDelins_Base::C_Inserted_seq_info::TIdentifier& value)
{
    Select(e_Identifier, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

void CDelins_Base::C_Inserted_seq_info::SetRaw_seq(const CDelins_Base::C_Inserted_seq_info::TRaw_seq& value)
{
    Select(e_Raw_seq, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

const CDelins_Base::C_Inserted_seq_info::TCount& CDelins_Base::C_Inserted_seq_info::GetCount(void) const
{
    CheckSelected(e_Count);
    return *static_cast<const TCount*>(m_object);
}

CDelins_Base::C_Inserted_seq_info::TCount& CDelins_Base::C_Inserted_seq_info::SetCount(void)
{
    Select(e_Count, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCount*>(m_object);
}

void CDelins_Base::C_Inserted_seq_info::SetCount(CDelins_Base::C_Inserted_seq_info::TCount& value)
{
    TCount* ptr = &value;
    if ( m_choice != e_Count || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Count;
    }
}

const CDelins_Base::C_Inserted_seq_info::TSubseq& CDelins_Base::C_Inserted_seq_info::GetSubseq(void) const
{
    CheckSelected(e_Subseq);
    return *static_cast<const TSubseq*>(m_object);
}

CDelins_Base::C_Inserted_seq_info::TSubseq& CDelins_Base::C_Inserted_seq_info::SetSubseq(void)
{
    Select(e_Subseq, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSubseq*>(m_object);
}

void CDelins_Base::C_Inserted_seq_info::SetSubseq(CDelins_Base::C_Inserted_seq_info::TSubseq& value)
{
    TSubseq* ptr = &value;
    if ( m_choice != e_Subseq || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Subseq;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CDelins_Base::C_Inserted_seq_info)
{
    SET_INTERNAL_NAME("Delins", "inserted-seq-info");
    SET_CHOICE_MODULE("NCBI-VariationIRep");
    ADD_NAMED_BUF_CHOICE_VARIANT("identifier", m_string, STD, (string));
    ADD_NAMED_BUF_CHOICE_VARIANT("raw-seq", m_string, STD, (string));
    ADD_NAMED_REF_CHOICE_VARIANT("count", m_object, CCount);
    ADD_NAMED_REF_CHOICE_VARIANT("subseq", m_object, CSubsequence);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CDelins_Base::C_Inserted_seq_info::C_Inserted_seq_info(void)
    : m_choice(e_not_set)
{
}

// destructor
CDelins_Base::C_Inserted_seq_info::~C_Inserted_seq_info(void)
{
    Reset();
}


void CDelins_Base::ResetLoc(void)
{
    if ( !m_Loc ) {
        m_Loc.Reset(new TLoc());
        return;
    }
    (*m_Loc).Reset();
}

void CDelins_Base::SetLoc(CDelins_Base::TLoc& value)
{
    m_Loc.Reset(&value);
}

void CDelins_Base::ResetDeleted_raw_seq(void)
{
    m_Deleted_raw_seq.erase();
    m_set_State[0] &= ~0xc;
}

void CDelins_Base::ResetInserted_seq_info(void)
{
    if ( !m_Inserted_seq_info ) {
        m_Inserted_seq_info.Reset(new TInserted_seq_info());
        return;
    }
    (*m_Inserted_seq_info).Reset();
}

void CDelins_Base::SetInserted_seq_info(CDelins_Base::TInserted_seq_info& value)
{
    m_Inserted_seq_info.Reset(&value);
}

void CDelins_Base::Reset(void)
{
    ResetLoc();
    ResetDeleted_raw_seq();
    ResetInserted_seq_info();
}

BEGIN_NAMED_BASE_CLASS_INFO("Delins", CDelins)
{
    SET_CLASS_MODULE("NCBI-VariationIRep");
    ADD_NAMED_REF_MEMBER("loc", m_Loc, CSeqLocation);
    ADD_NAMED_STD_MEMBER("deleted-raw-seq", m_Deleted_raw_seq)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("inserted-seq-info", m_Inserted_seq_info, C_Inserted_seq_info);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CDelins_Base::CDelins_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetLoc();
        ResetInserted_seq_info();
    }
}

// destructor
CDelins_Base::~CDelins_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

