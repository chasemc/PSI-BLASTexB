/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'varrep.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/varrep/Count.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CCount_Base::C_Range::C_Start::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CCount_Base::C_Range::C_Start::ResetSelection(void)
{
    m_choice = e_not_set;
}

void CCount_Base::C_Range::C_Start::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Val:
        m_Val = 0;
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CCount_Base::C_Range::C_Start::sm_SelectionNames[] = {
    "not set",
    "val",
    "unknown"
};

NCBI_NS_STD::string CCount_Base::C_Range::C_Start::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CCount_Base::C_Range::C_Start::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CCount_Base::C_Range::C_Start)
{
    SET_INTERNAL_NAME("Count.range", "start");
    SET_CHOICE_MODULE("NCBI-VariationIRep");
    ADD_NAMED_STD_CHOICE_VARIANT("val", m_Val);
    ADD_NAMED_NULL_CHOICE_VARIANT("unknown", null, ());
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CCount_Base::C_Range::C_Start::C_Start(void)
    : m_choice(e_not_set)
{
}

// destructor
CCount_Base::C_Range::C_Start::~C_Start(void)
{
    Reset();
}


void CCount_Base::C_Range::C_Stop::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CCount_Base::C_Range::C_Stop::ResetSelection(void)
{
    m_choice = e_not_set;
}

void CCount_Base::C_Range::C_Stop::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Val:
        m_Val = 0;
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CCount_Base::C_Range::C_Stop::sm_SelectionNames[] = {
    "not set",
    "val",
    "unknown"
};

NCBI_NS_STD::string CCount_Base::C_Range::C_Stop::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CCount_Base::C_Range::C_Stop::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CCount_Base::C_Range::C_Stop)
{
    SET_INTERNAL_NAME("Count.range", "stop");
    SET_CHOICE_MODULE("NCBI-VariationIRep");
    ADD_NAMED_STD_CHOICE_VARIANT("val", m_Val);
    ADD_NAMED_NULL_CHOICE_VARIANT("unknown", null, ());
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CCount_Base::C_Range::C_Stop::C_Stop(void)
    : m_choice(e_not_set)
{
}

// destructor
CCount_Base::C_Range::C_Stop::~C_Stop(void)
{
    Reset();
}


void CCount_Base::C_Range::ResetStart(void)
{
    if ( !m_Start ) {
        m_Start.Reset(new TStart());
        return;
    }
    (*m_Start).Reset();
}

void CCount_Base::C_Range::SetStart(CCount_Base::C_Range::TStart& value)
{
    m_Start.Reset(&value);
}

void CCount_Base::C_Range::ResetStop(void)
{
    if ( !m_Stop ) {
        m_Stop.Reset(new TStop());
        return;
    }
    (*m_Stop).Reset();
}

void CCount_Base::C_Range::SetStop(CCount_Base::C_Range::TStop& value)
{
    m_Stop.Reset(&value);
}

void CCount_Base::C_Range::Reset(void)
{
    ResetStart();
    ResetStop();
}

BEGIN_NAMED_CLASS_INFO("", CCount_Base::C_Range)
{
    SET_INTERNAL_NAME("Count", "range");
    SET_CLASS_MODULE("NCBI-VariationIRep");
    ADD_NAMED_REF_MEMBER("start", m_Start, C_Start);
    ADD_NAMED_REF_MEMBER("stop", m_Stop, C_Stop);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CCount_Base::C_Range::C_Range(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetStart();
        ResetStop();
    }
}

// destructor
CCount_Base::C_Range::~C_Range(void)
{
}


void CCount_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CCount_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Range:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CCount_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Val:
        m_Val = 0;
        break;
    case e_Fuzzy_val:
        m_Fuzzy_val = 0;
        break;
    case e_Range:
        (m_object = new(pool) C_Range())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CCount_Base::sm_SelectionNames[] = {
    "not set",
    "unknown",
    "val",
    "fuzzy-val",
    "range"
};

NCBI_NS_STD::string CCount_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CCount_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CCount_Base::TRange& CCount_Base::GetRange(void) const
{
    CheckSelected(e_Range);
    return *static_cast<const TRange*>(m_object);
}

CCount_Base::TRange& CCount_Base::SetRange(void)
{
    Select(e_Range, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRange*>(m_object);
}

void CCount_Base::SetRange(CCount_Base::TRange& value)
{
    TRange* ptr = &value;
    if ( m_choice != e_Range || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Range;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Count", CCount)
{
    SET_CHOICE_MODULE("NCBI-VariationIRep");
    ADD_NAMED_NULL_CHOICE_VARIANT("unknown", null, ());
    ADD_NAMED_STD_CHOICE_VARIANT("val", m_Val);
    ADD_NAMED_STD_CHOICE_VARIANT("fuzzy-val", m_Fuzzy_val);
    ADD_NAMED_REF_CHOICE_VARIANT("range", m_object, C_Range);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CCount_Base::CCount_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CCount_Base::~CCount_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

