/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqtable.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqtable/SeqTable_multi_data.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqloc/Seq_interval.hpp>
#include <objects/seqloc/Seq_loc.hpp>
#include <objects/seqtable/BVector_data.hpp>
#include <objects/seqtable/CommonBytes_table.hpp>
#include <objects/seqtable/CommonString_table.hpp>
#include <objects/seqtable/Scaled_int_multi_data.hpp>
#include <objects/seqtable/Scaled_real_multi_data.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeqTable_multi_data_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqTable_multi_data_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Int:
        m_Int.Destruct();
        break;
    case e_Real:
        m_Real.Destruct();
        break;
    case e_String:
        m_String.Destruct();
        break;
    case e_Bytes:
        {
            for ( std::vector< std::vector< char >* >::iterator listIter1 = (*m_Bytes).begin(); listIter1 != (*m_Bytes).end(); ++listIter1 ) {
                delete (*listIter1);
            }
        }
        m_Bytes.Destruct();
        break;
    case e_Bit:
        m_Bit.Destruct();
        break;
    case e_Loc:
        m_Loc.Destruct();
        break;
    case e_Id:
        m_Id.Destruct();
        break;
    case e_Interval:
        m_Interval.Destruct();
        break;
    case e_Int1:
        m_Int1.Destruct();
        break;
    case e_Int2:
        m_Int2.Destruct();
        break;
    case e_Int8:
        m_Int8.Destruct();
        break;
    case e_Common_string:
    case e_Common_bytes:
    case e_Int_delta:
    case e_Int_scaled:
    case e_Real_scaled:
    case e_Bit_bvector:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqTable_multi_data_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Int:
        m_Int.Construct();
        break;
    case e_Real:
        m_Real.Construct();
        break;
    case e_String:
        m_String.Construct();
        break;
    case e_Bytes:
        m_Bytes.Construct();
        break;
    case e_Common_string:
        (m_object = new(pool) ncbi::objects::CCommonString_table())->AddReference();
        break;
    case e_Common_bytes:
        (m_object = new(pool) ncbi::objects::CCommonBytes_table())->AddReference();
        break;
    case e_Bit:
        m_Bit.Construct();
        break;
    case e_Loc:
        m_Loc.Construct();
        break;
    case e_Id:
        m_Id.Construct();
        break;
    case e_Interval:
        m_Interval.Construct();
        break;
    case e_Int_delta:
        (m_object = new(pool) ncbi::objects::CSeqTable_multi_data())->AddReference();
        break;
    case e_Int_scaled:
        (m_object = new(pool) ncbi::objects::CScaled_int_multi_data())->AddReference();
        break;
    case e_Real_scaled:
        (m_object = new(pool) ncbi::objects::CScaled_real_multi_data())->AddReference();
        break;
    case e_Bit_bvector:
        (m_object = new(pool) ncbi::objects::CBVector_data())->AddReference();
        break;
    case e_Int1:
        m_Int1.Construct();
        break;
    case e_Int2:
        m_Int2.Construct();
        break;
    case e_Int8:
        m_Int8.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqTable_multi_data_Base::sm_SelectionNames[] = {
    "not set",
    "int",
    "real",
    "string",
    "bytes",
    "common-string",
    "common-bytes",
    "bit",
    "loc",
    "id",
    "interval",
    "int-delta",
    "int-scaled",
    "real-scaled",
    "bit-bvector",
    "int1",
    "int2",
    "int8"
};

NCBI_NS_STD::string CSeqTable_multi_data_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqTable_multi_data_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeqTable_multi_data_Base::TCommon_string& CSeqTable_multi_data_Base::GetCommon_string(void) const
{
    CheckSelected(e_Common_string);
    return *static_cast<const TCommon_string*>(m_object);
}

CSeqTable_multi_data_Base::TCommon_string& CSeqTable_multi_data_Base::SetCommon_string(void)
{
    Select(e_Common_string, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCommon_string*>(m_object);
}

void CSeqTable_multi_data_Base::SetCommon_string(CSeqTable_multi_data_Base::TCommon_string& value)
{
    TCommon_string* ptr = &value;
    if ( m_choice != e_Common_string || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Common_string;
    }
}

const CSeqTable_multi_data_Base::TCommon_bytes& CSeqTable_multi_data_Base::GetCommon_bytes(void) const
{
    CheckSelected(e_Common_bytes);
    return *static_cast<const TCommon_bytes*>(m_object);
}

CSeqTable_multi_data_Base::TCommon_bytes& CSeqTable_multi_data_Base::SetCommon_bytes(void)
{
    Select(e_Common_bytes, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCommon_bytes*>(m_object);
}

void CSeqTable_multi_data_Base::SetCommon_bytes(CSeqTable_multi_data_Base::TCommon_bytes& value)
{
    TCommon_bytes* ptr = &value;
    if ( m_choice != e_Common_bytes || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Common_bytes;
    }
}

const CSeqTable_multi_data_Base::TInt_delta& CSeqTable_multi_data_Base::GetInt_delta(void) const
{
    CheckSelected(e_Int_delta);
    return *static_cast<const TInt_delta*>(m_object);
}

CSeqTable_multi_data_Base::TInt_delta& CSeqTable_multi_data_Base::SetInt_delta(void)
{
    Select(e_Int_delta, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TInt_delta*>(m_object);
}

void CSeqTable_multi_data_Base::SetInt_delta(CSeqTable_multi_data_Base::TInt_delta& value)
{
    TInt_delta* ptr = &value;
    if ( m_choice != e_Int_delta || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Int_delta;
    }
}

const CSeqTable_multi_data_Base::TInt_scaled& CSeqTable_multi_data_Base::GetInt_scaled(void) const
{
    CheckSelected(e_Int_scaled);
    return *static_cast<const TInt_scaled*>(m_object);
}

CSeqTable_multi_data_Base::TInt_scaled& CSeqTable_multi_data_Base::SetInt_scaled(void)
{
    Select(e_Int_scaled, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TInt_scaled*>(m_object);
}

void CSeqTable_multi_data_Base::SetInt_scaled(CSeqTable_multi_data_Base::TInt_scaled& value)
{
    TInt_scaled* ptr = &value;
    if ( m_choice != e_Int_scaled || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Int_scaled;
    }
}

const CSeqTable_multi_data_Base::TReal_scaled& CSeqTable_multi_data_Base::GetReal_scaled(void) const
{
    CheckSelected(e_Real_scaled);
    return *static_cast<const TReal_scaled*>(m_object);
}

CSeqTable_multi_data_Base::TReal_scaled& CSeqTable_multi_data_Base::SetReal_scaled(void)
{
    Select(e_Real_scaled, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TReal_scaled*>(m_object);
}

void CSeqTable_multi_data_Base::SetReal_scaled(CSeqTable_multi_data_Base::TReal_scaled& value)
{
    TReal_scaled* ptr = &value;
    if ( m_choice != e_Real_scaled || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Real_scaled;
    }
}

const CSeqTable_multi_data_Base::TBit_bvector& CSeqTable_multi_data_Base::GetBit_bvector(void) const
{
    CheckSelected(e_Bit_bvector);
    return *static_cast<const TBit_bvector*>(m_object);
}

CSeqTable_multi_data_Base::TBit_bvector& CSeqTable_multi_data_Base::SetBit_bvector(void)
{
    Select(e_Bit_bvector, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBit_bvector*>(m_object);
}

void CSeqTable_multi_data_Base::SetBit_bvector(CSeqTable_multi_data_Base::TBit_bvector& value)
{
    TBit_bvector* ptr = &value;
    if ( m_choice != e_Bit_bvector || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Bit_bvector;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("SeqTable-multi-data", CSeqTable_multi_data)
{
    SET_CHOICE_MODULE("NCBI-SeqTable");
    ADD_NAMED_BUF_CHOICE_VARIANT("int", m_Int, STL_vector, (STD, (int)));
    ADD_NAMED_BUF_CHOICE_VARIANT("real", m_Real, STL_vector, (STD, (double)));
    ADD_NAMED_BUF_CHOICE_VARIANT("string", m_String, STL_vector, (CStringUTF8, ()));
    ADD_NAMED_BUF_CHOICE_VARIANT("bytes", m_Bytes, STL_vector, (POINTER, (STL_CHAR_vector, (char))));
    ADD_NAMED_REF_CHOICE_VARIANT("common-string", m_object, CCommonString_table);
    ADD_NAMED_REF_CHOICE_VARIANT("common-bytes", m_object, CCommonBytes_table);
    ADD_NAMED_BUF_CHOICE_VARIANT("bit", m_Bit, STL_CHAR_vector, (char));
    ADD_NAMED_BUF_CHOICE_VARIANT("loc", m_Loc, STL_vector, (STL_CRef, (CLASS, (CSeq_loc))));
    ADD_NAMED_BUF_CHOICE_VARIANT("id", m_Id, STL_vector, (STL_CRef, (CLASS, (CSeq_id))));
    ADD_NAMED_BUF_CHOICE_VARIANT("interval", m_Interval, STL_vector, (STL_CRef, (CLASS, (CSeq_interval))));
    ADD_NAMED_REF_CHOICE_VARIANT("int-delta", m_object, CSeqTable_multi_data);
    ADD_NAMED_REF_CHOICE_VARIANT("int-scaled", m_object, CScaled_int_multi_data);
    ADD_NAMED_REF_CHOICE_VARIANT("real-scaled", m_object, CScaled_real_multi_data);
    ADD_NAMED_REF_CHOICE_VARIANT("bit-bvector", m_object, CBVector_data);
    ADD_NAMED_BUF_CHOICE_VARIANT("int1", m_Int1, STL_CHAR_vector, (char));
    ADD_NAMED_BUF_CHOICE_VARIANT("int2", m_Int2, STL_vector, (STD, (Int2)));
    ADD_NAMED_BUF_CHOICE_VARIANT("int8", m_Int8, STL_vector, (STD, (Int8)));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqTable_multi_data_Base::CSeqTable_multi_data_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqTable_multi_data_Base::~CSeqTable_multi_data_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

