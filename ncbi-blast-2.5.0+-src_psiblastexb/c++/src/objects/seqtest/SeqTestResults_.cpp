/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqtest.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqtest/SeqTestResults.hpp>
#include <objects/seqalign/Seq_align.hpp>
#include <objects/seqfeat/Seq_feat.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqtest/Seq_test_result_set.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeqTestResults_Base::C_Source::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqTestResults_Base::C_Source::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Seq_id:
    case e_Seq_feat:
    case e_Seq_align:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqTestResults_Base::C_Source::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Seq_id:
        (m_object = new(pool) ncbi::objects::CSeq_id())->AddReference();
        break;
    case e_Seq_feat:
        (m_object = new(pool) ncbi::objects::CSeq_feat())->AddReference();
        break;
    case e_Seq_align:
        (m_object = new(pool) ncbi::objects::CSeq_align())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqTestResults_Base::C_Source::sm_SelectionNames[] = {
    "not set",
    "seq-id",
    "seq-feat",
    "seq-align"
};

NCBI_NS_STD::string CSeqTestResults_Base::C_Source::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqTestResults_Base::C_Source::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeqTestResults_Base::C_Source::TSeq_id& CSeqTestResults_Base::C_Source::GetSeq_id(void) const
{
    CheckSelected(e_Seq_id);
    return *static_cast<const TSeq_id*>(m_object);
}

CSeqTestResults_Base::C_Source::TSeq_id& CSeqTestResults_Base::C_Source::SetSeq_id(void)
{
    Select(e_Seq_id, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_id*>(m_object);
}

void CSeqTestResults_Base::C_Source::SetSeq_id(CSeqTestResults_Base::C_Source::TSeq_id& value)
{
    TSeq_id* ptr = &value;
    if ( m_choice != e_Seq_id || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_id;
    }
}

const CSeqTestResults_Base::C_Source::TSeq_feat& CSeqTestResults_Base::C_Source::GetSeq_feat(void) const
{
    CheckSelected(e_Seq_feat);
    return *static_cast<const TSeq_feat*>(m_object);
}

CSeqTestResults_Base::C_Source::TSeq_feat& CSeqTestResults_Base::C_Source::SetSeq_feat(void)
{
    Select(e_Seq_feat, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_feat*>(m_object);
}

void CSeqTestResults_Base::C_Source::SetSeq_feat(CSeqTestResults_Base::C_Source::TSeq_feat& value)
{
    TSeq_feat* ptr = &value;
    if ( m_choice != e_Seq_feat || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_feat;
    }
}

const CSeqTestResults_Base::C_Source::TSeq_align& CSeqTestResults_Base::C_Source::GetSeq_align(void) const
{
    CheckSelected(e_Seq_align);
    return *static_cast<const TSeq_align*>(m_object);
}

CSeqTestResults_Base::C_Source::TSeq_align& CSeqTestResults_Base::C_Source::SetSeq_align(void)
{
    Select(e_Seq_align, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_align*>(m_object);
}

void CSeqTestResults_Base::C_Source::SetSeq_align(CSeqTestResults_Base::C_Source::TSeq_align& value)
{
    TSeq_align* ptr = &value;
    if ( m_choice != e_Seq_align || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_align;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CSeqTestResults_Base::C_Source)
{
    SET_INTERNAL_NAME("SeqTestResults", "source");
    SET_CHOICE_MODULE("NCBI-SeqTest");
    ADD_NAMED_REF_CHOICE_VARIANT("seq-id", m_object, CSeq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-feat", m_object, CSeq_feat);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-align", m_object, CSeq_align);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqTestResults_Base::C_Source::C_Source(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqTestResults_Base::C_Source::~C_Source(void)
{
    Reset();
}


void CSeqTestResults_Base::ResetSource(void)
{
    if ( !m_Source ) {
        m_Source.Reset(new TSource());
        return;
    }
    (*m_Source).Reset();
}

void CSeqTestResults_Base::SetSource(CSeqTestResults_Base::TSource& value)
{
    m_Source.Reset(&value);
}

void CSeqTestResults_Base::ResetResults(void)
{
    if ( !m_Results ) {
        m_Results.Reset(new TResults());
        return;
    }
    (*m_Results).Reset();
}

void CSeqTestResults_Base::SetResults(CSeqTestResults_Base::TResults& value)
{
    m_Results.Reset(&value);
}

void CSeqTestResults_Base::Reset(void)
{
    ResetSource();
    ResetResults();
}

BEGIN_NAMED_BASE_CLASS_INFO("SeqTestResults", CSeqTestResults)
{
    SET_CLASS_MODULE("NCBI-SeqTest");
    ADD_NAMED_REF_MEMBER("source", m_Source, C_Source);
    ADD_NAMED_REF_MEMBER("results", m_Results, CSeq_test_result_set);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeqTestResults_Base::CSeqTestResults_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSource();
        ResetResults();
    }
}

// destructor
CSeqTestResults_Base::~CSeqTestResults_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

