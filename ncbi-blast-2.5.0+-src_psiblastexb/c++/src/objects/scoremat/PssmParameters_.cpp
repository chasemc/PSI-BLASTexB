/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'scoremat.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/scoremat/PssmParameters.hpp>
#include <objects/scoremat/CoreDef.hpp>
#include <objects/scoremat/FormatRpsDbParameters.hpp>
#include <objects/scoremat/Site_annot_set.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CPssmParameters_Base::ResetRpsdbparams(void)
{
    m_Rpsdbparams.Reset();
}

void CPssmParameters_Base::SetRpsdbparams(CPssmParameters_Base::TRpsdbparams& value)
{
    m_Rpsdbparams.Reset(&value);
}

CPssmParameters_Base::TRpsdbparams& CPssmParameters_Base::SetRpsdbparams(void)
{
    if ( !m_Rpsdbparams )
        m_Rpsdbparams.Reset(new ncbi::objects::CFormatRpsDbParameters());
    return (*m_Rpsdbparams);
}

void CPssmParameters_Base::ResetConstraints(void)
{
    m_Constraints.Reset();
}

void CPssmParameters_Base::SetConstraints(CPssmParameters_Base::TConstraints& value)
{
    m_Constraints.Reset(&value);
}

CPssmParameters_Base::TConstraints& CPssmParameters_Base::SetConstraints(void)
{
    if ( !m_Constraints )
        m_Constraints.Reset(new ncbi::objects::CCoreDef());
    return (*m_Constraints);
}

void CPssmParameters_Base::ResetAnnotatedSites(void)
{
    m_AnnotatedSites.Reset();
}

void CPssmParameters_Base::SetAnnotatedSites(CPssmParameters_Base::TAnnotatedSites& value)
{
    m_AnnotatedSites.Reset(&value);
}

CPssmParameters_Base::TAnnotatedSites& CPssmParameters_Base::SetAnnotatedSites(void)
{
    if ( !m_AnnotatedSites )
        m_AnnotatedSites.Reset(new ncbi::objects::CSite_annot_set());
    return (*m_AnnotatedSites);
}

void CPssmParameters_Base::Reset(void)
{
    ResetPseudocount();
    ResetRpsdbparams();
    ResetConstraints();
    ResetBitScoreThresh();
    ResetAnnotatedSites();
}

BEGIN_NAMED_BASE_CLASS_INFO("PssmParameters", CPssmParameters)
{
    SET_CLASS_MODULE("NCBI-ScoreMat");
    ADD_NAMED_STD_MEMBER("pseudocount", m_Pseudocount)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("rpsdbparams", m_Rpsdbparams, CFormatRpsDbParameters)->SetOptional();
    ADD_NAMED_REF_MEMBER("constraints", m_Constraints, CCoreDef)->SetOptional();
    ADD_NAMED_STD_MEMBER("bitScoreThresh", m_BitScoreThresh)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("annotatedSites", m_AnnotatedSites, CSite_annot_set)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPssmParameters_Base::CPssmParameters_Base(void)
    : m_Pseudocount(0), m_BitScoreThresh(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CPssmParameters_Base::~CPssmParameters_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

