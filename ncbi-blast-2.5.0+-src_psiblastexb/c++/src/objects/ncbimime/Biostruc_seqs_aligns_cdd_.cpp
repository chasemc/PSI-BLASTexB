/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'ncbimime.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/ncbimime/Biostruc_seqs_aligns_cdd.hpp>
#include <objects/cdd/Cdd.hpp>
#include <objects/mmdb1/Biostruc.hpp>
#include <objects/ncbimime/Bundle_seqs_aligns.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Bundle:
    case e_Cdd:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Bundle:
        (m_object = new(pool) ncbi::objects::CBundle_seqs_aligns())->AddReference();
        break;
    case e_Cdd:
        (m_object = new(pool) ncbi::objects::CCdd())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::sm_SelectionNames[] = {
    "not set",
    "bundle",
    "cdd"
};

NCBI_NS_STD::string CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::TBundle& CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::GetBundle(void) const
{
    CheckSelected(e_Bundle);
    return *static_cast<const TBundle*>(m_object);
}

CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::TBundle& CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::SetBundle(void)
{
    Select(e_Bundle, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TBundle*>(m_object);
}

void CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::SetBundle(CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::TBundle& value)
{
    TBundle* ptr = &value;
    if ( m_choice != e_Bundle || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Bundle;
    }
}

const CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::TCdd& CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::GetCdd(void) const
{
    CheckSelected(e_Cdd);
    return *static_cast<const TCdd*>(m_object);
}

CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::TCdd& CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::SetCdd(void)
{
    Select(e_Cdd, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCdd*>(m_object);
}

void CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::SetCdd(CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::TCdd& value)
{
    TCdd* ptr = &value;
    if ( m_choice != e_Cdd || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Cdd;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data)
{
    SET_INTERNAL_NAME("Biostruc-seqs-aligns-cdd", "seq-align-data");
    SET_CHOICE_MODULE("NCBI-Mime");
    ADD_NAMED_REF_CHOICE_VARIANT("bundle", m_object, CBundle_seqs_aligns);
    ADD_NAMED_REF_CHOICE_VARIANT("cdd", m_object, CCdd);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::C_Seq_align_data(void)
    : m_choice(e_not_set)
{
}

// destructor
CBiostruc_seqs_aligns_cdd_Base::C_Seq_align_data::~C_Seq_align_data(void)
{
    Reset();
}


BEGIN_NAMED_ENUM_IN_INFO("", CBiostruc_seqs_aligns_cdd_Base::, EStructure_type, false)
{
    SET_ENUM_INTERNAL_NAME("Biostruc-seqs-aligns-cdd", "structure-type");
    SET_ENUM_MODULE("NCBI-Mime");
    ADD_ENUM_VALUE("ncbi-backbone", eStructure_type_ncbi_backbone);
    ADD_ENUM_VALUE("ncbi-all-atom", eStructure_type_ncbi_all_atom);
    ADD_ENUM_VALUE("pdb-model", eStructure_type_pdb_model);
}
END_ENUM_INFO

void CBiostruc_seqs_aligns_cdd_Base::ResetSeq_align_data(void)
{
    if ( !m_Seq_align_data ) {
        m_Seq_align_data.Reset(new TSeq_align_data());
        return;
    }
    (*m_Seq_align_data).Reset();
}

void CBiostruc_seqs_aligns_cdd_Base::SetSeq_align_data(CBiostruc_seqs_aligns_cdd_Base::TSeq_align_data& value)
{
    m_Seq_align_data.Reset(&value);
}

void CBiostruc_seqs_aligns_cdd_Base::ResetStructures(void)
{
    m_Structures.clear();
    m_set_State[0] &= ~0xc;
}

void CBiostruc_seqs_aligns_cdd_Base::Reset(void)
{
    ResetSeq_align_data();
    ResetStructures();
    ResetStructure_type();
}

BEGIN_NAMED_BASE_CLASS_INFO("Biostruc-seqs-aligns-cdd", CBiostruc_seqs_aligns_cdd)
{
    SET_CLASS_MODULE("NCBI-Mime");
    ADD_NAMED_REF_MEMBER("seq-align-data", m_Seq_align_data, C_Seq_align_data);
    ADD_NAMED_MEMBER("structures", m_Structures, STL_list_set, (STL_CRef, (CLASS, (CBiostruc))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("structure-type", m_Structure_type, EStructure_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CBiostruc_seqs_aligns_cdd_Base::CBiostruc_seqs_aligns_cdd_Base(void)
    : m_Structure_type((EStructure_type)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetSeq_align_data();
    }
}

// destructor
CBiostruc_seqs_aligns_cdd_Base::~CBiostruc_seqs_aligns_cdd_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

