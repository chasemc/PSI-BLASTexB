/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqloc.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqloc/Seq_id.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/general/Object_id.hpp>
#include <objects/seqloc/Giimport_id.hpp>
#include <objects/seqloc/PDB_seq_id.hpp>
#include <objects/seqloc/Patent_seq_id.hpp>
#include <objects/seqloc/Textseq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeq_id_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeq_id_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Local:
    case e_Giim:
    case e_Genbank:
    case e_Embl:
    case e_Pir:
    case e_Swissprot:
    case e_Patent:
    case e_Other:
    case e_General:
    case e_Ddbj:
    case e_Prf:
    case e_Pdb:
    case e_Tpg:
    case e_Tpe:
    case e_Tpd:
    case e_Gpipe:
    case e_Named_annot_track:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeq_id_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Local:
        (m_object = new(pool) ncbi::objects::CObject_id())->AddReference();
        break;
    case e_Gibbsq:
        m_Gibbsq = 0;
        break;
    case e_Gibbmt:
        m_Gibbmt = 0;
        break;
    case e_Giim:
        (m_object = new(pool) ncbi::objects::CGiimport_id())->AddReference();
        break;
    case e_Genbank:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Embl:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Pir:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Swissprot:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Patent:
        (m_object = new(pool) ncbi::objects::CPatent_seq_id())->AddReference();
        break;
    case e_Other:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_General:
        (m_object = new(pool) ncbi::objects::CDbtag())->AddReference();
        break;
    case e_Gi:
        m_Gi = 0;
        break;
    case e_Ddbj:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Prf:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Pdb:
        (m_object = new(pool) ncbi::objects::CPDB_seq_id())->AddReference();
        break;
    case e_Tpg:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Tpe:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Tpd:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Gpipe:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    case e_Named_annot_track:
        (m_object = new(pool) ncbi::objects::CTextseq_id())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeq_id_Base::sm_SelectionNames[] = {
    "not set",
    "local",
    "gibbsq",
    "gibbmt",
    "giim",
    "genbank",
    "embl",
    "pir",
    "swissprot",
    "patent",
    "other",
    "general",
    "gi",
    "ddbj",
    "prf",
    "pdb",
    "tpg",
    "tpe",
    "tpd",
    "gpipe",
    "named-annot-track"
};

NCBI_NS_STD::string CSeq_id_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeq_id_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeq_id_Base::TLocal& CSeq_id_Base::GetLocal(void) const
{
    CheckSelected(e_Local);
    return *static_cast<const TLocal*>(m_object);
}

CSeq_id_Base::TLocal& CSeq_id_Base::SetLocal(void)
{
    Select(e_Local, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TLocal*>(m_object);
}

void CSeq_id_Base::SetLocal(CSeq_id_Base::TLocal& value)
{
    TLocal* ptr = &value;
    if ( m_choice != e_Local || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Local;
    }
}

const CSeq_id_Base::TGiim& CSeq_id_Base::GetGiim(void) const
{
    CheckSelected(e_Giim);
    return *static_cast<const TGiim*>(m_object);
}

CSeq_id_Base::TGiim& CSeq_id_Base::SetGiim(void)
{
    Select(e_Giim, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGiim*>(m_object);
}

void CSeq_id_Base::SetGiim(CSeq_id_Base::TGiim& value)
{
    TGiim* ptr = &value;
    if ( m_choice != e_Giim || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Giim;
    }
}

const CSeq_id_Base::TGenbank& CSeq_id_Base::GetGenbank(void) const
{
    CheckSelected(e_Genbank);
    return *static_cast<const TGenbank*>(m_object);
}

CSeq_id_Base::TGenbank& CSeq_id_Base::SetGenbank(void)
{
    Select(e_Genbank, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGenbank*>(m_object);
}

void CSeq_id_Base::SetGenbank(CSeq_id_Base::TGenbank& value)
{
    TGenbank* ptr = &value;
    if ( m_choice != e_Genbank || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Genbank;
    }
}

const CSeq_id_Base::TEmbl& CSeq_id_Base::GetEmbl(void) const
{
    CheckSelected(e_Embl);
    return *static_cast<const TEmbl*>(m_object);
}

CSeq_id_Base::TEmbl& CSeq_id_Base::SetEmbl(void)
{
    Select(e_Embl, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TEmbl*>(m_object);
}

void CSeq_id_Base::SetEmbl(CSeq_id_Base::TEmbl& value)
{
    TEmbl* ptr = &value;
    if ( m_choice != e_Embl || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Embl;
    }
}

const CSeq_id_Base::TPir& CSeq_id_Base::GetPir(void) const
{
    CheckSelected(e_Pir);
    return *static_cast<const TPir*>(m_object);
}

CSeq_id_Base::TPir& CSeq_id_Base::SetPir(void)
{
    Select(e_Pir, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPir*>(m_object);
}

void CSeq_id_Base::SetPir(CSeq_id_Base::TPir& value)
{
    TPir* ptr = &value;
    if ( m_choice != e_Pir || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pir;
    }
}

const CSeq_id_Base::TSwissprot& CSeq_id_Base::GetSwissprot(void) const
{
    CheckSelected(e_Swissprot);
    return *static_cast<const TSwissprot*>(m_object);
}

CSeq_id_Base::TSwissprot& CSeq_id_Base::SetSwissprot(void)
{
    Select(e_Swissprot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSwissprot*>(m_object);
}

void CSeq_id_Base::SetSwissprot(CSeq_id_Base::TSwissprot& value)
{
    TSwissprot* ptr = &value;
    if ( m_choice != e_Swissprot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Swissprot;
    }
}

const CSeq_id_Base::TPatent& CSeq_id_Base::GetPatent(void) const
{
    CheckSelected(e_Patent);
    return *static_cast<const TPatent*>(m_object);
}

CSeq_id_Base::TPatent& CSeq_id_Base::SetPatent(void)
{
    Select(e_Patent, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPatent*>(m_object);
}

void CSeq_id_Base::SetPatent(CSeq_id_Base::TPatent& value)
{
    TPatent* ptr = &value;
    if ( m_choice != e_Patent || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Patent;
    }
}

const CSeq_id_Base::TOther& CSeq_id_Base::GetOther(void) const
{
    CheckSelected(e_Other);
    return *static_cast<const TOther*>(m_object);
}

CSeq_id_Base::TOther& CSeq_id_Base::SetOther(void)
{
    Select(e_Other, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TOther*>(m_object);
}

void CSeq_id_Base::SetOther(CSeq_id_Base::TOther& value)
{
    TOther* ptr = &value;
    if ( m_choice != e_Other || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Other;
    }
}

const CSeq_id_Base::TGeneral& CSeq_id_Base::GetGeneral(void) const
{
    CheckSelected(e_General);
    return *static_cast<const TGeneral*>(m_object);
}

CSeq_id_Base::TGeneral& CSeq_id_Base::SetGeneral(void)
{
    Select(e_General, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGeneral*>(m_object);
}

void CSeq_id_Base::SetGeneral(CSeq_id_Base::TGeneral& value)
{
    TGeneral* ptr = &value;
    if ( m_choice != e_General || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_General;
    }
}

const CSeq_id_Base::TDdbj& CSeq_id_Base::GetDdbj(void) const
{
    CheckSelected(e_Ddbj);
    return *static_cast<const TDdbj*>(m_object);
}

CSeq_id_Base::TDdbj& CSeq_id_Base::SetDdbj(void)
{
    Select(e_Ddbj, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TDdbj*>(m_object);
}

void CSeq_id_Base::SetDdbj(CSeq_id_Base::TDdbj& value)
{
    TDdbj* ptr = &value;
    if ( m_choice != e_Ddbj || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Ddbj;
    }
}

const CSeq_id_Base::TPrf& CSeq_id_Base::GetPrf(void) const
{
    CheckSelected(e_Prf);
    return *static_cast<const TPrf*>(m_object);
}

CSeq_id_Base::TPrf& CSeq_id_Base::SetPrf(void)
{
    Select(e_Prf, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPrf*>(m_object);
}

void CSeq_id_Base::SetPrf(CSeq_id_Base::TPrf& value)
{
    TPrf* ptr = &value;
    if ( m_choice != e_Prf || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Prf;
    }
}

const CSeq_id_Base::TPdb& CSeq_id_Base::GetPdb(void) const
{
    CheckSelected(e_Pdb);
    return *static_cast<const TPdb*>(m_object);
}

CSeq_id_Base::TPdb& CSeq_id_Base::SetPdb(void)
{
    Select(e_Pdb, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPdb*>(m_object);
}

void CSeq_id_Base::SetPdb(CSeq_id_Base::TPdb& value)
{
    TPdb* ptr = &value;
    if ( m_choice != e_Pdb || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pdb;
    }
}

const CSeq_id_Base::TTpg& CSeq_id_Base::GetTpg(void) const
{
    CheckSelected(e_Tpg);
    return *static_cast<const TTpg*>(m_object);
}

CSeq_id_Base::TTpg& CSeq_id_Base::SetTpg(void)
{
    Select(e_Tpg, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTpg*>(m_object);
}

void CSeq_id_Base::SetTpg(CSeq_id_Base::TTpg& value)
{
    TTpg* ptr = &value;
    if ( m_choice != e_Tpg || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Tpg;
    }
}

const CSeq_id_Base::TTpe& CSeq_id_Base::GetTpe(void) const
{
    CheckSelected(e_Tpe);
    return *static_cast<const TTpe*>(m_object);
}

CSeq_id_Base::TTpe& CSeq_id_Base::SetTpe(void)
{
    Select(e_Tpe, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTpe*>(m_object);
}

void CSeq_id_Base::SetTpe(CSeq_id_Base::TTpe& value)
{
    TTpe* ptr = &value;
    if ( m_choice != e_Tpe || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Tpe;
    }
}

const CSeq_id_Base::TTpd& CSeq_id_Base::GetTpd(void) const
{
    CheckSelected(e_Tpd);
    return *static_cast<const TTpd*>(m_object);
}

CSeq_id_Base::TTpd& CSeq_id_Base::SetTpd(void)
{
    Select(e_Tpd, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTpd*>(m_object);
}

void CSeq_id_Base::SetTpd(CSeq_id_Base::TTpd& value)
{
    TTpd* ptr = &value;
    if ( m_choice != e_Tpd || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Tpd;
    }
}

const CSeq_id_Base::TGpipe& CSeq_id_Base::GetGpipe(void) const
{
    CheckSelected(e_Gpipe);
    return *static_cast<const TGpipe*>(m_object);
}

CSeq_id_Base::TGpipe& CSeq_id_Base::SetGpipe(void)
{
    Select(e_Gpipe, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TGpipe*>(m_object);
}

void CSeq_id_Base::SetGpipe(CSeq_id_Base::TGpipe& value)
{
    TGpipe* ptr = &value;
    if ( m_choice != e_Gpipe || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Gpipe;
    }
}

const CSeq_id_Base::TNamed_annot_track& CSeq_id_Base::GetNamed_annot_track(void) const
{
    CheckSelected(e_Named_annot_track);
    return *static_cast<const TNamed_annot_track*>(m_object);
}

CSeq_id_Base::TNamed_annot_track& CSeq_id_Base::SetNamed_annot_track(void)
{
    Select(e_Named_annot_track, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TNamed_annot_track*>(m_object);
}

void CSeq_id_Base::SetNamed_annot_track(CSeq_id_Base::TNamed_annot_track& value)
{
    TNamed_annot_track* ptr = &value;
    if ( m_choice != e_Named_annot_track || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Named_annot_track;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Seq-id", CSeq_id)
{
    SET_CHOICE_MODULE("NCBI-Seqloc");
    ADD_NAMED_REF_CHOICE_VARIANT("local", m_object, CObject_id);
    ADD_NAMED_STD_CHOICE_VARIANT("gibbsq", m_Gibbsq);
    ADD_NAMED_STD_CHOICE_VARIANT("gibbmt", m_Gibbmt);
    ADD_NAMED_REF_CHOICE_VARIANT("giim", m_object, CGiimport_id);
    ADD_NAMED_REF_CHOICE_VARIANT("genbank", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("embl", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("pir", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("swissprot", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("patent", m_object, CPatent_seq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("other", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("general", m_object, CDbtag);
    ADD_NAMED_STD_CHOICE_VARIANT("gi", m_Gi);
    ADD_NAMED_REF_CHOICE_VARIANT("ddbj", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("prf", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("pdb", m_object, CPDB_seq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("tpg", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("tpe", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("tpd", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("gpipe", m_object, CTextseq_id);
    ADD_NAMED_REF_CHOICE_VARIANT("named-annot-track", m_object, CTextseq_id);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeq_id_Base::CSeq_id_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeq_id_Base::~CSeq_id_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

