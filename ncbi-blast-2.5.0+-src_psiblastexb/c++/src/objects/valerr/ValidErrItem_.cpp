/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'valerr.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/valerr/ValidErrItem.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CValidErrItem_Base::, ESev, true)
{
    SET_ENUM_INTERNAL_NAME("ValidErrItem", "sev");
    SET_ENUM_MODULE("NCBI-ValErrors");
    ADD_ENUM_VALUE("info", eSev_info);
    ADD_ENUM_VALUE("warning", eSev_warning);
    ADD_ENUM_VALUE("error", eSev_error);
    ADD_ENUM_VALUE("critical", eSev_critical);
    ADD_ENUM_VALUE("fatal", eSev_fatal);
    ADD_ENUM_VALUE("trace", eSev_trace);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CValidErrItem_Base::, EObjectType, true)
{
    SET_ENUM_INTERNAL_NAME("ValidErrItem", "objectType");
    SET_ENUM_MODULE("NCBI-ValErrors");
    ADD_ENUM_VALUE("seqentry", eObjectType_seqentry);
    ADD_ENUM_VALUE("bioseq", eObjectType_bioseq);
    ADD_ENUM_VALUE("bioseqset", eObjectType_bioseqset);
    ADD_ENUM_VALUE("seqdesc", eObjectType_seqdesc);
    ADD_ENUM_VALUE("seqannot", eObjectType_seqannot);
    ADD_ENUM_VALUE("annotdesc", eObjectType_annotdesc);
    ADD_ENUM_VALUE("seqfeat", eObjectType_seqfeat);
    ADD_ENUM_VALUE("seqalign", eObjectType_seqalign);
    ADD_ENUM_VALUE("seqgraph", eObjectType_seqgraph);
    ADD_ENUM_VALUE("seqsub", eObjectType_seqsub);
    ADD_ENUM_VALUE("submitblock", eObjectType_submitblock);
}
END_ENUM_INFO

void CValidErrItem_Base::ResetMsg(void)
{
    m_Msg.erase();
    m_set_State[0] &= ~0x30;
}

void CValidErrItem_Base::ResetObjDesc(void)
{
    m_ObjDesc.erase();
    m_set_State[0] &= ~0xc0;
}

void CValidErrItem_Base::ResetAccession(void)
{
    m_Accession.erase();
    m_set_State[0] &= ~0x300;
}

void CValidErrItem_Base::ResetFeatureId(void)
{
    m_FeatureId.erase();
    m_set_State[0] &= ~0xc00;
}

void CValidErrItem_Base::ResetErrorName(void)
{
    m_ErrorName.erase();
    m_set_State[0] &= ~0x30000;
}

void CValidErrItem_Base::ResetErrorGroup(void)
{
    m_ErrorGroup.erase();
    m_set_State[0] &= ~0xc0000;
}

void CValidErrItem_Base::ResetAccnver(void)
{
    m_Accnver.erase();
    m_set_State[0] &= ~0x300000;
}

void CValidErrItem_Base::Reset(void)
{
    ResetSev();
    ResetErrIndex();
    ResetMsg();
    ResetObjDesc();
    ResetAccession();
    ResetFeatureId();
    ResetSeqOffset();
    ResetObjectType();
    ResetErrorName();
    ResetErrorGroup();
    ResetAccnver();
    ResetVersion();
}

BEGIN_NAMED_BASE_CLASS_INFO("ValidErrItem", CValidErrItem)
{
    SET_CLASS_MODULE("NCBI-ValErrors");
    ADD_NAMED_ENUM_MEMBER("sev", m_Sev, ESev)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("errIndex", m_ErrIndex)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("msg", m_Msg)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("objDesc", m_ObjDesc)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("accession", m_Accession)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("featureId", m_FeatureId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("seqOffset", m_SeqOffset)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("objectType", m_ObjectType, EObjectType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("errorName", m_ErrorName)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("errorGroup", m_ErrorGroup)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("accnver", m_Accnver)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("version", m_Version)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CValidErrItem_Base::CValidErrItem_Base(void)
    : m_Sev((ESev)(0)), m_ErrIndex(0), m_SeqOffset(0), m_ObjectType((EObjectType)(0)), m_Version(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CValidErrItem_Base::~CValidErrItem_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

