/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'id1.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/id1/id1_client.hpp>
#include <objects/id1/ID1SeqEntry_info.hpp>
#include <objects/id1/ID1Seq_hist.hpp>
#include <objects/id1/ID1blob_info.hpp>
#include <objects/seqloc/Seq_id.hpp>
#include <objects/seqset/Seq_entry.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CID1Client_Base::x_Connect(void)
{
    Tparent::x_Connect();
    AskInit();
}

void CID1Client_Base::x_Disconnect(void)
{
    AskFini();
    Tparent::x_Disconnect();
}

void CID1Client_Base::Ask(const CID1Client_Base::TRequest& request, CID1Client_Base::TReply& reply, CID1Client_Base::TReplyChoice::E_Choice wanted)
{
    Ask(request, reply);
    TReplyChoice& rc = x_Choice(reply);
    if (rc.Which() == wanted) {
        return; // ok
    } else if (rc.IsError()) {
        CNcbiOstrstream oss;
        oss << "CID1Client: server error: " << rc.GetError();
        NCBI_THROW(CException, eUnknown, CNcbiOstrstreamToString(oss));
    } else {
        rc.ThrowInvalidSelection(wanted);
    }
}

void CID1Client_Base::AskInit(CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetInit();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Init);
}

NCBI_NS_NCBI::TGi CID1Client_Base::AskGetgi(const CSeq_id& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetgi(const_cast<CSeq_id&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gotgi);
    return x_Choice(*reply).GetGotgi();
}

CRef<CSeq_entry> CID1Client_Base::AskGetsefromgi(const CID1server_maxcomplex& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetsefromgi(const_cast<CID1server_maxcomplex&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gotseqentry);
    return CRef<CSeq_entry>(&x_Choice(*reply).SetGotseqentry());
}

void CID1Client_Base::AskFini(CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetFini();
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Fini);
}

list< CRef< CSeq_id > > CID1Client_Base::AskGetseqidsfromgi(const NCBI_NS_NCBI::TGi& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetseqidsfromgi(const_cast<NCBI_NS_NCBI::TGi&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Ids);
    return x_Choice(*reply).GetIds();
}

list< CRef< CID1Seq_hist > > CID1Client_Base::AskGetgihist(const NCBI_NS_NCBI::TGi& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetgihist(const_cast<NCBI_NS_NCBI::TGi&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gihist);
    return x_Choice(*reply).GetGihist();
}

list< CRef< CID1Seq_hist > > CID1Client_Base::AskGetgirev(const NCBI_NS_NCBI::TGi& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetgirev(const_cast<NCBI_NS_NCBI::TGi&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Girevhist);
    return x_Choice(*reply).GetGirevhist();
}

int CID1Client_Base::AskGetgistate(const NCBI_NS_NCBI::TGi& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetgistate(const_cast<NCBI_NS_NCBI::TGi&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gistate);
    return x_Choice(*reply).GetGistate();
}

CRef<CID1SeqEntry_info> CID1Client_Base::AskGetsewithinfo(const CID1server_maxcomplex& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetsewithinfo(const_cast<CID1server_maxcomplex&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gotsewithinfo);
    return CRef<CID1SeqEntry_info>(&x_Choice(*reply).SetGotsewithinfo());
}

CRef<CID1blob_info> CID1Client_Base::AskGetblobinfo(const CID1server_maxcomplex& req, CID1Client_Base::TReply* reply)
{
    TRequestChoice request;
    TReply         reply0;
    request.SetGetblobinfo(const_cast<CID1server_maxcomplex&>(req));
    if ( !reply ) {
        reply = &reply0;
    }
    Ask(request, *reply, TReplyChoice::e_Gotblobinfo);
    return CRef<CID1blob_info>(&x_Choice(*reply).SetGotblobinfo());
}

// constructor
CID1Client_Base::CID1Client_Base(void)
    : Tparent("ID1")
{
}

// destructor
CID1Client_Base::~CID1Client_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

