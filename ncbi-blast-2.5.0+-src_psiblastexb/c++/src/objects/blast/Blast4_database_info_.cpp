/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'blast.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/blast/Blast4_database_info.hpp>
#include <objects/blast/Blast4_database.hpp>
#include <objects/blast/Blast4_parameters.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CBlast4_database_info_Base::ResetDatabase(void)
{
    if ( !m_Database ) {
        m_Database.Reset(new TDatabase());
        return;
    }
    (*m_Database).Reset();
}

void CBlast4_database_info_Base::SetDatabase(CBlast4_database_info_Base::TDatabase& value)
{
    m_Database.Reset(&value);
}

void CBlast4_database_info_Base::ResetDescription(void)
{
    m_Description.erase();
    m_set_State[0] &= ~0xc;
}

void CBlast4_database_info_Base::ResetLast_updated(void)
{
    m_Last_updated.erase();
    m_set_State[0] &= ~0x30;
}

void CBlast4_database_info_Base::ResetExtended(void)
{
    m_Extended.Reset();
}

void CBlast4_database_info_Base::SetExtended(CBlast4_database_info_Base::TExtended& value)
{
    m_Extended.Reset(&value);
}

CBlast4_database_info_Base::TExtended& CBlast4_database_info_Base::SetExtended(void)
{
    if ( !m_Extended )
        m_Extended.Reset(new ncbi::objects::CBlast4_parameters());
    return (*m_Extended);
}

void CBlast4_database_info_Base::Reset(void)
{
    ResetDatabase();
    ResetDescription();
    ResetLast_updated();
    ResetTotal_length();
    ResetNum_sequences();
    ResetSeqtech();
    ResetTaxid();
    ResetExtended();
}

BEGIN_NAMED_BASE_CLASS_INFO("Blast4-database-info", CBlast4_database_info)
{
    SET_CLASS_MODULE("NCBI-Blast4");
    ADD_NAMED_REF_MEMBER("database", m_Database, CBlast4_database);
    ADD_NAMED_STD_MEMBER("description", m_Description)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("last-updated", m_Last_updated)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("total-length", m_Total_length, BigInt, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("num-sequences", m_Num_sequences, BigInt, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("seqtech", m_Seqtech, EBlast4_seqtech)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("taxid", m_Taxid)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_REF_MEMBER("extended", m_Extended, CBlast4_parameters)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CBlast4_database_info_Base::CBlast4_database_info_Base(void)
    : m_Total_length(0), m_Num_sequences(0), m_Seqtech((int)(0)), m_Taxid(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetDatabase();
    }
}

// destructor
CBlast4_database_info_Base::~CBlast4_database_info_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

