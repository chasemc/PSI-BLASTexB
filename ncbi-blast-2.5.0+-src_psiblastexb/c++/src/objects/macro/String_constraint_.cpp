/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'macro.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/macro/String_constraint.hpp>
#include <objects/macro/Word_substitution_set.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CString_constraint_Base::ResetMatch_text(void)
{
    m_Match_text.erase();
    m_set_State[0] &= ~0x3;
}

void CString_constraint_Base::ResetIgnore_words(void)
{
    m_Ignore_words.Reset();
}

void CString_constraint_Base::SetIgnore_words(CString_constraint_Base::TIgnore_words& value)
{
    m_Ignore_words.Reset(&value);
}

CString_constraint_Base::TIgnore_words& CString_constraint_Base::SetIgnore_words(void)
{
    if ( !m_Ignore_words )
        m_Ignore_words.Reset(new ncbi::objects::CWord_substitution_set());
    return (*m_Ignore_words);
}

void CString_constraint_Base::Reset(void)
{
    ResetMatch_text();
    ResetMatch_location();
    ResetCase_sensitive();
    ResetIgnore_space();
    ResetIgnore_punct();
    ResetIgnore_words();
    ResetWhole_word();
    ResetNot_present();
    ResetIs_all_caps();
    ResetIs_all_lower();
    ResetIs_all_punct();
    ResetIgnore_weasel();
    ResetIs_first_cap();
    ResetIs_first_each_cap();
}

BEGIN_NAMED_BASE_CLASS_INFO("String-constraint", CString_constraint)
{
    SET_CLASS_MODULE("NCBI-Macro");
    ADD_NAMED_STD_MEMBER("match-text", m_Match_text)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("match-location", m_Match_location, EString_location)->SetDefault(new TMatch_location(eString_location_contains))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("case-sensitive", m_Case_sensitive)->SetDefault(new TCase_sensitive(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("ignore-space", m_Ignore_space)->SetDefault(new TIgnore_space(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("ignore-punct", m_Ignore_punct)->SetDefault(new TIgnore_punct(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("ignore-words", m_Ignore_words, CWord_substitution_set)->SetOptional();
    ADD_NAMED_STD_MEMBER("whole-word", m_Whole_word)->SetDefault(new TWhole_word(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("not-present", m_Not_present)->SetDefault(new TNot_present(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("is-all-caps", m_Is_all_caps)->SetDefault(new TIs_all_caps(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("is-all-lower", m_Is_all_lower)->SetDefault(new TIs_all_lower(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("is-all-punct", m_Is_all_punct)->SetDefault(new TIs_all_punct(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("ignore-weasel", m_Ignore_weasel)->SetDefault(new TIgnore_weasel(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("is-first-cap", m_Is_first_cap)->SetDefault(new TIs_first_cap(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("is-first-each-cap", m_Is_first_each_cap)->SetDefault(new TIs_first_each_cap(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CString_constraint_Base::CString_constraint_Base(void)
    : m_Match_location(eString_location_contains), m_Case_sensitive(false), m_Ignore_space(false), m_Ignore_punct(false), m_Whole_word(false), m_Not_present(false), m_Is_all_caps(false), m_Is_all_lower(false), m_Is_all_punct(false), m_Ignore_weasel(false), m_Is_first_cap(false), m_Is_first_each_cap(false)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CString_constraint_Base::~CString_constraint_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

