/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'macro.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/macro/Location_edit_type.hpp>
#include <objects/macro/Edit_location_strand.hpp>
#include <objects/macro/Extend_to_feature.hpp>
#include <objects/macro/Partial_3_set_action.hpp>
#include <objects/macro/Partial_5_set_action.hpp>
#include <objects/macro/Partial_both_set_action.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CLocation_edit_type_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CLocation_edit_type_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Strand:
    case e_Set_5_partial:
    case e_Set_3_partial:
    case e_Set_both_partial:
    case e_Extend_5_to_feat:
    case e_Extend_3_to_feat:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CLocation_edit_type_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Strand:
        (m_object = new(pool) ncbi::objects::CEdit_location_strand())->AddReference();
        break;
    case e_Set_5_partial:
        (m_object = new(pool) ncbi::objects::CPartial_5_set_action())->AddReference();
        break;
    case e_Clear_5_partial:
        m_Clear_5_partial = (ncbi::objects::EPartial_5_clear_constraint)(0);
        break;
    case e_Set_3_partial:
        (m_object = new(pool) ncbi::objects::CPartial_3_set_action())->AddReference();
        break;
    case e_Clear_3_partial:
        m_Clear_3_partial = (ncbi::objects::EPartial_3_clear_constraint)(0);
        break;
    case e_Set_both_partial:
        (m_object = new(pool) ncbi::objects::CPartial_both_set_action())->AddReference();
        break;
    case e_Clear_both_partial:
        m_Clear_both_partial = (ncbi::objects::EPartial_both_clear_constraint)(0);
        break;
    case e_Convert:
        m_Convert = (ncbi::objects::EConvert_location_type)(0);
        break;
    case e_Extend_5_to_feat:
        (m_object = new(pool) ncbi::objects::CExtend_to_feature())->AddReference();
        break;
    case e_Extend_3_to_feat:
        (m_object = new(pool) ncbi::objects::CExtend_to_feature())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CLocation_edit_type_Base::sm_SelectionNames[] = {
    "not set",
    "strand",
    "set-5-partial",
    "clear-5-partial",
    "set-3-partial",
    "clear-3-partial",
    "set-both-partial",
    "clear-both-partial",
    "convert",
    "extend-5",
    "extend-3",
    "extend-5-to-feat",
    "extend-3-to-feat"
};

NCBI_NS_STD::string CLocation_edit_type_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CLocation_edit_type_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CLocation_edit_type_Base::TStrand& CLocation_edit_type_Base::GetStrand(void) const
{
    CheckSelected(e_Strand);
    return *static_cast<const TStrand*>(m_object);
}

CLocation_edit_type_Base::TStrand& CLocation_edit_type_Base::SetStrand(void)
{
    Select(e_Strand, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TStrand*>(m_object);
}

void CLocation_edit_type_Base::SetStrand(CLocation_edit_type_Base::TStrand& value)
{
    TStrand* ptr = &value;
    if ( m_choice != e_Strand || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Strand;
    }
}

const CLocation_edit_type_Base::TSet_5_partial& CLocation_edit_type_Base::GetSet_5_partial(void) const
{
    CheckSelected(e_Set_5_partial);
    return *static_cast<const TSet_5_partial*>(m_object);
}

CLocation_edit_type_Base::TSet_5_partial& CLocation_edit_type_Base::SetSet_5_partial(void)
{
    Select(e_Set_5_partial, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSet_5_partial*>(m_object);
}

void CLocation_edit_type_Base::SetSet_5_partial(CLocation_edit_type_Base::TSet_5_partial& value)
{
    TSet_5_partial* ptr = &value;
    if ( m_choice != e_Set_5_partial || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Set_5_partial;
    }
}

const CLocation_edit_type_Base::TSet_3_partial& CLocation_edit_type_Base::GetSet_3_partial(void) const
{
    CheckSelected(e_Set_3_partial);
    return *static_cast<const TSet_3_partial*>(m_object);
}

CLocation_edit_type_Base::TSet_3_partial& CLocation_edit_type_Base::SetSet_3_partial(void)
{
    Select(e_Set_3_partial, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSet_3_partial*>(m_object);
}

void CLocation_edit_type_Base::SetSet_3_partial(CLocation_edit_type_Base::TSet_3_partial& value)
{
    TSet_3_partial* ptr = &value;
    if ( m_choice != e_Set_3_partial || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Set_3_partial;
    }
}

const CLocation_edit_type_Base::TSet_both_partial& CLocation_edit_type_Base::GetSet_both_partial(void) const
{
    CheckSelected(e_Set_both_partial);
    return *static_cast<const TSet_both_partial*>(m_object);
}

CLocation_edit_type_Base::TSet_both_partial& CLocation_edit_type_Base::SetSet_both_partial(void)
{
    Select(e_Set_both_partial, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSet_both_partial*>(m_object);
}

void CLocation_edit_type_Base::SetSet_both_partial(CLocation_edit_type_Base::TSet_both_partial& value)
{
    TSet_both_partial* ptr = &value;
    if ( m_choice != e_Set_both_partial || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Set_both_partial;
    }
}

const CLocation_edit_type_Base::TExtend_5_to_feat& CLocation_edit_type_Base::GetExtend_5_to_feat(void) const
{
    CheckSelected(e_Extend_5_to_feat);
    return *static_cast<const TExtend_5_to_feat*>(m_object);
}

CLocation_edit_type_Base::TExtend_5_to_feat& CLocation_edit_type_Base::SetExtend_5_to_feat(void)
{
    Select(e_Extend_5_to_feat, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TExtend_5_to_feat*>(m_object);
}

void CLocation_edit_type_Base::SetExtend_5_to_feat(CLocation_edit_type_Base::TExtend_5_to_feat& value)
{
    TExtend_5_to_feat* ptr = &value;
    if ( m_choice != e_Extend_5_to_feat || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Extend_5_to_feat;
    }
}

const CLocation_edit_type_Base::TExtend_3_to_feat& CLocation_edit_type_Base::GetExtend_3_to_feat(void) const
{
    CheckSelected(e_Extend_3_to_feat);
    return *static_cast<const TExtend_3_to_feat*>(m_object);
}

CLocation_edit_type_Base::TExtend_3_to_feat& CLocation_edit_type_Base::SetExtend_3_to_feat(void)
{
    Select(e_Extend_3_to_feat, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TExtend_3_to_feat*>(m_object);
}

void CLocation_edit_type_Base::SetExtend_3_to_feat(CLocation_edit_type_Base::TExtend_3_to_feat& value)
{
    TExtend_3_to_feat* ptr = &value;
    if ( m_choice != e_Extend_3_to_feat || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Extend_3_to_feat;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Location-edit-type", CLocation_edit_type)
{
    SET_CHOICE_MODULE("NCBI-Macro");
    ADD_NAMED_REF_CHOICE_VARIANT("strand", m_object, CEdit_location_strand);
    ADD_NAMED_REF_CHOICE_VARIANT("set-5-partial", m_object, CPartial_5_set_action);
    ADD_NAMED_ENUM_CHOICE_VARIANT("clear-5-partial", m_Clear_5_partial, EPartial_5_clear_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("set-3-partial", m_object, CPartial_3_set_action);
    ADD_NAMED_ENUM_CHOICE_VARIANT("clear-3-partial", m_Clear_3_partial, EPartial_3_clear_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("set-both-partial", m_object, CPartial_both_set_action);
    ADD_NAMED_ENUM_CHOICE_VARIANT("clear-both-partial", m_Clear_both_partial, EPartial_both_clear_constraint);
    ADD_NAMED_ENUM_CHOICE_VARIANT("convert", m_Convert, EConvert_location_type);
    ADD_NAMED_NULL_CHOICE_VARIANT("extend-5", null, ());
    ADD_NAMED_NULL_CHOICE_VARIANT("extend-3", null, ());
    ADD_NAMED_REF_CHOICE_VARIANT("extend-5-to-feat", m_object, CExtend_to_feature);
    ADD_NAMED_REF_CHOICE_VARIANT("extend-3-to-feat", m_object, CExtend_to_feature);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CLocation_edit_type_Base::CLocation_edit_type_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CLocation_edit_type_Base::~CLocation_edit_type_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

