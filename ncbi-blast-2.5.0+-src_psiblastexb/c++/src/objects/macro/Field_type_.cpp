/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'macro.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/macro/Field_type.hpp>
#include <objects/macro/Feature_field.hpp>
#include <objects/macro/Molinfo_field.hpp>
#include <objects/macro/Rna_qual.hpp>
#include <objects/macro/Source_qual_choice.hpp>
#include <objects/macro/Structured_comment_field.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CField_type_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CField_type_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Source_qual:
    case e_Feature_field:
    case e_Rna_field:
    case e_Molinfo_field:
    case e_Struc_comment_field:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CField_type_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Source_qual:
        (m_object = new(pool) ncbi::objects::CSource_qual_choice())->AddReference();
        break;
    case e_Feature_field:
        (m_object = new(pool) ncbi::objects::CFeature_field())->AddReference();
        break;
    case e_Rna_field:
        (m_object = new(pool) ncbi::objects::CRna_qual())->AddReference();
        break;
    case e_Cds_gene_prot:
        m_Cds_gene_prot = (ncbi::objects::ECDSGeneProt_field)(0);
        break;
    case e_Molinfo_field:
        (m_object = new(pool) ncbi::objects::CMolinfo_field())->AddReference();
        break;
    case e_Pub:
        m_Pub = (ncbi::objects::EPublication_field)(0);
        break;
    case e_Struc_comment_field:
        (m_object = new(pool) ncbi::objects::CStructured_comment_field())->AddReference();
        break;
    case e_Misc:
        m_Misc = (ncbi::objects::EMisc_field)(0);
        break;
    case e_Dblink:
        m_Dblink = (ncbi::objects::EDBLink_field_type)(0);
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CField_type_Base::sm_SelectionNames[] = {
    "not set",
    "source-qual",
    "feature-field",
    "rna-field",
    "cds-gene-prot",
    "molinfo-field",
    "pub",
    "struc-comment-field",
    "misc",
    "dblink"
};

NCBI_NS_STD::string CField_type_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CField_type_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CField_type_Base::TSource_qual& CField_type_Base::GetSource_qual(void) const
{
    CheckSelected(e_Source_qual);
    return *static_cast<const TSource_qual*>(m_object);
}

CField_type_Base::TSource_qual& CField_type_Base::SetSource_qual(void)
{
    Select(e_Source_qual, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSource_qual*>(m_object);
}

void CField_type_Base::SetSource_qual(CField_type_Base::TSource_qual& value)
{
    TSource_qual* ptr = &value;
    if ( m_choice != e_Source_qual || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Source_qual;
    }
}

const CField_type_Base::TFeature_field& CField_type_Base::GetFeature_field(void) const
{
    CheckSelected(e_Feature_field);
    return *static_cast<const TFeature_field*>(m_object);
}

CField_type_Base::TFeature_field& CField_type_Base::SetFeature_field(void)
{
    Select(e_Feature_field, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TFeature_field*>(m_object);
}

void CField_type_Base::SetFeature_field(CField_type_Base::TFeature_field& value)
{
    TFeature_field* ptr = &value;
    if ( m_choice != e_Feature_field || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Feature_field;
    }
}

const CField_type_Base::TRna_field& CField_type_Base::GetRna_field(void) const
{
    CheckSelected(e_Rna_field);
    return *static_cast<const TRna_field*>(m_object);
}

CField_type_Base::TRna_field& CField_type_Base::SetRna_field(void)
{
    Select(e_Rna_field, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TRna_field*>(m_object);
}

void CField_type_Base::SetRna_field(CField_type_Base::TRna_field& value)
{
    TRna_field* ptr = &value;
    if ( m_choice != e_Rna_field || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Rna_field;
    }
}

const CField_type_Base::TMolinfo_field& CField_type_Base::GetMolinfo_field(void) const
{
    CheckSelected(e_Molinfo_field);
    return *static_cast<const TMolinfo_field*>(m_object);
}

CField_type_Base::TMolinfo_field& CField_type_Base::SetMolinfo_field(void)
{
    Select(e_Molinfo_field, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TMolinfo_field*>(m_object);
}

void CField_type_Base::SetMolinfo_field(CField_type_Base::TMolinfo_field& value)
{
    TMolinfo_field* ptr = &value;
    if ( m_choice != e_Molinfo_field || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Molinfo_field;
    }
}

const CField_type_Base::TStruc_comment_field& CField_type_Base::GetStruc_comment_field(void) const
{
    CheckSelected(e_Struc_comment_field);
    return *static_cast<const TStruc_comment_field*>(m_object);
}

CField_type_Base::TStruc_comment_field& CField_type_Base::SetStruc_comment_field(void)
{
    Select(e_Struc_comment_field, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TStruc_comment_field*>(m_object);
}

void CField_type_Base::SetStruc_comment_field(CField_type_Base::TStruc_comment_field& value)
{
    TStruc_comment_field* ptr = &value;
    if ( m_choice != e_Struc_comment_field || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Struc_comment_field;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Field-type", CField_type)
{
    SET_CHOICE_MODULE("NCBI-Macro");
    ADD_NAMED_REF_CHOICE_VARIANT("source-qual", m_object, CSource_qual_choice);
    ADD_NAMED_REF_CHOICE_VARIANT("feature-field", m_object, CFeature_field);
    ADD_NAMED_REF_CHOICE_VARIANT("rna-field", m_object, CRna_qual);
    ADD_NAMED_ENUM_CHOICE_VARIANT("cds-gene-prot", m_Cds_gene_prot, ECDSGeneProt_field);
    ADD_NAMED_REF_CHOICE_VARIANT("molinfo-field", m_object, CMolinfo_field);
    ADD_NAMED_ENUM_CHOICE_VARIANT("pub", m_Pub, EPublication_field);
    ADD_NAMED_REF_CHOICE_VARIANT("struc-comment-field", m_object, CStructured_comment_field);
    ADD_NAMED_ENUM_CHOICE_VARIANT("misc", m_Misc, EMisc_field);
    ADD_NAMED_ENUM_CHOICE_VARIANT("dblink", m_Dblink, EDBLink_field_type);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CField_type_Base::CField_type_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CField_type_Base::~CField_type_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

