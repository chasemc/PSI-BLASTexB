/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'macro.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/macro/Constraint_choice.hpp>
#include <objects/macro/CDSGenePr_pseudo_constrain.hpp>
#include <objects/macro/CDSGenePro_qual_constraint.hpp>
#include <objects/macro/Field_constraint.hpp>
#include <objects/macro/Field_type.hpp>
#include <objects/macro/Location_constraint.hpp>
#include <objects/macro/Molinfo_field_constraint.hpp>
#include <objects/macro/Publication_constraint.hpp>
#include <objects/macro/Sequence_constraint.hpp>
#include <objects/macro/Source_constraint.hpp>
#include <objects/macro/String_constraint.hpp>
#include <objects/macro/Translation_constraint.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CConstraint_choice_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CConstraint_choice_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_String:
    case e_Location:
    case e_Field:
    case e_Source:
    case e_Cdsgeneprot_qual:
    case e_Cdsgeneprot_pseudo:
    case e_Sequence:
    case e_Pub:
    case e_Molinfo:
    case e_Field_missing:
    case e_Translation:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CConstraint_choice_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_String:
        (m_object = new(pool) ncbi::objects::CString_constraint())->AddReference();
        break;
    case e_Location:
        (m_object = new(pool) ncbi::objects::CLocation_constraint())->AddReference();
        break;
    case e_Field:
        (m_object = new(pool) ncbi::objects::CField_constraint())->AddReference();
        break;
    case e_Source:
        (m_object = new(pool) ncbi::objects::CSource_constraint())->AddReference();
        break;
    case e_Cdsgeneprot_qual:
        (m_object = new(pool) ncbi::objects::CCDSGeneProt_qual_constraint())->AddReference();
        break;
    case e_Cdsgeneprot_pseudo:
        (m_object = new(pool) ncbi::objects::CCDSGeneProt_pseudo_constraint())->AddReference();
        break;
    case e_Sequence:
        (m_object = new(pool) ncbi::objects::CSequence_constraint())->AddReference();
        break;
    case e_Pub:
        (m_object = new(pool) ncbi::objects::CPublication_constraint())->AddReference();
        break;
    case e_Molinfo:
        (m_object = new(pool) ncbi::objects::CMolinfo_field_constraint())->AddReference();
        break;
    case e_Field_missing:
        (m_object = new(pool) ncbi::objects::CField_type())->AddReference();
        break;
    case e_Translation:
        (m_object = new(pool) ncbi::objects::CTranslation_constraint())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CConstraint_choice_Base::sm_SelectionNames[] = {
    "not set",
    "string",
    "location",
    "field",
    "source",
    "cdsgeneprot-qual",
    "cdsgeneprot-pseudo",
    "sequence",
    "pub",
    "molinfo",
    "field-missing",
    "translation"
};

NCBI_NS_STD::string CConstraint_choice_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CConstraint_choice_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CConstraint_choice_Base::TString& CConstraint_choice_Base::GetString(void) const
{
    CheckSelected(e_String);
    return *static_cast<const TString*>(m_object);
}

CConstraint_choice_Base::TString& CConstraint_choice_Base::SetString(void)
{
    Select(e_String, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TString*>(m_object);
}

void CConstraint_choice_Base::SetString(CConstraint_choice_Base::TString& value)
{
    TString* ptr = &value;
    if ( m_choice != e_String || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_String;
    }
}

const CConstraint_choice_Base::TLocation& CConstraint_choice_Base::GetLocation(void) const
{
    CheckSelected(e_Location);
    return *static_cast<const TLocation*>(m_object);
}

CConstraint_choice_Base::TLocation& CConstraint_choice_Base::SetLocation(void)
{
    Select(e_Location, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TLocation*>(m_object);
}

void CConstraint_choice_Base::SetLocation(CConstraint_choice_Base::TLocation& value)
{
    TLocation* ptr = &value;
    if ( m_choice != e_Location || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Location;
    }
}

const CConstraint_choice_Base::TField& CConstraint_choice_Base::GetField(void) const
{
    CheckSelected(e_Field);
    return *static_cast<const TField*>(m_object);
}

CConstraint_choice_Base::TField& CConstraint_choice_Base::SetField(void)
{
    Select(e_Field, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TField*>(m_object);
}

void CConstraint_choice_Base::SetField(CConstraint_choice_Base::TField& value)
{
    TField* ptr = &value;
    if ( m_choice != e_Field || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Field;
    }
}

const CConstraint_choice_Base::TSource& CConstraint_choice_Base::GetSource(void) const
{
    CheckSelected(e_Source);
    return *static_cast<const TSource*>(m_object);
}

CConstraint_choice_Base::TSource& CConstraint_choice_Base::SetSource(void)
{
    Select(e_Source, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSource*>(m_object);
}

void CConstraint_choice_Base::SetSource(CConstraint_choice_Base::TSource& value)
{
    TSource* ptr = &value;
    if ( m_choice != e_Source || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Source;
    }
}

const CConstraint_choice_Base::TCdsgeneprot_qual& CConstraint_choice_Base::GetCdsgeneprot_qual(void) const
{
    CheckSelected(e_Cdsgeneprot_qual);
    return *static_cast<const TCdsgeneprot_qual*>(m_object);
}

CConstraint_choice_Base::TCdsgeneprot_qual& CConstraint_choice_Base::SetCdsgeneprot_qual(void)
{
    Select(e_Cdsgeneprot_qual, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCdsgeneprot_qual*>(m_object);
}

void CConstraint_choice_Base::SetCdsgeneprot_qual(CConstraint_choice_Base::TCdsgeneprot_qual& value)
{
    TCdsgeneprot_qual* ptr = &value;
    if ( m_choice != e_Cdsgeneprot_qual || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Cdsgeneprot_qual;
    }
}

const CConstraint_choice_Base::TCdsgeneprot_pseudo& CConstraint_choice_Base::GetCdsgeneprot_pseudo(void) const
{
    CheckSelected(e_Cdsgeneprot_pseudo);
    return *static_cast<const TCdsgeneprot_pseudo*>(m_object);
}

CConstraint_choice_Base::TCdsgeneprot_pseudo& CConstraint_choice_Base::SetCdsgeneprot_pseudo(void)
{
    Select(e_Cdsgeneprot_pseudo, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TCdsgeneprot_pseudo*>(m_object);
}

void CConstraint_choice_Base::SetCdsgeneprot_pseudo(CConstraint_choice_Base::TCdsgeneprot_pseudo& value)
{
    TCdsgeneprot_pseudo* ptr = &value;
    if ( m_choice != e_Cdsgeneprot_pseudo || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Cdsgeneprot_pseudo;
    }
}

const CConstraint_choice_Base::TSequence& CConstraint_choice_Base::GetSequence(void) const
{
    CheckSelected(e_Sequence);
    return *static_cast<const TSequence*>(m_object);
}

CConstraint_choice_Base::TSequence& CConstraint_choice_Base::SetSequence(void)
{
    Select(e_Sequence, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSequence*>(m_object);
}

void CConstraint_choice_Base::SetSequence(CConstraint_choice_Base::TSequence& value)
{
    TSequence* ptr = &value;
    if ( m_choice != e_Sequence || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Sequence;
    }
}

const CConstraint_choice_Base::TPub& CConstraint_choice_Base::GetPub(void) const
{
    CheckSelected(e_Pub);
    return *static_cast<const TPub*>(m_object);
}

CConstraint_choice_Base::TPub& CConstraint_choice_Base::SetPub(void)
{
    Select(e_Pub, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TPub*>(m_object);
}

void CConstraint_choice_Base::SetPub(CConstraint_choice_Base::TPub& value)
{
    TPub* ptr = &value;
    if ( m_choice != e_Pub || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Pub;
    }
}

const CConstraint_choice_Base::TMolinfo& CConstraint_choice_Base::GetMolinfo(void) const
{
    CheckSelected(e_Molinfo);
    return *static_cast<const TMolinfo*>(m_object);
}

CConstraint_choice_Base::TMolinfo& CConstraint_choice_Base::SetMolinfo(void)
{
    Select(e_Molinfo, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TMolinfo*>(m_object);
}

void CConstraint_choice_Base::SetMolinfo(CConstraint_choice_Base::TMolinfo& value)
{
    TMolinfo* ptr = &value;
    if ( m_choice != e_Molinfo || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Molinfo;
    }
}

const CConstraint_choice_Base::TField_missing& CConstraint_choice_Base::GetField_missing(void) const
{
    CheckSelected(e_Field_missing);
    return *static_cast<const TField_missing*>(m_object);
}

CConstraint_choice_Base::TField_missing& CConstraint_choice_Base::SetField_missing(void)
{
    Select(e_Field_missing, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TField_missing*>(m_object);
}

void CConstraint_choice_Base::SetField_missing(CConstraint_choice_Base::TField_missing& value)
{
    TField_missing* ptr = &value;
    if ( m_choice != e_Field_missing || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Field_missing;
    }
}

const CConstraint_choice_Base::TTranslation& CConstraint_choice_Base::GetTranslation(void) const
{
    CheckSelected(e_Translation);
    return *static_cast<const TTranslation*>(m_object);
}

CConstraint_choice_Base::TTranslation& CConstraint_choice_Base::SetTranslation(void)
{
    Select(e_Translation, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TTranslation*>(m_object);
}

void CConstraint_choice_Base::SetTranslation(CConstraint_choice_Base::TTranslation& value)
{
    TTranslation* ptr = &value;
    if ( m_choice != e_Translation || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Translation;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("Constraint-choice", CConstraint_choice)
{
    SET_CHOICE_MODULE("NCBI-Macro");
    ADD_NAMED_REF_CHOICE_VARIANT("string", m_object, CString_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("location", m_object, CLocation_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("field", m_object, CField_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("source", m_object, CSource_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("cdsgeneprot-qual", m_object, CCDSGeneProt_qual_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("cdsgeneprot-pseudo", m_object, CCDSGeneProt_pseudo_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("sequence", m_object, CSequence_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("pub", m_object, CPublication_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("molinfo", m_object, CMolinfo_field_constraint);
    ADD_NAMED_REF_CHOICE_VARIANT("field-missing", m_object, CField_type);
    ADD_NAMED_REF_CHOICE_VARIANT("translation", m_object, CTranslation_constraint);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CConstraint_choice_Base::CConstraint_choice_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CConstraint_choice_Base::~CConstraint_choice_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

