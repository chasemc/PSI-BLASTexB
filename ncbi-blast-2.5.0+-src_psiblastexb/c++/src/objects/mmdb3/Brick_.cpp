/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'mmdb3.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/mmdb3/Brick.hpp>
#include <objects/mmdb3/Model_space_point.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CBrick_Base::ResetCorner_000(void)
{
    if ( !m_Corner_000 ) {
        m_Corner_000.Reset(new TCorner_000());
        return;
    }
    (*m_Corner_000).Reset();
}

void CBrick_Base::SetCorner_000(CBrick_Base::TCorner_000& value)
{
    m_Corner_000.Reset(&value);
}

void CBrick_Base::ResetCorner_001(void)
{
    if ( !m_Corner_001 ) {
        m_Corner_001.Reset(new TCorner_001());
        return;
    }
    (*m_Corner_001).Reset();
}

void CBrick_Base::SetCorner_001(CBrick_Base::TCorner_001& value)
{
    m_Corner_001.Reset(&value);
}

void CBrick_Base::ResetCorner_010(void)
{
    if ( !m_Corner_010 ) {
        m_Corner_010.Reset(new TCorner_010());
        return;
    }
    (*m_Corner_010).Reset();
}

void CBrick_Base::SetCorner_010(CBrick_Base::TCorner_010& value)
{
    m_Corner_010.Reset(&value);
}

void CBrick_Base::ResetCorner_011(void)
{
    if ( !m_Corner_011 ) {
        m_Corner_011.Reset(new TCorner_011());
        return;
    }
    (*m_Corner_011).Reset();
}

void CBrick_Base::SetCorner_011(CBrick_Base::TCorner_011& value)
{
    m_Corner_011.Reset(&value);
}

void CBrick_Base::ResetCorner_100(void)
{
    if ( !m_Corner_100 ) {
        m_Corner_100.Reset(new TCorner_100());
        return;
    }
    (*m_Corner_100).Reset();
}

void CBrick_Base::SetCorner_100(CBrick_Base::TCorner_100& value)
{
    m_Corner_100.Reset(&value);
}

void CBrick_Base::ResetCorner_101(void)
{
    if ( !m_Corner_101 ) {
        m_Corner_101.Reset(new TCorner_101());
        return;
    }
    (*m_Corner_101).Reset();
}

void CBrick_Base::SetCorner_101(CBrick_Base::TCorner_101& value)
{
    m_Corner_101.Reset(&value);
}

void CBrick_Base::ResetCorner_110(void)
{
    if ( !m_Corner_110 ) {
        m_Corner_110.Reset(new TCorner_110());
        return;
    }
    (*m_Corner_110).Reset();
}

void CBrick_Base::SetCorner_110(CBrick_Base::TCorner_110& value)
{
    m_Corner_110.Reset(&value);
}

void CBrick_Base::ResetCorner_111(void)
{
    if ( !m_Corner_111 ) {
        m_Corner_111.Reset(new TCorner_111());
        return;
    }
    (*m_Corner_111).Reset();
}

void CBrick_Base::SetCorner_111(CBrick_Base::TCorner_111& value)
{
    m_Corner_111.Reset(&value);
}

void CBrick_Base::Reset(void)
{
    ResetCorner_000();
    ResetCorner_001();
    ResetCorner_010();
    ResetCorner_011();
    ResetCorner_100();
    ResetCorner_101();
    ResetCorner_110();
    ResetCorner_111();
}

BEGIN_NAMED_BASE_CLASS_INFO("Brick", CBrick)
{
    SET_CLASS_MODULE("MMDB-Features");
    ADD_NAMED_REF_MEMBER("corner-000", m_Corner_000, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-001", m_Corner_001, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-010", m_Corner_010, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-011", m_Corner_011, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-100", m_Corner_100, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-101", m_Corner_101, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-110", m_Corner_110, CModel_space_point);
    ADD_NAMED_REF_MEMBER("corner-111", m_Corner_111, CModel_space_point);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CBrick_Base::CBrick_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetCorner_000();
        ResetCorner_001();
        ResetCorner_010();
        ResetCorner_011();
        ResetCorner_100();
        ResetCorner_101();
        ResetCorner_110();
        ResetCorner_111();
    }
}

// destructor
CBrick_Base::~CBrick_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

