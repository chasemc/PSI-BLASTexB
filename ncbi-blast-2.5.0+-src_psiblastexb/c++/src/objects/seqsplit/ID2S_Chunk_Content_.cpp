/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqsplit.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqsplit/ID2S_Chunk_Content.hpp>
#include <objects/seqsplit/ID2S_Bioseq_place_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_annot_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_annot_place_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_assembly_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_data_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_descr_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_feat_Ids_Info.hpp>
#include <objects/seqsplit/ID2S_Seq_map_Info.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CID2S_Chunk_Content_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CID2S_Chunk_Content_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Bioseq_place:
        m_Bioseq_place.Destruct();
        break;
    case e_Feat_ids:
        m_Feat_ids.Destruct();
        break;
    case e_Seq_descr:
    case e_Seq_annot:
    case e_Seq_assembly:
    case e_Seq_map:
    case e_Seq_data:
    case e_Seq_annot_place:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CID2S_Chunk_Content_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Seq_descr:
        (m_object = new(pool) ncbi::objects::CID2S_Seq_descr_Info())->AddReference();
        break;
    case e_Seq_annot:
        (m_object = new(pool) ncbi::objects::CID2S_Seq_annot_Info())->AddReference();
        break;
    case e_Seq_assembly:
        (m_object = new(pool) ncbi::objects::CID2S_Seq_assembly_Info())->AddReference();
        break;
    case e_Seq_map:
        (m_object = new(pool) ncbi::objects::CID2S_Seq_map_Info())->AddReference();
        break;
    case e_Seq_data:
        (m_object = new(pool) ncbi::objects::CID2S_Seq_data_Info())->AddReference();
        break;
    case e_Seq_annot_place:
        (m_object = new(pool) ncbi::objects::CID2S_Seq_annot_place_Info())->AddReference();
        break;
    case e_Bioseq_place:
        m_Bioseq_place.Construct();
        break;
    case e_Feat_ids:
        m_Feat_ids.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CID2S_Chunk_Content_Base::sm_SelectionNames[] = {
    "not set",
    "seq-descr",
    "seq-annot",
    "seq-assembly",
    "seq-map",
    "seq-data",
    "seq-annot-place",
    "bioseq-place",
    "feat-ids"
};

NCBI_NS_STD::string CID2S_Chunk_Content_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CID2S_Chunk_Content_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CID2S_Chunk_Content_Base::TSeq_descr& CID2S_Chunk_Content_Base::GetSeq_descr(void) const
{
    CheckSelected(e_Seq_descr);
    return *static_cast<const TSeq_descr*>(m_object);
}

CID2S_Chunk_Content_Base::TSeq_descr& CID2S_Chunk_Content_Base::SetSeq_descr(void)
{
    Select(e_Seq_descr, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_descr*>(m_object);
}

void CID2S_Chunk_Content_Base::SetSeq_descr(CID2S_Chunk_Content_Base::TSeq_descr& value)
{
    TSeq_descr* ptr = &value;
    if ( m_choice != e_Seq_descr || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_descr;
    }
}

const CID2S_Chunk_Content_Base::TSeq_annot& CID2S_Chunk_Content_Base::GetSeq_annot(void) const
{
    CheckSelected(e_Seq_annot);
    return *static_cast<const TSeq_annot*>(m_object);
}

CID2S_Chunk_Content_Base::TSeq_annot& CID2S_Chunk_Content_Base::SetSeq_annot(void)
{
    Select(e_Seq_annot, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_annot*>(m_object);
}

void CID2S_Chunk_Content_Base::SetSeq_annot(CID2S_Chunk_Content_Base::TSeq_annot& value)
{
    TSeq_annot* ptr = &value;
    if ( m_choice != e_Seq_annot || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_annot;
    }
}

const CID2S_Chunk_Content_Base::TSeq_assembly& CID2S_Chunk_Content_Base::GetSeq_assembly(void) const
{
    CheckSelected(e_Seq_assembly);
    return *static_cast<const TSeq_assembly*>(m_object);
}

CID2S_Chunk_Content_Base::TSeq_assembly& CID2S_Chunk_Content_Base::SetSeq_assembly(void)
{
    Select(e_Seq_assembly, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_assembly*>(m_object);
}

void CID2S_Chunk_Content_Base::SetSeq_assembly(CID2S_Chunk_Content_Base::TSeq_assembly& value)
{
    TSeq_assembly* ptr = &value;
    if ( m_choice != e_Seq_assembly || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_assembly;
    }
}

const CID2S_Chunk_Content_Base::TSeq_map& CID2S_Chunk_Content_Base::GetSeq_map(void) const
{
    CheckSelected(e_Seq_map);
    return *static_cast<const TSeq_map*>(m_object);
}

CID2S_Chunk_Content_Base::TSeq_map& CID2S_Chunk_Content_Base::SetSeq_map(void)
{
    Select(e_Seq_map, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_map*>(m_object);
}

void CID2S_Chunk_Content_Base::SetSeq_map(CID2S_Chunk_Content_Base::TSeq_map& value)
{
    TSeq_map* ptr = &value;
    if ( m_choice != e_Seq_map || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_map;
    }
}

const CID2S_Chunk_Content_Base::TSeq_data& CID2S_Chunk_Content_Base::GetSeq_data(void) const
{
    CheckSelected(e_Seq_data);
    return *static_cast<const TSeq_data*>(m_object);
}

CID2S_Chunk_Content_Base::TSeq_data& CID2S_Chunk_Content_Base::SetSeq_data(void)
{
    Select(e_Seq_data, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_data*>(m_object);
}

void CID2S_Chunk_Content_Base::SetSeq_data(CID2S_Chunk_Content_Base::TSeq_data& value)
{
    TSeq_data* ptr = &value;
    if ( m_choice != e_Seq_data || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_data;
    }
}

const CID2S_Chunk_Content_Base::TSeq_annot_place& CID2S_Chunk_Content_Base::GetSeq_annot_place(void) const
{
    CheckSelected(e_Seq_annot_place);
    return *static_cast<const TSeq_annot_place*>(m_object);
}

CID2S_Chunk_Content_Base::TSeq_annot_place& CID2S_Chunk_Content_Base::SetSeq_annot_place(void)
{
    Select(e_Seq_annot_place, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_annot_place*>(m_object);
}

void CID2S_Chunk_Content_Base::SetSeq_annot_place(CID2S_Chunk_Content_Base::TSeq_annot_place& value)
{
    TSeq_annot_place* ptr = &value;
    if ( m_choice != e_Seq_annot_place || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_annot_place;
    }
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("ID2S-Chunk-Content", CID2S_Chunk_Content)
{
    SET_CHOICE_MODULE("NCBI-Seq-split");
    ADD_NAMED_REF_CHOICE_VARIANT("seq-descr", m_object, CID2S_Seq_descr_Info);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-annot", m_object, CID2S_Seq_annot_Info);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-assembly", m_object, CID2S_Seq_assembly_Info);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-map", m_object, CID2S_Seq_map_Info);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-data", m_object, CID2S_Seq_data_Info);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-annot-place", m_object, CID2S_Seq_annot_place_Info);
    ADD_NAMED_BUF_CHOICE_VARIANT("bioseq-place", m_Bioseq_place, STL_list_set, (STL_CRef, (CLASS, (CID2S_Bioseq_place_Info))));
    ADD_NAMED_BUF_CHOICE_VARIANT("feat-ids", m_Feat_ids, STL_list_set, (STL_CRef, (CLASS, (CID2S_Seq_feat_Ids_Info))));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CID2S_Chunk_Content_Base::CID2S_Chunk_Content_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CID2S_Chunk_Content_Base::~CID2S_Chunk_Content_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

