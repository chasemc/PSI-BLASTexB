/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/MapLoc.hpp>
#include <objects/docsum/FxnSet.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CMapLoc_Base::C_Attlist::, EAttlist_locType, false)
{
    SET_ENUM_INTERNAL_NAME("MapLoc.attlist", "locType");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("insertion", eAttlist_locType_insertion);
    ADD_ENUM_VALUE("exact", eAttlist_locType_exact);
    ADD_ENUM_VALUE("deletion", eAttlist_locType_deletion);
    ADD_ENUM_VALUE("range-ins", eAttlist_locType_range_ins);
    ADD_ENUM_VALUE("range-exact", eAttlist_locType_range_exact);
    ADD_ENUM_VALUE("range-del", eAttlist_locType_range_del);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CMapLoc_Base::C_Attlist::, EAttlist_orient, false)
{
    SET_ENUM_INTERNAL_NAME("MapLoc.attlist", "orient");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("forward", eAttlist_orient_forward);
    ADD_ENUM_VALUE("reverse", eAttlist_orient_reverse);
}
END_ENUM_INFO

void CMapLoc_Base::C_Attlist::ResetRefAllele(void)
{
    m_RefAllele.erase();
    m_set_State[0] &= ~0xc000000;
}

void CMapLoc_Base::C_Attlist::Reset(void)
{
    ResetAsnFrom();
    ResetAsnTo();
    ResetLocType();
    ResetAlnQuality();
    ResetOrient();
    ResetPhysMapInt();
    ResetLeftFlankNeighborPos();
    ResetRightFlankNeighborPos();
    ResetLeftContigNeighborPos();
    ResetRightContigNeighborPos();
    ResetNumberOfMismatches();
    ResetNumberOfDeletions();
    ResetNumberOfInsertions();
    ResetRefAllele();
}

BEGIN_NAMED_CLASS_INFO("", CMapLoc_Base::C_Attlist)
{
    SET_INTERNAL_NAME("MapLoc", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("asnFrom", m_AsnFrom)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("asnTo", m_AsnTo)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_ENUM_MEMBER("locType", m_LocType, EAttlist_locType)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("alnQuality", m_AlnQuality)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("orient", m_Orient, EAttlist_orient)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("physMapInt", m_PhysMapInt)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("leftFlankNeighborPos", m_LeftFlankNeighborPos)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("rightFlankNeighborPos", m_RightFlankNeighborPos)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("leftContigNeighborPos", m_LeftContigNeighborPos)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("rightContigNeighborPos", m_RightContigNeighborPos)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numberOfMismatches", m_NumberOfMismatches)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numberOfDeletions", m_NumberOfDeletions)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("numberOfInsertions", m_NumberOfInsertions)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("refAllele", m_RefAllele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CMapLoc_Base::C_Attlist::C_Attlist(void)
    : m_AsnFrom(0), m_AsnTo(0), m_LocType((EAttlist_locType)(0)), m_AlnQuality(0), m_Orient((EAttlist_orient)(0)), m_PhysMapInt(0), m_LeftFlankNeighborPos(0), m_RightFlankNeighborPos(0), m_LeftContigNeighborPos(0), m_RightContigNeighborPos(0), m_NumberOfMismatches(0), m_NumberOfDeletions(0), m_NumberOfInsertions(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CMapLoc_Base::C_Attlist::~C_Attlist(void)
{
}


void CMapLoc_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CMapLoc_Base::SetAttlist(CMapLoc_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CMapLoc_Base::ResetFxnSet(void)
{
    m_FxnSet.clear();
    m_set_State[0] &= ~0xc;
}

void CMapLoc_Base::Reset(void)
{
    ResetAttlist();
    ResetFxnSet();
}

BEGIN_NAMED_BASE_CLASS_INFO("MapLoc", CMapLoc)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_MEMBER("fxnSet", m_FxnSet, STL_list, (STL_CRef, (CLASS, (CFxnSet))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CMapLoc_Base::CMapLoc_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CMapLoc_Base::~CMapLoc_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

