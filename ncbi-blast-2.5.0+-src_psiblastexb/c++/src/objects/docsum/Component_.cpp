/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/Component.hpp>
#include <objects/docsum/MapLoc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CComponent_Base::C_Attlist::, EAttlist_componentType, false)
{
    SET_ENUM_INTERNAL_NAME("Component.attlist", "componentType");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("contig", eAttlist_componentType_contig);
    ADD_ENUM_VALUE("mrna", eAttlist_componentType_mrna);
}
END_ENUM_INFO

BEGIN_NAMED_ENUM_IN_INFO("", CComponent_Base::C_Attlist::, EAttlist_orientation, false)
{
    SET_ENUM_INTERNAL_NAME("Component.attlist", "orientation");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("fwd", eAttlist_orientation_fwd);
    ADD_ENUM_VALUE("rev", eAttlist_orientation_rev);
    ADD_ENUM_VALUE("unknown", eAttlist_orientation_unknown);
}
END_ENUM_INFO

void CComponent_Base::C_Attlist::ResetAccession(void)
{
    m_Accession.erase();
    m_set_State[0] &= ~0x30;
}

void CComponent_Base::C_Attlist::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0xc0;
}

void CComponent_Base::C_Attlist::ResetChromosome(void)
{
    m_Chromosome.erase();
    m_set_State[0] &= ~0x300;
}

void CComponent_Base::C_Attlist::ResetGi(void)
{
    m_Gi.erase();
    m_set_State[0] &= ~0x30000;
}

void CComponent_Base::C_Attlist::ResetGroupTerm(void)
{
    m_GroupTerm.erase();
    m_set_State[0] &= ~0xc0000;
}

void CComponent_Base::C_Attlist::ResetContigLabel(void)
{
    m_ContigLabel.erase();
    m_set_State[0] &= ~0x300000;
}

void CComponent_Base::C_Attlist::Reset(void)
{
    ResetComponentType();
    ResetCtgId();
    ResetAccession();
    ResetName();
    ResetChromosome();
    ResetStart();
    ResetEnd();
    ResetOrientation();
    ResetGi();
    ResetGroupTerm();
    ResetContigLabel();
}

BEGIN_NAMED_CLASS_INFO("", CComponent_Base::C_Attlist)
{
    SET_INTERNAL_NAME("Component", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_ENUM_MEMBER("componentType", m_ComponentType, EAttlist_componentType)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("ctgId", m_CtgId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("accession", m_Accession)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("chromosome", m_Chromosome)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("start", m_Start)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("end", m_End)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("orientation", m_Orientation, EAttlist_orientation)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("gi", m_Gi)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("groupTerm", m_GroupTerm)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("contigLabel", m_ContigLabel)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CComponent_Base::C_Attlist::C_Attlist(void)
    : m_ComponentType((EAttlist_componentType)(0)), m_CtgId(0), m_Start(0), m_End(0), m_Orientation((EAttlist_orientation)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CComponent_Base::C_Attlist::~C_Attlist(void)
{
}


void CComponent_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CComponent_Base::SetAttlist(CComponent_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CComponent_Base::ResetMapLoc(void)
{
    m_MapLoc.clear();
    m_set_State[0] &= ~0xc;
}

void CComponent_Base::Reset(void)
{
    ResetAttlist();
    ResetMapLoc();
}

BEGIN_NAMED_BASE_CLASS_INFO("Component", CComponent)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_MEMBER("mapLoc", m_MapLoc, STL_list, (STL_CRef, (CLASS, (CMapLoc))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CComponent_Base::CComponent_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CComponent_Base::~CComponent_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

