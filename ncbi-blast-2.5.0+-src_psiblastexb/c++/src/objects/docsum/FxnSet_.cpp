/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'docsum.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/docsum/FxnSet.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CFxnSet_Base::C_Attlist::, EAttlist_fxnClass, false)
{
    SET_ENUM_INTERNAL_NAME("FxnSet.attlist", "fxnClass");
    SET_ENUM_MODULE("Docsum-3-4");
    ADD_ENUM_VALUE("locus-region", eAttlist_fxnClass_locus_region);
    ADD_ENUM_VALUE("coding-unknown", eAttlist_fxnClass_coding_unknown);
    ADD_ENUM_VALUE("synonymous-codon", eAttlist_fxnClass_synonymous_codon);
    ADD_ENUM_VALUE("non-synonymous-codon", eAttlist_fxnClass_non_synonymous_codon);
    ADD_ENUM_VALUE("mrna-utr", eAttlist_fxnClass_mrna_utr);
    ADD_ENUM_VALUE("intron-variant", eAttlist_fxnClass_intron_variant);
    ADD_ENUM_VALUE("splice-region-variant", eAttlist_fxnClass_splice_region_variant);
    ADD_ENUM_VALUE("reference", eAttlist_fxnClass_reference);
    ADD_ENUM_VALUE("coding-exception", eAttlist_fxnClass_coding_exception);
    ADD_ENUM_VALUE("coding-sequence-variant", eAttlist_fxnClass_coding_sequence_variant);
    ADD_ENUM_VALUE("nc-transcript-variant", eAttlist_fxnClass_nc_transcript_variant);
    ADD_ENUM_VALUE("downstream-variant-500B", eAttlist_fxnClass_downstream_variant_500B);
    ADD_ENUM_VALUE("upstream-variant-2KB", eAttlist_fxnClass_upstream_variant_2KB);
    ADD_ENUM_VALUE("nonsense", eAttlist_fxnClass_nonsense);
    ADD_ENUM_VALUE("missense", eAttlist_fxnClass_missense);
    ADD_ENUM_VALUE("frameshift-variant", eAttlist_fxnClass_frameshift_variant);
    ADD_ENUM_VALUE("utr-variant-3-prime", eAttlist_fxnClass_utr_variant_3_prime);
    ADD_ENUM_VALUE("utr-variant-5-prime", eAttlist_fxnClass_utr_variant_5_prime);
    ADD_ENUM_VALUE("splice-acceptor-variant", eAttlist_fxnClass_splice_acceptor_variant);
    ADD_ENUM_VALUE("splice-donor-variant", eAttlist_fxnClass_splice_donor_variant);
    ADD_ENUM_VALUE("cds-indel", eAttlist_fxnClass_cds_indel);
    ADD_ENUM_VALUE("stop-gained", eAttlist_fxnClass_stop_gained);
    ADD_ENUM_VALUE("stop-lost", eAttlist_fxnClass_stop_lost);
    ADD_ENUM_VALUE("complex-change-in-transcript", eAttlist_fxnClass_complex_change_in_transcript);
    ADD_ENUM_VALUE("incomplete-terminal-codon-variant", eAttlist_fxnClass_incomplete_terminal_codon_variant);
    ADD_ENUM_VALUE("nmd-transcript-variant", eAttlist_fxnClass_nmd_transcript_variant);
    ADD_ENUM_VALUE("mature-miRNA-variant", eAttlist_fxnClass_mature_miRNA_variant);
    ADD_ENUM_VALUE("upstream-variant-5KB", eAttlist_fxnClass_upstream_variant_5KB);
    ADD_ENUM_VALUE("downstream-variant-5KB", eAttlist_fxnClass_downstream_variant_5KB);
    ADD_ENUM_VALUE("intergenic", eAttlist_fxnClass_intergenic);
}
END_ENUM_INFO

void CFxnSet_Base::C_Attlist::ResetSymbol(void)
{
    m_Symbol.erase();
    m_set_State[0] &= ~0xc;
}

void CFxnSet_Base::C_Attlist::ResetMrnaAcc(void)
{
    m_MrnaAcc.erase();
    m_set_State[0] &= ~0x30;
}

void CFxnSet_Base::C_Attlist::ResetProtAcc(void)
{
    m_ProtAcc.erase();
    m_set_State[0] &= ~0x300;
}

void CFxnSet_Base::C_Attlist::ResetAllele(void)
{
    m_Allele.erase();
    m_set_State[0] &= ~0x30000;
}

void CFxnSet_Base::C_Attlist::ResetResidue(void)
{
    m_Residue.erase();
    m_set_State[0] &= ~0xc0000;
}

void CFxnSet_Base::C_Attlist::ResetSoTerm(void)
{
    m_SoTerm.erase();
    m_set_State[0] &= ~0x3000000;
}

void CFxnSet_Base::C_Attlist::Reset(void)
{
    ResetGeneId();
    ResetSymbol();
    ResetMrnaAcc();
    ResetMrnaVer();
    ResetProtAcc();
    ResetProtVer();
    ResetFxnClass();
    ResetReadingFrame();
    ResetAllele();
    ResetResidue();
    ResetAaPosition();
    ResetMrnaPosition();
    ResetSoTerm();
}

BEGIN_NAMED_CLASS_INFO("", CFxnSet_Base::C_Attlist)
{
    SET_INTERNAL_NAME("FxnSet", "attlist");
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_STD_MEMBER("geneId", m_GeneId)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("symbol", m_Symbol)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("mrnaAcc", m_MrnaAcc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("mrnaVer", m_MrnaVer)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("protAcc", m_ProtAcc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("protVer", m_ProtVer)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("fxnClass", m_FxnClass, EAttlist_fxnClass)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("readingFrame", m_ReadingFrame)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("allele", m_Allele)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("residue", m_Residue)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("aaPosition", m_AaPosition)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("mrnaPosition", m_MrnaPosition)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("soTerm", m_SoTerm)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->SetRandomOrder(true);
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CFxnSet_Base::C_Attlist::C_Attlist(void)
    : m_GeneId(0), m_MrnaVer(0), m_ProtVer(0), m_FxnClass((EAttlist_fxnClass)(0)), m_ReadingFrame(0), m_AaPosition(0), m_MrnaPosition(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CFxnSet_Base::C_Attlist::~C_Attlist(void)
{
}


void CFxnSet_Base::ResetAttlist(void)
{
    if ( !m_Attlist ) {
        m_Attlist.Reset(new TAttlist());
        return;
    }
    (*m_Attlist).Reset();
}

void CFxnSet_Base::SetAttlist(CFxnSet_Base::TAttlist& value)
{
    m_Attlist.Reset(&value);
}

void CFxnSet_Base::Reset(void)
{
    ResetAttlist();
    ResetFxnSet();
}

BEGIN_NAMED_BASE_CLASS_INFO("FxnSet", CFxnSet)
{
    SET_CLASS_MODULE("Docsum-3-4");
    ADD_NAMED_REF_MEMBER("attlist", m_Attlist, C_Attlist);
    ADD_NAMED_NULL_MEMBER("fxnSet", null, ())->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CFxnSet_Base::CFxnSet_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetAttlist();
    }
}

// destructor
CFxnSet_Base::~CFxnSet_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

