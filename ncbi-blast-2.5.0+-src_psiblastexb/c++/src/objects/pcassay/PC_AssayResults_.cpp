/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pcassay.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/pcassay/PC_AssayResults.hpp>
#include <objects/general/Date.hpp>
#include <objects/pcassay/PC_AnnotatedXRef.hpp>
#include <objects/pcassay/PC_AssayData.hpp>
#include <objects/pcsubstance/PC_Source.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CPC_AssayResults_Base::, EOutcome, true)
{
    SET_ENUM_INTERNAL_NAME("PC-AssayResults", "outcome");
    SET_ENUM_MODULE("NCBI-PCAssay");
    ADD_ENUM_VALUE("inactive", eOutcome_inactive);
    ADD_ENUM_VALUE("active", eOutcome_active);
    ADD_ENUM_VALUE("inconclusive", eOutcome_inconclusive);
    ADD_ENUM_VALUE("unspecified", eOutcome_unspecified);
    ADD_ENUM_VALUE("probe", eOutcome_probe);
}
END_ENUM_INFO

void CPC_AssayResults_Base::ResetSid_source(void)
{
    m_Sid_source.Reset();
}

void CPC_AssayResults_Base::SetSid_source(CPC_AssayResults_Base::TSid_source& value)
{
    m_Sid_source.Reset(&value);
}

CPC_AssayResults_Base::TSid_source& CPC_AssayResults_Base::SetSid_source(void)
{
    if ( !m_Sid_source )
        m_Sid_source.Reset(new ncbi::objects::CPC_Source());
    return (*m_Sid_source);
}

void CPC_AssayResults_Base::ResetComment(void)
{
    m_Comment.erase();
    m_set_State[0] &= ~0xc0;
}

void CPC_AssayResults_Base::ResetData(void)
{
    m_Data.clear();
    m_set_State[0] &= ~0x3000;
}

void CPC_AssayResults_Base::ResetUrl(void)
{
    m_Url.erase();
    m_set_State[0] &= ~0xc000;
}

void CPC_AssayResults_Base::ResetXref(void)
{
    m_Xref.clear();
    m_set_State[0] &= ~0x30000;
}

void CPC_AssayResults_Base::ResetDate(void)
{
    m_Date.Reset();
}

void CPC_AssayResults_Base::SetDate(CPC_AssayResults_Base::TDate& value)
{
    m_Date.Reset(&value);
}

CPC_AssayResults_Base::TDate& CPC_AssayResults_Base::SetDate(void)
{
    if ( !m_Date )
        m_Date.Reset(new ncbi::objects::CDate());
    return (*m_Date);
}

void CPC_AssayResults_Base::Reset(void)
{
    ResetSid();
    ResetSid_source();
    ResetVersion();
    ResetComment();
    ResetOutcome();
    ResetRank();
    ResetData();
    ResetUrl();
    ResetXref();
    ResetDate();
}

BEGIN_NAMED_BASE_CLASS_INFO("PC-AssayResults", CPC_AssayResults)
{
    SET_CLASS_MODULE("NCBI-PCAssay");
    ADD_NAMED_STD_MEMBER("sid", m_Sid)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_REF_MEMBER("sid-source", m_Sid_source, CPC_Source)->SetOptional();
    ADD_NAMED_STD_MEMBER("version", m_Version)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("comment", m_Comment)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("outcome", m_Outcome, EOutcome)->SetDefault(new TOutcome(eOutcome_unspecified))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("rank", m_Rank)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("data", m_Data, STL_vector, (STL_CRef, (CLASS, (CPC_AssayData))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("url", m_Url)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("xref", m_Xref, STL_list, (STL_CRef, (CLASS, (CPC_AnnotatedXRef))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("date", m_Date, CDate)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPC_AssayResults_Base::CPC_AssayResults_Base(void)
    : m_Sid(0), m_Version(0), m_Outcome(eOutcome_unspecified), m_Rank(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CPC_AssayResults_Base::~CPC_AssayResults_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

