/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'pcassay.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/pcassay/PC_AssayPanelMember.hpp>
#include <objects/pcassay/PC_AnnotatedXRef.hpp>
#include <objects/pcassay/PC_AssayDRAttr.hpp>
#include <objects/pcassay/PC_AssayTargetInfo.hpp>
#include <objects/pcassay/PC_CategorizedComment.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CPC_AssayPanelMember_Base::, EActivity_outcome_method, true)
{
    SET_ENUM_INTERNAL_NAME("PC-AssayPanelMember", "activity-outcome-method");
    SET_ENUM_MODULE("NCBI-PCAssay");
    ADD_ENUM_VALUE("other", eActivity_outcome_method_other);
    ADD_ENUM_VALUE("screening", eActivity_outcome_method_screening);
    ADD_ENUM_VALUE("confirmatory", eActivity_outcome_method_confirmatory);
    ADD_ENUM_VALUE("summary", eActivity_outcome_method_summary);
}
END_ENUM_INFO

void CPC_AssayPanelMember_Base::ResetName(void)
{
    m_Name.erase();
    m_set_State[0] &= ~0xc;
}

void CPC_AssayPanelMember_Base::ResetDescription(void)
{
    m_Description.erase();
    m_set_State[0] &= ~0x30;
}

void CPC_AssayPanelMember_Base::ResetProtocol(void)
{
    m_Protocol.clear();
    m_set_State[0] &= ~0xc0;
}

void CPC_AssayPanelMember_Base::ResetComment(void)
{
    m_Comment.clear();
    m_set_State[0] &= ~0x300;
}

void CPC_AssayPanelMember_Base::ResetTarget(void)
{
    m_Target.clear();
    m_set_State[0] &= ~0xc00;
}

void CPC_AssayPanelMember_Base::ResetXref(void)
{
    m_Xref.clear();
    m_set_State[0] &= ~0x3000;
}

void CPC_AssayPanelMember_Base::ResetDr(void)
{
    m_Dr.clear();
    m_set_State[0] &= ~0x30000;
}

void CPC_AssayPanelMember_Base::ResetCategorized_comment(void)
{
    m_Categorized_comment.clear();
    m_set_State[0] &= ~0xc0000;
}

void CPC_AssayPanelMember_Base::Reset(void)
{
    ResetMid();
    ResetName();
    ResetDescription();
    ResetProtocol();
    ResetComment();
    ResetTarget();
    ResetXref();
    ResetActivity_outcome_method();
    ResetDr();
    ResetCategorized_comment();
}

BEGIN_NAMED_BASE_CLASS_INFO("PC-AssayPanelMember", CPC_AssayPanelMember)
{
    SET_CLASS_MODULE("NCBI-PCAssay");
    ADD_NAMED_STD_MEMBER("mid", m_Mid)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("name", m_Name)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("description", m_Description)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("protocol", m_Protocol, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("comment", m_Comment, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("target", m_Target, STL_list, (STL_CRef, (CLASS, (CPC_AssayTargetInfo))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("xref", m_Xref, STL_list, (STL_CRef, (CLASS, (CPC_AnnotatedXRef))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("activity-outcome-method", m_Activity_outcome_method, EActivity_outcome_method)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("dr", m_Dr, STL_list, (STL_CRef, (CLASS, (CPC_AssayDRAttr))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("categorized-comment", m_Categorized_comment, STL_list, (STL_CRef, (CLASS, (CPC_CategorizedComment))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPC_AssayPanelMember_Base::CPC_AssayPanelMember_Base(void)
    : m_Mid(0), m_Activity_outcome_method((EActivity_outcome_method)(0))
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CPC_AssayPanelMember_Base::~CPC_AssayPanelMember_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

