/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqalign.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqalign/Sparse_align.hpp>
#include <objects/seqalign/Score.hpp>
#include <objects/seqloc/Seq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSparse_align_Base::ResetFirst_id(void)
{
    if ( !m_First_id ) {
        m_First_id.Reset(new TFirst_id());
        return;
    }
    (*m_First_id).Reset();
}

void CSparse_align_Base::SetFirst_id(CSparse_align_Base::TFirst_id& value)
{
    m_First_id.Reset(&value);
}

void CSparse_align_Base::ResetSecond_id(void)
{
    if ( !m_Second_id ) {
        m_Second_id.Reset(new TSecond_id());
        return;
    }
    (*m_Second_id).Reset();
}

void CSparse_align_Base::SetSecond_id(CSparse_align_Base::TSecond_id& value)
{
    m_Second_id.Reset(&value);
}

void CSparse_align_Base::ResetFirst_starts(void)
{
    m_First_starts.clear();
    m_set_State[0] &= ~0xc0;
}

void CSparse_align_Base::ResetSecond_starts(void)
{
    m_Second_starts.clear();
    m_set_State[0] &= ~0x300;
}

void CSparse_align_Base::ResetLens(void)
{
    m_Lens.clear();
    m_set_State[0] &= ~0xc00;
}

void CSparse_align_Base::ResetSecond_strands(void)
{
    m_Second_strands.clear();
    m_set_State[0] &= ~0x3000;
}

void CSparse_align_Base::ResetSeg_scores(void)
{
    m_Seg_scores.clear();
    m_set_State[0] &= ~0xc000;
}

void CSparse_align_Base::Reset(void)
{
    ResetFirst_id();
    ResetSecond_id();
    ResetNumseg();
    ResetFirst_starts();
    ResetSecond_starts();
    ResetLens();
    ResetSecond_strands();
    ResetSeg_scores();
}

BEGIN_NAMED_BASE_CLASS_INFO("Sparse-align", CSparse_align)
{
    SET_CLASS_MODULE("NCBI-Seqalign");
    ADD_NAMED_REF_MEMBER("first-id", m_First_id, CSeq_id);
    ADD_NAMED_REF_MEMBER("second-id", m_Second_id, CSeq_id);
    ADD_NAMED_STD_MEMBER("numseg", m_Numseg)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("first-starts", m_First_starts, STL_vector, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("second-starts", m_Second_starts, STL_vector, (STD, (int)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("lens", m_Lens, STL_vector, (STD, (TSeqPos)))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("second-strands", m_Second_strands, STL_vector, (ENUM, (ENa_strand, ENa_strand)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("seg-scores", m_Seg_scores, STL_vector_set, (STL_CRef, (CLASS, (CScore))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSparse_align_Base::CSparse_align_Base(void)
    : m_Numseg(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetFirst_id();
        ResetSecond_id();
    }
}

// destructor
CSparse_align_Base::~CSparse_align_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

