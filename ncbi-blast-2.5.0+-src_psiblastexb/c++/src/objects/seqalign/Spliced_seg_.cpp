/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqalign.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqalign/Spliced_seg.hpp>
#include <objects/seqalign/Spliced_exon.hpp>
#include <objects/seqalign/Spliced_seg_modifier.hpp>
#include <objects/seqloc/Seq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSpliced_seg_Base::, EProduct_type, false)
{
    SET_ENUM_INTERNAL_NAME("Spliced-seg", "product-type");
    SET_ENUM_MODULE("NCBI-Seqalign");
    ADD_ENUM_VALUE("transcript", eProduct_type_transcript);
    ADD_ENUM_VALUE("protein", eProduct_type_protein);
}
END_ENUM_INFO

void CSpliced_seg_Base::ResetProduct_id(void)
{
    m_Product_id.Reset();
}

void CSpliced_seg_Base::SetProduct_id(CSpliced_seg_Base::TProduct_id& value)
{
    m_Product_id.Reset(&value);
}

CSpliced_seg_Base::TProduct_id& CSpliced_seg_Base::SetProduct_id(void)
{
    if ( !m_Product_id )
        m_Product_id.Reset(new ncbi::objects::CSeq_id());
    return (*m_Product_id);
}

void CSpliced_seg_Base::ResetGenomic_id(void)
{
    m_Genomic_id.Reset();
}

void CSpliced_seg_Base::SetGenomic_id(CSpliced_seg_Base::TGenomic_id& value)
{
    m_Genomic_id.Reset(&value);
}

CSpliced_seg_Base::TGenomic_id& CSpliced_seg_Base::SetGenomic_id(void)
{
    if ( !m_Genomic_id )
        m_Genomic_id.Reset(new ncbi::objects::CSeq_id());
    return (*m_Genomic_id);
}

void CSpliced_seg_Base::ResetExons(void)
{
    m_Exons.clear();
    m_set_State[0] &= ~0xc00;
}

void CSpliced_seg_Base::ResetModifiers(void)
{
    m_Modifiers.clear();
    m_set_State[0] &= ~0x30000;
}

void CSpliced_seg_Base::Reset(void)
{
    ResetProduct_id();
    ResetGenomic_id();
    ResetProduct_strand();
    ResetGenomic_strand();
    ResetProduct_type();
    ResetExons();
    ResetPoly_a();
    ResetProduct_length();
    ResetModifiers();
}

BEGIN_NAMED_BASE_CLASS_INFO("Spliced-seg", CSpliced_seg)
{
    SET_CLASS_MODULE("NCBI-Seqalign");
    ADD_NAMED_REF_MEMBER("product-id", m_Product_id, CSeq_id)->SetOptional();
    ADD_NAMED_REF_MEMBER("genomic-id", m_Genomic_id, CSeq_id)->SetOptional();
    ADD_NAMED_ENUM_MEMBER("product-strand", m_Product_strand, ENa_strand)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("genomic-strand", m_Genomic_strand, ENa_strand)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_ENUM_MEMBER("product-type", m_Product_type, EProduct_type)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("exons", m_Exons, STL_list, (STL_CRef, (CLASS, (CSpliced_exon))))->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("poly-a", m_Poly_a)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("product-length", m_Product_length)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("modifiers", m_Modifiers, STL_list_set, (STL_CRef, (CLASS, (CSpliced_seg_modifier))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSpliced_seg_Base::CSpliced_seg_Base(void)
    : m_Product_strand((ncbi::objects::ENa_strand)(0)), m_Genomic_strand((ncbi::objects::ENa_strand)(0)), m_Product_type((EProduct_type)(0)), m_Poly_a(0), m_Product_length(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CSpliced_seg_Base::~CSpliced_seg_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

