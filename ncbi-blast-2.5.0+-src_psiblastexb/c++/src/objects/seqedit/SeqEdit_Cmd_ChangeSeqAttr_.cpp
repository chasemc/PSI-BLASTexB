/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqedit.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqedit/SeqEdit_Cmd_ChangeSeqAttr.hpp>
#include <objects/general/Int_fuzz.hpp>
#include <objects/seq/Seq_data.hpp>
#include <objects/seq/Seq_ext.hpp>
#include <objects/seq/Seq_hist.hpp>
#include <objects/seq/Seq_inst.hpp>
#include <objects/seqedit/SeqEdit_Id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Inst:
    case e_Fuzz:
    case e_Ext:
    case e_Hist:
    case e_Seq_data:
        m_object->RemoveReference();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* pool)
{
    switch ( index ) {
    case e_Inst:
        (m_object = new(pool) ncbi::objects::CSeq_inst())->AddReference();
        break;
    case e_Repr:
        m_Repr = 0;
        break;
    case e_Mol:
        m_Mol = 0;
        break;
    case e_Length:
        m_Length = 0;
        break;
    case e_Fuzz:
        (m_object = new(pool) ncbi::objects::CInt_fuzz())->AddReference();
        break;
    case e_Topology:
        m_Topology = 0;
        break;
    case e_Strand:
        m_Strand = 0;
        break;
    case e_Ext:
        (m_object = new(pool) ncbi::objects::CSeq_ext())->AddReference();
        break;
    case e_Hist:
        (m_object = new(pool) ncbi::objects::CSeq_hist())->AddReference();
        break;
    case e_Seq_data:
        (m_object = new(pool) ncbi::objects::CSeq_data())->AddReference();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::sm_SelectionNames[] = {
    "not set",
    "inst",
    "repr",
    "mol",
    "length",
    "fuzz",
    "topology",
    "strand",
    "ext",
    "hist",
    "seq-data"
};

NCBI_NS_STD::string CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

const CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TInst& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::GetInst(void) const
{
    CheckSelected(e_Inst);
    return *static_cast<const TInst*>(m_object);
}

CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TInst& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetInst(void)
{
    Select(e_Inst, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TInst*>(m_object);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetInst(CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TInst& value)
{
    TInst* ptr = &value;
    if ( m_choice != e_Inst || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Inst;
    }
}

const CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TFuzz& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::GetFuzz(void) const
{
    CheckSelected(e_Fuzz);
    return *static_cast<const TFuzz*>(m_object);
}

CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TFuzz& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetFuzz(void)
{
    Select(e_Fuzz, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TFuzz*>(m_object);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetFuzz(CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TFuzz& value)
{
    TFuzz* ptr = &value;
    if ( m_choice != e_Fuzz || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Fuzz;
    }
}

const CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TExt& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::GetExt(void) const
{
    CheckSelected(e_Ext);
    return *static_cast<const TExt*>(m_object);
}

CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TExt& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetExt(void)
{
    Select(e_Ext, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TExt*>(m_object);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetExt(CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TExt& value)
{
    TExt* ptr = &value;
    if ( m_choice != e_Ext || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Ext;
    }
}

const CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::THist& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::GetHist(void) const
{
    CheckSelected(e_Hist);
    return *static_cast<const THist*>(m_object);
}

CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::THist& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetHist(void)
{
    Select(e_Hist, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<THist*>(m_object);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetHist(CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::THist& value)
{
    THist* ptr = &value;
    if ( m_choice != e_Hist || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Hist;
    }
}

const CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TSeq_data& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::GetSeq_data(void) const
{
    CheckSelected(e_Seq_data);
    return *static_cast<const TSeq_data*>(m_object);
}

CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TSeq_data& CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetSeq_data(void)
{
    Select(e_Seq_data, NCBI_NS_NCBI::eDoNotResetVariant);
    return *static_cast<TSeq_data*>(m_object);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::SetSeq_data(CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::TSeq_data& value)
{
    TSeq_data* ptr = &value;
    if ( m_choice != e_Seq_data || m_object != ptr ) {
        ResetSelection();
        (m_object = ptr)->AddReference();
        m_choice = e_Seq_data;
    }
}

// helper methods

// type info
BEGIN_NAMED_CHOICE_INFO("", CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data)
{
    SET_INTERNAL_NAME("SeqEdit-Cmd-ChangeSeqAttr", "data");
    SET_CHOICE_MODULE("NCBI-SeqEdit");
    ADD_NAMED_REF_CHOICE_VARIANT("inst", m_object, CSeq_inst);
    ADD_NAMED_STD_CHOICE_VARIANT("repr", m_Repr);
    ADD_NAMED_STD_CHOICE_VARIANT("mol", m_Mol);
    ADD_NAMED_STD_CHOICE_VARIANT("length", m_Length);
    ADD_NAMED_REF_CHOICE_VARIANT("fuzz", m_object, CInt_fuzz);
    ADD_NAMED_STD_CHOICE_VARIANT("topology", m_Topology);
    ADD_NAMED_STD_CHOICE_VARIANT("strand", m_Strand);
    ADD_NAMED_REF_CHOICE_VARIANT("ext", m_object, CSeq_ext);
    ADD_NAMED_REF_CHOICE_VARIANT("hist", m_object, CSeq_hist);
    ADD_NAMED_REF_CHOICE_VARIANT("seq-data", m_object, CSeq_data);
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::C_Data(void)
    : m_choice(e_not_set)
{
}

// destructor
CSeqEdit_Cmd_ChangeSeqAttr_Base::C_Data::~C_Data(void)
{
    Reset();
}


void CSeqEdit_Cmd_ChangeSeqAttr_Base::ResetId(void)
{
    if ( !m_Id ) {
        m_Id.Reset(new TId());
        return;
    }
    (*m_Id).Reset();
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::SetId(CSeqEdit_Cmd_ChangeSeqAttr_Base::TId& value)
{
    m_Id.Reset(&value);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::ResetData(void)
{
    if ( !m_Data ) {
        m_Data.Reset(new TData());
        return;
    }
    (*m_Data).Reset();
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::SetData(CSeqEdit_Cmd_ChangeSeqAttr_Base::TData& value)
{
    m_Data.Reset(&value);
}

void CSeqEdit_Cmd_ChangeSeqAttr_Base::Reset(void)
{
    ResetId();
    ResetData();
}

BEGIN_NAMED_BASE_CLASS_INFO("SeqEdit-Cmd-ChangeSeqAttr", CSeqEdit_Cmd_ChangeSeqAttr)
{
    SET_CLASS_MODULE("NCBI-SeqEdit");
    ADD_NAMED_REF_MEMBER("id", m_Id, CSeqEdit_Id);
    ADD_NAMED_REF_MEMBER("data", m_Data, C_Data);
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSeqEdit_Cmd_ChangeSeqAttr_Base::CSeqEdit_Cmd_ChangeSeqAttr_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
    if ( !IsAllocatedInPool() ) {
        ResetId();
        ResetData();
    }
}

// destructor
CSeqEdit_Cmd_ChangeSeqAttr_Base::~CSeqEdit_Cmd_ChangeSeqAttr_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

