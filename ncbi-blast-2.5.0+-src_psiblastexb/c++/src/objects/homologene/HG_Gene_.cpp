/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'homologene.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/homologene/HG_Gene.hpp>
#include <objects/homologene/HG_Domain.hpp>
#include <objects/homologene/HG_Link.hpp>
#include <objects/seqloc/Seq_loc.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CHG_Gene_Base::ResetSymbol(void)
{
    m_Symbol.erase();
    m_set_State[0] &= ~0x30;
}

void CHG_Gene_Base::ResetAliases(void)
{
    m_Aliases.clear();
    m_set_State[0] &= ~0xc0;
}

void CHG_Gene_Base::ResetTitle(void)
{
    m_Title.erase();
    m_set_State[0] &= ~0x300;
}

void CHG_Gene_Base::ResetProt_acc(void)
{
    m_Prot_acc.erase();
    m_set_State[0] &= ~0xc000;
}

void CHG_Gene_Base::ResetNuc_acc(void)
{
    m_Nuc_acc.erase();
    m_set_State[0] &= ~0x300000;
}

void CHG_Gene_Base::ResetGene_links(void)
{
    m_Gene_links.clear();
    m_set_State[0] &= ~0xc00000;
}

void CHG_Gene_Base::ResetProt_links(void)
{
    m_Prot_links.clear();
    m_set_State[0] &= ~0x3000000;
}

void CHG_Gene_Base::ResetDomains(void)
{
    m_Domains.clear();
    m_set_State[0] &= ~0xc000000;
}

void CHG_Gene_Base::ResetChr(void)
{
    m_Chr.erase();
    m_set_State[0] &= ~0x30000000;
}

void CHG_Gene_Base::ResetLocation(void)
{
    m_Location.Reset();
}

void CHG_Gene_Base::SetLocation(CHG_Gene_Base::TLocation& value)
{
    m_Location.Reset(&value);
}

CHG_Gene_Base::TLocation& CHG_Gene_Base::SetLocation(void)
{
    if ( !m_Location )
        m_Location.Reset(new ncbi::objects::CSeq_loc());
    return (*m_Location);
}

void CHG_Gene_Base::ResetLocus_tag(void)
{
    m_Locus_tag.erase();
    m_set_State[1] &= ~0x3;
}

void CHG_Gene_Base::Reset(void)
{
    ResetGeneid();
    ResetOtherid();
    ResetSymbol();
    ResetAliases();
    ResetTitle();
    ResetTaxid();
    ResetProt_gi();
    ResetProt_acc();
    ResetProt_len();
    ResetNuc_gi();
    ResetNuc_acc();
    ResetGene_links();
    ResetProt_links();
    ResetDomains();
    ResetChr();
    ResetLocation();
    ResetLocus_tag();
}

BEGIN_NAMED_BASE_CLASS_INFO("HG-Gene", CHG_Gene)
{
    SET_CLASS_MODULE("HomoloGene");
    ADD_NAMED_STD_MEMBER("geneid", m_Geneid)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("otherid", m_Otherid)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("symbol", m_Symbol)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("aliases", m_Aliases, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("title", m_Title)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("taxid", m_Taxid)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_STD_MEMBER("prot-gi", m_Prot_gi)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("prot-acc", m_Prot_acc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("prot-len", m_Prot_len)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("nuc-gi", m_Nuc_gi)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("nuc-acc", m_Nuc_acc)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("gene-links", m_Gene_links, STL_list_set, (STL_CRef, (CLASS, (CHG_Link))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("prot-links", m_Prot_links, STL_list_set, (STL_CRef, (CLASS, (CHG_Link))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("domains", m_Domains, STL_list_set, (STL_CRef, (CLASS, (CHG_Domain))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("chr", m_Chr)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("location", m_Location, CSeq_loc)->SetOptional();
    ADD_NAMED_STD_MEMBER("locus-tag", m_Locus_tag)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CHG_Gene_Base::CHG_Gene_Base(void)
    : m_Geneid(0), m_Otherid(0), m_Taxid(0), m_Prot_gi(0), m_Prot_len(0), m_Nuc_gi(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CHG_Gene_Base::~CHG_Gene_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

