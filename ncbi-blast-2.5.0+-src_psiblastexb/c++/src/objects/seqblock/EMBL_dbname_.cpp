/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqblock.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqblock/EMBL_dbname.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CEMBL_dbname_Base::, ECode, false)
{
    SET_ENUM_INTERNAL_NAME("EMBL-dbname", "code");
    SET_ENUM_MODULE("EMBL-General");
    ADD_ENUM_VALUE("embl", eCode_embl);
    ADD_ENUM_VALUE("genbank", eCode_genbank);
    ADD_ENUM_VALUE("ddbj", eCode_ddbj);
    ADD_ENUM_VALUE("geninfo", eCode_geninfo);
    ADD_ENUM_VALUE("medline", eCode_medline);
    ADD_ENUM_VALUE("swissprot", eCode_swissprot);
    ADD_ENUM_VALUE("pir", eCode_pir);
    ADD_ENUM_VALUE("pdb", eCode_pdb);
    ADD_ENUM_VALUE("epd", eCode_epd);
    ADD_ENUM_VALUE("ecd", eCode_ecd);
    ADD_ENUM_VALUE("tfd", eCode_tfd);
    ADD_ENUM_VALUE("flybase", eCode_flybase);
    ADD_ENUM_VALUE("prosite", eCode_prosite);
    ADD_ENUM_VALUE("enzyme", eCode_enzyme);
    ADD_ENUM_VALUE("mim", eCode_mim);
    ADD_ENUM_VALUE("ecoseq", eCode_ecoseq);
    ADD_ENUM_VALUE("hiv", eCode_hiv);
    ADD_ENUM_VALUE("other", eCode_other);
}
END_ENUM_INFO

void CEMBL_dbname_Base::Reset(void)
{
    if ( m_choice != e_not_set )
        ResetSelection();
}

void CEMBL_dbname_Base::ResetSelection(void)
{
    switch ( m_choice ) {
    case e_Name:
        m_string.Destruct();
        break;
    default:
        break;
    }
    m_choice = e_not_set;
}

void CEMBL_dbname_Base::DoSelect(E_Choice index, NCBI_NS_NCBI::CObjectMemoryPool* )
{
    switch ( index ) {
    case e_Code:
        m_Code = (ECode)(0);
        break;
    case e_Name:
        m_string.Construct();
        break;
    default:
        break;
    }
    m_choice = index;
}

const char* const CEMBL_dbname_Base::sm_SelectionNames[] = {
    "not set",
    "code",
    "name"
};

NCBI_NS_STD::string CEMBL_dbname_Base::SelectionName(E_Choice index)
{
    return NCBI_NS_NCBI::CInvalidChoiceSelection::GetName(index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CEMBL_dbname_Base::ThrowInvalidSelection(E_Choice index) const
{
    throw NCBI_NS_NCBI::CInvalidChoiceSelection(DIAG_COMPILE_INFO, this, m_choice, index, sm_SelectionNames, sizeof(sm_SelectionNames)/sizeof(sm_SelectionNames[0]));
}

void CEMBL_dbname_Base::SetName(const CEMBL_dbname_Base::TName& value)
{
    Select(e_Name, NCBI_NS_NCBI::eDoNotResetVariant);
    *m_string = value;
}

// helper methods

// type info
BEGIN_NAMED_BASE_CHOICE_INFO("EMBL-dbname", CEMBL_dbname)
{
    SET_CHOICE_MODULE("EMBL-General");
    ADD_NAMED_ENUM_CHOICE_VARIANT("code", m_Code, ECode);
    ADD_NAMED_BUF_CHOICE_VARIANT("name", m_string, STD, (string));
    info->CodeVersion(21600);
}
END_CHOICE_INFO

// constructor
CEMBL_dbname_Base::CEMBL_dbname_Base(void)
    : m_choice(e_not_set)
{
}

// destructor
CEMBL_dbname_Base::~CEMBL_dbname_Base(void)
{
    Reset();
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

