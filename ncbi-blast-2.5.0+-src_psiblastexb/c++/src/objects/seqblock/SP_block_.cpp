/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqblock.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqblock/SP_block.hpp>
#include <objects/general/Date.hpp>
#include <objects/general/Dbtag.hpp>
#include <objects/seqloc/Seq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

BEGIN_NAMED_ENUM_IN_INFO("", CSP_block_Base::, EClass, false)
{
    SET_ENUM_INTERNAL_NAME("SP-block", "class");
    SET_ENUM_MODULE("SP-General");
    ADD_ENUM_VALUE("not-set", eClass_not_set);
    ADD_ENUM_VALUE("standard", eClass_standard);
    ADD_ENUM_VALUE("prelim", eClass_prelim);
    ADD_ENUM_VALUE("other", eClass_other);
}
END_ENUM_INFO

void CSP_block_Base::ResetExtra_acc(void)
{
    m_Extra_acc.clear();
    m_set_State[0] &= ~0xc;
}

void CSP_block_Base::ResetPlasnm(void)
{
    m_Plasnm.clear();
    m_set_State[0] &= ~0xc0;
}

void CSP_block_Base::ResetSeqref(void)
{
    m_Seqref.clear();
    m_set_State[0] &= ~0x300;
}

void CSP_block_Base::ResetDbref(void)
{
    m_Dbref.clear();
    m_set_State[0] &= ~0xc00;
}

void CSP_block_Base::ResetKeywords(void)
{
    m_Keywords.clear();
    m_set_State[0] &= ~0x3000;
}

void CSP_block_Base::ResetCreated(void)
{
    m_Created.Reset();
}

void CSP_block_Base::SetCreated(CSP_block_Base::TCreated& value)
{
    m_Created.Reset(&value);
}

CSP_block_Base::TCreated& CSP_block_Base::SetCreated(void)
{
    if ( !m_Created )
        m_Created.Reset(new ncbi::objects::CDate());
    return (*m_Created);
}

void CSP_block_Base::ResetSequpd(void)
{
    m_Sequpd.Reset();
}

void CSP_block_Base::SetSequpd(CSP_block_Base::TSequpd& value)
{
    m_Sequpd.Reset(&value);
}

CSP_block_Base::TSequpd& CSP_block_Base::SetSequpd(void)
{
    if ( !m_Sequpd )
        m_Sequpd.Reset(new ncbi::objects::CDate());
    return (*m_Sequpd);
}

void CSP_block_Base::ResetAnnotupd(void)
{
    m_Annotupd.Reset();
}

void CSP_block_Base::SetAnnotupd(CSP_block_Base::TAnnotupd& value)
{
    m_Annotupd.Reset(&value);
}

CSP_block_Base::TAnnotupd& CSP_block_Base::SetAnnotupd(void)
{
    if ( !m_Annotupd )
        m_Annotupd.Reset(new ncbi::objects::CDate());
    return (*m_Annotupd);
}

void CSP_block_Base::Reset(void)
{
    ResetClass();
    ResetExtra_acc();
    ResetImeth();
    ResetPlasnm();
    ResetSeqref();
    ResetDbref();
    ResetKeywords();
    ResetCreated();
    ResetSequpd();
    ResetAnnotupd();
}

BEGIN_NAMED_BASE_CLASS_INFO("SP-block", CSP_block)
{
    SET_CLASS_MODULE("SP-General");
    ADD_NAMED_ENUM_MEMBER("class", m_Class, EClass)->SetSetFlag(MEMBER_PTR(m_set_State[0]));
    ADD_NAMED_MEMBER("extra-acc", m_Extra_acc, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("imeth", m_Imeth)->SetDefault(new TImeth(false))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("plasnm", m_Plasnm, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("seqref", m_Seqref, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("dbref", m_Dbref, STL_list_set, (STL_CRef, (CLASS, (CDbtag))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("keywords", m_Keywords, STL_list_set, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("created", m_Created, CDate)->SetOptional();
    ADD_NAMED_REF_MEMBER("sequpd", m_Sequpd, CDate)->SetOptional();
    ADD_NAMED_REF_MEMBER("annotupd", m_Annotupd, CDate)->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CSP_block_Base::CSP_block_Base(void)
    : m_Class((EClass)(0)), m_Imeth(false)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CSP_block_Base::~CSP_block_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

