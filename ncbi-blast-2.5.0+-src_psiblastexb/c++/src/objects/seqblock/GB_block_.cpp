/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqblock.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqblock/GB_block.hpp>
#include <objects/general/Date.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CGB_block_Base::ResetExtra_accessions(void)
{
    m_Extra_accessions.clear();
    m_set_State[0] &= ~0x3;
}

void CGB_block_Base::ResetSource(void)
{
    m_Source.erase();
    m_set_State[0] &= ~0xc;
}

void CGB_block_Base::ResetKeywords(void)
{
    m_Keywords.clear();
    m_set_State[0] &= ~0x30;
}

void CGB_block_Base::ResetOrigin(void)
{
    m_Origin.erase();
    m_set_State[0] &= ~0xc0;
}

void CGB_block_Base::ResetDate(void)
{
    m_Date.erase();
    m_set_State[0] &= ~0x300;
}

void CGB_block_Base::ResetEntry_date(void)
{
    m_Entry_date.Reset();
}

void CGB_block_Base::SetEntry_date(CGB_block_Base::TEntry_date& value)
{
    m_Entry_date.Reset(&value);
}

CGB_block_Base::TEntry_date& CGB_block_Base::SetEntry_date(void)
{
    if ( !m_Entry_date )
        m_Entry_date.Reset(new ncbi::objects::CDate());
    return (*m_Entry_date);
}

void CGB_block_Base::ResetDiv(void)
{
    m_Div.erase();
    m_set_State[0] &= ~0x3000;
}

void CGB_block_Base::ResetTaxonomy(void)
{
    m_Taxonomy.erase();
    m_set_State[0] &= ~0xc000;
}

void CGB_block_Base::Reset(void)
{
    ResetExtra_accessions();
    ResetSource();
    ResetKeywords();
    ResetOrigin();
    ResetDate();
    ResetEntry_date();
    ResetDiv();
    ResetTaxonomy();
}

BEGIN_NAMED_BASE_CLASS_INFO("GB-block", CGB_block)
{
    SET_CLASS_MODULE("GenBank-General");
    ADD_NAMED_MEMBER("extra-accessions", m_Extra_accessions, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("source", m_Source)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("keywords", m_Keywords, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("origin", m_Origin)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("date", m_Date)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_REF_MEMBER("entry-date", m_Entry_date, CDate)->SetOptional();
    ADD_NAMED_STD_MEMBER("div", m_Div)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("taxonomy", m_Taxonomy)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CGB_block_Base::CGB_block_Base(void)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CGB_block_Base::~CGB_block_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

