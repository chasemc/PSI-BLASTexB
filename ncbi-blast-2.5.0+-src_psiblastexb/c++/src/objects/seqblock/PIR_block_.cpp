/* $Id$
 * ===========================================================================
 *
 *                            PUBLIC DOMAIN NOTICE
 *               National Center for Biotechnology Information
 *
 *  This software/database is a "United States Government Work" under the
 *  terms of the United States Copyright Act.  It was written as part of
 *  the author's official duties as a United States Government employee and
 *  thus cannot be copyrighted.  This software/database is freely available
 *  to the public for use. The National Library of Medicine and the U.S.
 *  Government have not placed any restriction on its use or reproduction.
 *
 *  Although all reasonable efforts have been taken to ensure the accuracy
 *  and reliability of the software and data, the NLM and the U.S.
 *  Government do not and cannot warrant the performance or results that
 *  may be obtained by using this software or data. The NLM and the U.S.
 *  Government disclaim all warranties, express or implied, including
 *  warranties of performance, merchantability or fitness for any particular
 *  purpose.
 *
 *  Please cite the author in any work or product based on this material.
 *
 * ===========================================================================
 *
 * File Description:
 *   This code was generated by application DATATOOL
 *   using the following specifications:
 *   'seqblock.asn'.
 *
 * ATTENTION:
 *   Don't edit or commit this file into CVS as this file will
 *   be overridden (by DATATOOL) without warning!
 * ===========================================================================
 */

// standard includes
#include <ncbi_pch.hpp>
#include <serial/serialimpl.hpp>

// generated includes
#include <objects/seqblock/PIR_block.hpp>
#include <objects/seqloc/Seq_id.hpp>
BEGIN_NCBI_SCOPE

BEGIN_objects_SCOPE // namespace ncbi::objects::


// generated classes

void CPIR_block_Base::ResetHost(void)
{
    m_Host.erase();
    m_set_State[0] &= ~0xc;
}

void CPIR_block_Base::ResetSource(void)
{
    m_Source.erase();
    m_set_State[0] &= ~0x30;
}

void CPIR_block_Base::ResetSummary(void)
{
    m_Summary.erase();
    m_set_State[0] &= ~0xc0;
}

void CPIR_block_Base::ResetGenetic(void)
{
    m_Genetic.erase();
    m_set_State[0] &= ~0x300;
}

void CPIR_block_Base::ResetIncludes(void)
{
    m_Includes.erase();
    m_set_State[0] &= ~0xc00;
}

void CPIR_block_Base::ResetPlacement(void)
{
    m_Placement.erase();
    m_set_State[0] &= ~0x3000;
}

void CPIR_block_Base::ResetSuperfamily(void)
{
    m_Superfamily.erase();
    m_set_State[0] &= ~0xc000;
}

void CPIR_block_Base::ResetKeywords(void)
{
    m_Keywords.clear();
    m_set_State[0] &= ~0x30000;
}

void CPIR_block_Base::ResetCross_reference(void)
{
    m_Cross_reference.erase();
    m_set_State[0] &= ~0xc0000;
}

void CPIR_block_Base::ResetDate(void)
{
    m_Date.erase();
    m_set_State[0] &= ~0x300000;
}

void CPIR_block_Base::ResetSeq_raw(void)
{
    m_Seq_raw.erase();
    m_set_State[0] &= ~0xc00000;
}

void CPIR_block_Base::ResetSeqref(void)
{
    m_Seqref.clear();
    m_set_State[0] &= ~0x3000000;
}

void CPIR_block_Base::Reset(void)
{
    ResetHad_punct();
    ResetHost();
    ResetSource();
    ResetSummary();
    ResetGenetic();
    ResetIncludes();
    ResetPlacement();
    ResetSuperfamily();
    ResetKeywords();
    ResetCross_reference();
    ResetDate();
    ResetSeq_raw();
    ResetSeqref();
}

BEGIN_NAMED_BASE_CLASS_INFO("PIR-block", CPIR_block)
{
    SET_CLASS_MODULE("PIR-General");
    ADD_NAMED_STD_MEMBER("had-punct", m_Had_punct)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("host", m_Host)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("source", m_Source)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("summary", m_Summary)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("genetic", m_Genetic)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("includes", m_Includes)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("placement", m_Placement)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("superfamily", m_Superfamily)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("keywords", m_Keywords, STL_list, (STD, (string)))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("cross-reference", m_Cross_reference)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("date", m_Date)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_STD_MEMBER("seq-raw", m_Seq_raw)->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    ADD_NAMED_MEMBER("seqref", m_Seqref, STL_list_set, (STL_CRef, (CLASS, (CSeq_id))))->SetSetFlag(MEMBER_PTR(m_set_State[0]))->SetOptional();
    info->RandomOrder();
    info->CodeVersion(21600);
}
END_CLASS_INFO

// constructor
CPIR_block_Base::CPIR_block_Base(void)
    : m_Had_punct(0)
{
    memset(m_set_State,0,sizeof(m_set_State));
}

// destructor
CPIR_block_Base::~CPIR_block_Base(void)
{
}



END_objects_SCOPE // namespace ncbi::objects::

END_NCBI_SCOPE

